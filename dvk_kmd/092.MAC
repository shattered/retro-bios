	.TITLE	KMDROM
	.IDENT	/092/
	.ASECT
	.=0
; Точка перехода при начальном запуске
1$:	CLR	R5		; Счетчик ошибок тестирования = 0
	BR	342$		; Переход на программу тестирования
4$:	.WORD	36$,340		; Вектор прерывания по ошибке канала (TRAP4)
10$:	.WORD	42$,340		; Вектор прерывания по рез.инструкц.(TRAP10)
	.WORD	1,1,1,1
24$:	.WORD	46$,340		; Вектор прерывания по ошибке питания
; Обработка прерывания по ошибке питания
30$:	MOV	#100012,R0	; R0 = ошибка - прерывание по вектору 24
	BR	256$		; Переход на обработку фатальных ошибок
36$:	JMP	72(R3)		; Переход на обработку прерывания TRAP4
42$:	JMP	76(R3)		; Переход на обработку прерывания TRAP10
46$:	JMP	102(R3)		; Переход на обраб.прер. по ошибке питания
52$:	JMP	106(R3)		; Переход на обраб.прер. IRQ2 (INIT ЦП)
	.WORD	1,1,1,1,1,1,1,1,1
100$:	.WORD	52$,340		; Вектор прер.IRQ2(INIT на шине системы(ЦП))
; Обработка прерывания по ошибке канала (TRAP4)
104$:	CLR	@#177100	; Очистить регистр команд
	CLR	@#177130	; Очистить РСН (останов мотора, снятие выбора)
	TST	@#177132	; Перевести контроллер накоп.в режим чтения
	CMP	SP,#21000	; Указатель стека перевалил за 21000 ?
	BHI	176$		; Да - ошибка
	CMP	SP,#15000	; Указатель стека меньше 15000 ?
	BLO	176$		; Да - ошибка
	CMP	@SP,#3600$	; Прерывание при чтении массива параметров ?
	BEQ	164$		; Да
	CMP	@SP,#5256$	; Прер. во время записи(чтение из ОЗУ ЦП) ?
	BEQ	164$		; Да
	CMP	@SP,#6456$	; Прер. во время перед.загол.(запись ОЗУ ЦП) ?
	BEQ	164$		; Да
	CMP	@SP,#7316$	; Прер. во время чтения (запись ОЗУ ЦП) ?
	BNE	176$		; Нет
164$:	MOV	#100003,0(R3)	; РСО = TRAP4 во время операций чтения/записи
	JMP	7500$		; Прерывание операции и передача ответа
176$:	MOV	#100004,R0	; R0 = TRAP4 не во время операций чт./зап.
202$:	MOV	R0,@#177102	; Передать код ошибки в регистр данных
	MOV	#100040,@#177100; Устан. в РК биты ошибок и завершения
	MTPS	#0		; Разрешить прерывания
220$:	BIT	#40,@#177100	; Сброшен бит DONE (запись в РК с битом GO)
	BNE	220$		; Нет
	BIT	#40000,@#177100	; Запрошена инициализация КМД?
	BEQ	244$		; Нет
	JMP	@#10000$	; Перезапуск с нуля
244$:	MTPS	#340		; Запретить прерывания
250$:	BR	202$		; На передачу ошибки в регистр команд
; Обработка прерывания по резервной инструкции (TRAP10)
252$:	MOV	#100000,R0	; R0 = ошибка - прерывание TRAP10
256$:	CLR	@#177100	; Очистить регистр команд
	CLR	@#177130	; Очистить РСН (останов мотора, снятие выбора)
	TST	@#177132	; Перевести контроллер накоп.в режим чтения
	BR	202$		; На передачу ошибки в регистр команд
; Обработка прерывания IRQ2 (сигнал INIT на шине вычислителя)
274$:	CLR	@#177100	; Очистить регистр команд
	CLR	@#177130	; Очистить РСН (останов мотора, снятие выбора)
	TST	@#177132	; Перевести контроллер накоп.в режим чтения
	CMP	@SP,#220$	; Адрес прерывания больше 220
	BHIS	322$		; Да
316$:	JMP	@#10000		; Перезапуск с нуля
322$:	CMP	@SP,#250$	; Адрес прерывания меньше 250
	BLOS	316$		; Да - на перезапуск
	MOV	R3,SP		; Указатель стека = R3 + 176
	ADD	#176,SP
	JMP	2620$		; Переход на прием очередной команды
; Программы тестирования ПЗУ, ОЗУ, процессора и регистров контроллера КМД
342$:	MOV	#20000,R3	; R3 = начальный адрес ОЗУ
	CLR	@#177100	; Очистить регистр команд                     
	CLR	@#177130	; Очистить РСН (останов мотора, снятие выбора)
	TST	@#177132	; Перевести контроллер накоп.в режим чтения   
	MOV	#100000,R5      ; Сч.ошиб.=0,R5[15]=1 - ПЗУ и ОЗУ не тестиров.
	MOV	#21000,SP	; SP = конечный адрес ОЗУ
; Тестирование ПЗУ (подсчет контрольной суммы)
372$:	CLR	R0		; Контрольная сумма = 0
	CLR	R1		; Начальный адрес = 0
	MOV	#5000,R2	; Количество слов (диапазон 0 - 11777)
402$:	ADD	(R1)+,R0	; Подсчет контрольной суммы ...
	ADC	R0		;   ... с прибавлением переноса
	SOB	R2,402$
	CMP	R0,@R1		; Она равна значению в ячейке 12000
	BEQ	444$		; Да - все в порядке
	CMPB	@#177716,#3	; Установлен технологический режим ?
	BNE	434$		; Нет
	INC	R5		; Увеличить счетчик ошибок
	CMPB	#37,R5		; Количество ошибок превысило 30?
	BHIS	372$		; Нет
434$:	MOV	#100002,R0	; R0 = ошибка - не совпадает контрол.сумма ПЗУ
440$:	JMP	202$		; На передачу ошибки в регистр команд
; Тестирование ОЗУ (поиск блока памяти объемом 128 байт)
444$:	TST	R5		; ОЗУ уже успешно прошло тесты?
	BPL	506$		; Да
	CMP	#21000,SP	; ОЗУ еще не тестировалось?
	BNE	462$		; Нет
	TST	-(SP)		; Уменьшить SP на 2
	BR	506$		; Переход на тестирование
462$:	CMP	#20176,SP	; Указатель стека на первом блоке памяти?
	BLO	502$		; Нет
	CMPB	@#177716,#3	; Установлен технологический режим ?
	BNE	750$		; Нет - ошибка - нет исправного блока
	BR	506$		; На тестирование
502$:	SUB	#200,SP		; Переход к следующему блоку
; Пословный тест бегущей единицей и бегущим нулем
506$:	MOV	SP,R1		; R1 = начало блока памяти
	SUB	#176,R1
	MOV	#100,R2		; R2 = объем блока в словах
520$:	MOV	#1,R0		; R0 = 1 (нач. установка бегущей единицы)
	MOV	R0,R3		; R3 = вид теста 1-бег.единица 0-бег.ноль
526$:	MOV	R0,@R1		; Записать значение в ОЗУ
	CMP	R0,@R1		; Сравнить с записанным
	BNE	724$		; Не совпало - ошибка
	TST	R3		; Какой тест?
	BEQ	554$		; Бегущий ноль
	ASL	R0		; Сдвинуть единицу на разряд влево
	BCC	526$		; Еще не окончили
	CLR	R3		; R3 = тест бегущего нуля
	MOV	#177776,R0	; R0 = 177776 (нач. установка бегущего нуля)
	BR	526$		; На тестирование
554$:	SEC			; Установить бит переноса
	ROL	R0		; Сдвинуть ноль на разряд влево
	BCS	526$		; Еще не окончили
	TST	(R1)+		; Переход к следующей ячейке
	SOB	R2,520$
; Пословный тест заполнения ячеек значением адреса в первом проходе и
; значением инверсного адреса во втором проходе. Сравнение после
; заполнения блока.
	MOV	SP,R1		; R1 = начало блока памяти
	SUB	#176,R1
	CLR	R3     		; R3 = 0 - первый проход
576$:	MOV	#100,R2		; R2 = объем блока в словах
602$:	MOV	R1,R0		; R0 = адрес ячейки
	TST	R3		; Первый проход?
	BEQ	612$		; Да
	COM	R0		; Инвертировать адрес
612$:	MOV	R0,(R1)+	; Записать в ячейку
	SOB	R2,602$
	MOV	#100,R2		; R2 = объем блока в словах
622$:	CMP	R0,-(R1)	; Сравнить записанное
	BNE	724$		; Не равно
	MOV	R1,R0		; R0 = адрес предыдущей ячейки
	SUB	#2,R0
	TST	R3		; Первый проход?
	BEQ	642$		; Да
	COM	R0		; Инвертировать адрес
642$:	SOB	R2,622$
	COM	R3		; Сменить проход  0 -> 177777 или 177777 -> 0
	BNE	576$		; На второй проход
; Побайтовый тест с записью 377 и 0 в первом проходе и 0 и 377 во втором
; Сравнение производится после заполнения блока.
	MOV	#377,R0		; R0 = 377 0 (для первого прохода)
	MOV	SP,R1		; R1 = начало блока памяти
	SUB	#176,R1
662$:	MOV	#100,R2		; R2 = объем блока в словах
666$:	MOVB	R0,(R1)+	; Занести младш. байт R0 в младший байт ячейки
	SWAB	R0		; Обменять байты в R0
	MOVB	R0,(R1)+	; Занести в старший байт ячейки
	SWAB	R0		; Обменять байты в R0
	SOB	R2,666$
	MOV	#100,R2		; R2 = объем блока в словах
704$:	CMP	R0,-(R1)	; Сравнить со считанным
	BNE	724$		; Не совпадает
	SOB	R2,704$
	SWAB	R0		; Обменять для второго прохода
	BEQ	662$		; Переход для второго прохода
	BIC	#100000,R5	; R5[15] = 0, тест ПЗУ и ОЗУ прошел успешно
	BR	756$		; На тест процессора
724$:	CMPB	@#177716,#3	; Установлен технологический режим ?
	BNE	462$		; Нет - на тестирование следующего блока
	TST	R5		; Тест ПЗУ и ОЗУ проходил успешно?
	BMI	462$		; Нет - на тестирование следующего блока
	INC	R5		; Увеличить счетчик ошибок
	CMP	#37,R5		; Количество ошибок превысило 30?
	BHIS	372$		; Нет - на тест ПЗУ
750$:	MOV	#100001,R0	; R0 = ошибка - нет исправных блоков ОЗУ
	BR	440$		; На передачу ошибки в регистр команд
; Тестирование процессора
756$:	CCC			; N=0 Z=0 V=0 C=0
	BCS	1000$		; C=1? Да - ошибка
	BVS	1000$		; V=1? Да - ошибка
	BEQ	1000$		; Z=1? Да - ошибка
	BMI	1000$		; N=1? Да - ошибка
	BLT	1000$		; (N xor V)=1? Да - ошибка
	BLE	1000$		; ((N xor V) or Z)=1? Да - ошибка
	BLOS	1000$		; (C or Z)=1? Да - ошибка
	BHI	1004$		; (C or Z)=0? Да - OK
1000$:	JMP	2172$		; Ошибка процессора
1004$:	SEV			; N=1 Z=0 V=1 C=0
	SEN
	BVC	1020$		; V=0? Да - ошибка
	BLT	1020$		; (N xor V)=1? Да - ошибка
	BLE	1020$		; ((N xor V) or Z)=1? Да - ошибка
	BGE	1024$		; (N xor V)=0? Да - OK
1020$:	JMP	2172$		; Ошибка процессора
1024$:	SEZ			; N=1 Z=1 V=1 C=1
	SEC
	BNE	1040$		; Z=0? Да - ошибка
	BGT	1040$		; ((N xor V) or Z)=0? Да - ошибка
	BHI	1040$		; (C or Z)=0? Да - ошибка
	BLE	1044$		; ((N xor V) or Z)=1? Да - OK
1040$:	JMP	2172$		; Ошибка процессора
1044$:	MOV	SP,R3		; R3 = BRAM+176
	CLR	@R3		; [BRAM+176] = 0
	MOV	R3,R0		; R0 = BRAM+176
	TST	-(R3)		; R3 = BRAM+174
	MOV	R0,@R3		; [BRAM+174] = BRAM+176
	MOV	R3,R4		; R4 = [BRAM+174]
	CCC			; N=0 Z=0 V=0 C=0
	TST	@(R3)+		; [BRAM+176]=0? R3 = BRAM+176 NZVC=0100
	BEQ	1072$		; Да
	JMP	2172$		; Ошибка процессора
1072$:	SEC			; C=1
	ROR	@-(R3)          ; [BRAM+176] = 100000 R3 = BRAM+174 NZVC=1010
	BCS	1104$		; C=1? Да - ошибка
	BVC	1104$		; V=0? Да - ошибка
	BMI	1110$		; N=1? Да - OK
1104$:	JMP	2172$		; Ошибка процессора
1110$:	CCC			; N=0 Z=0 V=0 C=0
	ASR	@(R4)+		; [BRAM+176] = 140000 R4 = BRAM+176 NZVC=1010
	BVC	1120$		; V=0? Да - ошибка
	BMI	1124$		; N=1? Да - OK
1120$:	JMP	2172$		; Ошибка процессора
1124$:	CLN			; N=0 
	ASL	@(R3)+		; [BRAM+176] = 100000 R3 = BRAM+176 NZVC=1001
	BCC	1136$		; C=0? Да - ошибка
	BVS	1136$		; V=1? Да - ошибка
	BMI	1142$		; N=1? Да - OK
1136$:	JMP	2172$		; Ошибка процессора
1142$:	SCC			; N=1 Z=1 V=1 C=1
	DEC	@-(R4)		; [BRAM+176] = 077777 R4 = BRAM+174 NZVC=0011
	BCC	1156$		; C=0? Да - ошибка
	BVC	1156$		; V=0? Да - ошибка
	BEQ	1156$		; Z=1? Да - ошибка
	BPL	1162$		; N=0? Да - OK
1156$:	JMP	2172$		; Ошибка процессора
1162$:	NEG	@-(R3)		; [BRAM+176] = 100001 R3 = BRAM+174 NZVC=1001
	BCC	1172$		; C=0? Да - ошибка
	BVS	1172$		; V=1? Да - ошибка
	BMI	1176$		; N=1? Да - OK
1172$:	JMP	2172$		; Ошибка процессора
1176$:	SEV			; V=1
	COM	@(R4)+		; [BRAM+176] = 077776 R4 = BRAM+176 NZVC=0001
	BCC	1206$		; C=0? Да - ошибка
	BVC	1212$		; V=0? Да - OK
1206$:	JMP	2172$		; Ошибка процессора
1212$:	INC	@(R3)+		; [BRAM+176] = 077777 R3 = BRAM+176 NZVC=0001
	BCC	1220$		; C=0? Да - ошибка
	BPL	1224$		; N=0? Да - OK
1220$:	JMP	2172$		; Ошибка процессора
1224$:	ADC	@-(R4)		; [BRAM+176] = 100000 R4 = BRAM+174 NZVC=1010
	BCS	1234$		; C=1? Да - ошибка
	BVC	1234$		; V=0? Да - ошибка
	BMI	1240$		; N=1? Да - OK
1234$:	JMP	2172$		; Ошибка процессора
1240$:	CCC			; N=0 Z=0 V=0 C=0
	ROL	@(R4)+		; [BRAM+176] = 000000 R4 = BRAM+176 NZVC=0111
	BCC	1252$		; C=0? Да - ошибка
	BVC	1252$		; V=0? Да - ошибка
	BEQ	1256$		; Z=1? Да - OK
1252$:	JMP	2172$		; Ошибка процессора
1256$:	INC	@-(R3)		; [BRAM+176] = 000001 R3 = BRAM+174 NZVC=0001
	SBC	@-(R4)		; [BRAM+176] = 000000 R4 = BRAM+174 NZVC=0100
	BCS	1266$		; C=1? Да - ошибка
	BEQ	1272$		; Z=1? Да - OK
1266$:	JMP	2172$		; Ошибка процессора
1272$:	MOV	SP,R2		; R2 = BRAM+176
	MOV	R2,R0		; R0 = BRAM+176
	CLR	@R0		; [BRAM+176] = 000000 NZVC=0100
	TST	-(R2)		; R2 = BRAM+174
	TST	-(R2)		; R2 = BRAM+172
	MOV	R0,(R2)+	; [BRAM+172] = BRAM+176 R2 = BRAM+174
	INC	R0		; R0 = BRAM+177
	MOV	R0,(R2)+	; [BRAM+174] = BRAM+177	R2 = BRAM+176
	MOV	R2,R0		; R0 = BRAM+176
	MOV	R2,R1		; R1 = BRAM+176
	COMB	@-(R2)		; [BRAM+177] = 377 R2 = BRAM+174 NZVC=1001
	BCC	1324$		; C=0? Да - ошибка
	BMI	1330$		; N=1? Да - OK
1324$:	JMP	2172$		; Ошибка процессора
1330$:	TSTB	@-(R2)		; [BRAM+176]=000? R2 = BRAM+172 NZVC=0100
	BEQ	1340$		; Да
	JMP	2172$		; Ошибка процессора
1340$:	SEV			; V=1
	ASRB	@-(R1)		; [BRAM+177] = 377 R1 = BRAM+174 NZVC=1001
	BCC	1352$		; C=0? Да - ошибка
	BVS	1352$		; V=1? Да - ошибка
	BMI	1356$		; N=1? Да - OK
1352$:	JMP	2172$		; Ошибка процессора
1356$:	INCB	@(R2)+		; [BRAM+176] = 001 R2 = BRAM+174 NZVC=0001
	BCC	1364$		; C=0? Да - ошибка
	BPL	1370$		; N=0? Да - OK
1364$:	JMP	2172$		; Ошибка процессора
1370$:	CLC			; C=0
	RORB	@-(R1)		; [BRAM+176] = 000 R1 = BRAM+172 NZVC=0111
	BCC	1404$		; C=0? Да - ошибка
	BVC	1404$		; V=0? Да - ошибка
	BNE	1404$		; Z=0? Да - ошибка
	BPL	1410$		; N=0? Да - OK
1404$:	JMP	2172$		; Ошибка процессора
1410$:	ASLB	@(R2)+		; [BRAM+177] = 376 R2 = BRAM+176 NZVC=1001
	BCC	1420$		; C=0? Да - ошибка
	BVS	1420$		; V=1? Да - ошибка
	BMI	1424$		; N=1? Да - OK
1420$:	JMP	2172$		; Ошибка процессора
1424$:	ADCB	@-(R2)		; [BRAM+177] = 377 R2 = BRAM+174 NZVC=1000
	BCS	1432$		; C=1? Да - ошибка
	BMI	1436$		; N=1? Да - OK
1432$:	JMP	2172$		; Ошибка процессора
1436$:	SCC			; N=1 Z=1 V=1 C=1
	ROLB	@(R1)+		; [BRAM+176] = 001 R1 = BRAM+174 NZVC=0000
	BLOS	1450$		; (C or Z)=1? Да - ошибка
	BVS	1450$		; V=1? Да - ошибка
	BPL	1454$		; N=0? Да - OK
1450$:	JMP	2172$		; Ошибка процессора
1454$:	SWAB	@-(R2)		; [BRAM+176 177]=377 001 R2=BRAM+172 NZVC=1000
	BMI	1464$		; N=1? Да - OK
	JMP	2172$		; Ошибка процессора
1464$:	SEC			; C=1
	SBCB	@(R1)+		; [BRAM+177] = 000 R1 = BRAM+176 NZVC=0100
	BCS	1474$		; C=1? Да - ошибка
	BEQ	1500$		; Z=1? Да - OK
1474$:	JMP	2172$		; Ошибка процессора
1500$:	NEGB	@(R2)+		; [BRAM+176] = 001 R2 = BRAM+174 NZVC=0001
	DECB	@-(R2)		; [BRAM+176] = 000 R2 = BRAM+172 NZVC=0101
	BCC	1510$		; C=0? Да - ошибка
	BEQ	1514$		; Z=1? Да - OK
1510$:	JMP	2172$		; Ошибка процессора
1514$:	MOV	SP,R0		; R0 = BRAM+176
	MOV	R0,R1		; R1 = BRAM+176
	CMP	-(R1),-(R1)	; R1 = BRAM+172
	MOV	R0,@R1		; [BRAM+172] = BRAM+176
	MOV	R1,R2		; R2 = BRAM+172
	MOV	R0,R4		; R4 = BRAM+176
	TST	-(R0)		; R0 = BRAM+174
	MOV	R0,R3		; R3 = BRAM+174
	MOV	R0,-(R2)	; [BRAM+170] = BRAM+174 R2 = BRAM+170
	CLR	@R3		; [BRAM+174] = 000000
	CLR	@R4		; [BRAM+176] = 000000
	SCC			; N=1 Z=1 V=1 C=1
	CLZ			; Z=0
	SUB	@(R2)+,@(R1)+	; [B+176]=0 R1=BRAM+174 R2=BRAM+172 NZVC=0100
	BCS	1556$		; C=1? Да - ошибка
	BVS	1556$		; V=1? Да - ошибка
	BEQ	1562$		; Z=1? Да - OK
1556$:	JMP	2172$		; Ошибка процессора
1562$:	BIS	#100000,@-(R2)	; [BRAM+174] = 100000 R2 = BRAM+170 NZVC=1000
	ADD	#1,@-(R1)	; [BRAM+176] = 000001 R1 = BRAM+172 NZVC=0000
	SUB	@(R2)+,@(R1)+	; [B+176]=100001 R1=B+174 R2=B+172 NZVC=1011
	BCC	1602$		; C=0? Да - ошибка
	BVC	1602$		; V=0? Да - ошибка
	BMI	1606$		; N=1? Да - OK
1602$:	JMP	2172$		; Ошибка процессора
1606$:	NEG	@R4		; [BRAM+176]=077777 NZVC=0001
	BIT	@-(R2),@-(R1)	; [B174]100000&[B176]77777 R1=B172 R2=B170 0101
	BEQ	1620$		; Z=1? Да - OK
	JMP	2172$		; Ошибка процессора
1620$:	CMP	@(R2)+,@(R1)+	; [B174]100000-[B176]77777 R1=B174 R2=B172 0010
	BVS	1630$		; V=1? Да - OK
	JMP	2172$		; Ошибка процессора
1630$:	COM	@-(R2)		; [BRAM+174] = 077777 R2=BRAM+170 NZVC=0001
	CCC			; N=0 Z=0 V=0 C=0
	ADD	@(R2)+,@-(R1)	; [B176]=177776 R1=B172 R2=B172 NZVC=1010
	BVC	1642$		; V=0? Да - ошибка
	BMI	1646$		; N=1? Да - OK
1642$:	JMP	2172$		; Ошибка процессора
1646$:	SEC			; C=1
	BIC	@-(R2),@(R1)+	; [B176]=100000 R1=B174 R2=B170 NZVC=1001
	BCC	1656$		; C=0? Да - ошибка
	BMI	1662$		; N=1? Да - OK
1656$:	JMP	2172$		; Ошибка процессора
1662$:	COM	@-(R1)		; [BRAM+176] = 077777 R1 = BRAM+172 NZVC=0001
	CMP	@(R2)+,@(R1)+	; [B174]77777-[B176]77777 R1=B174 R2=B172 0100
	BEQ	1674$		; Z=1? Да - OK
	JMP	2172$		; Ошибка процессора
1674$:	MOV	SP,R0		; R0 = BRAM+176
	MOV	R0,R3		; R3 = BRAM+176
	MOV	R3,R1		; R1 = BRAM+176
	TST	-(R3)		; R3 = BRAM+174
	MOV	R0,-(R3)	; [BRAM+172] = BRAM+176 R3 = BRAM+172
	INC	@R3		; [BRAM+172] = BRAM+177
	MOV	R0,-(R3)	; [BRAM+170] = BRAM+176 R3 = BRAM+170
	MOV	R3,R4		; R4 = BRAM+170
	TST	-(R0)		; R0 = BRAM+174
	MOV	R0,-(R4)	; [BRAM+166] = BRAM+174 R4 = BRAM+166
	INC	@R4		; [BRAM+166] = BRAM+175
	MOV	R0,-(R4)	; [BRAM+164] = BRAM+174 R4 = BRAM+164
	SEC			; C=1
	MOV	#177001,@(R4)+	; [B174]=001 [B175]=376 R4=B166 NZVC=1001
	MOVB	#200,@(R4)+	; [BRAM+175] = 200 R4 = BRAM+170 NZVC=1001
	MOVB	@-(R4),@(R3)+	; [BRAM+176] = 200 R3=B172 R4=B166 NZVC=1001
	MOVB	@-(R4),@(R3)+	; [BRAM+177] = 001 R3=B174 R4=B164 NZVC=0001
	BCS	1750$		; C=1? Да - OK
	JMP	2172$		; Ошибка процессора
1750$:	CMP	#600,@R1	; [BRAM+176]=000600? NZVC=0100
	BEQ	1762$		; Да
	JMP	2172$		; Ошибка процессора
1762$:	CMP	-(R3),-(R3)     ; R3 = BRAM+170
	BISB	@(R4)+,@(R3)+	; [BRAM+176] = 201 R3=B172 R4=B166
	BISB	@(R4)+,@(R3)+	; [BRAM+177] = 201 R3=B174 R4=B170
	CMP	#100601,@R1	; [BRAM+176]=100601? NZVC=0100
	BEQ	2002$		; Да
	JMP	2172$		; Ошибка процессора
2002$:	BICB	@-(R4),@-(R3)	; [BRAM+177] = 001 R3=B172 R4=B166
	BICB	@-(R4),@-(R3)	; [BRAM+176] = 200 R3=B170 R4=B164
	BITB	@(R4)+,@(R3)+	; [B174]001&[B176]200 R3=B172 R4=B166 NZVC=0100
	BNE	2016$		; Z=0? Да - ошибка
	BITB	@-(R4),@(R3)+	; [B174]001&[B177]001 R3=B174 R4=B164 NZVC=0000
	BNE	2022$		; Z=0? Да - OK
2016$:	JMP	2172$		; Ошибка процессора
2022$:	CMPB	@(R4)+,@-(R3)	; [B174]001-[B177]001 R3=B172 R4=B166 NZVC=0100
	BNE	2032$		; Z=0? Да - ошибка
	CMPB	@(R4)+,@-(R3)	; [B175]200-[B176]200 R3=B174 R4=B164 NZVC=0100
	BEQ	2036$		; Z=1? Да - OK
2032$:	JMP	2172$		; Ошибка процессора
2036$:	MOV	PC,R0		; R0 = 2040
	ADD	#<2052$-.>,R0	; R0 = 2052
	SCC			; N=1 Z=1 V=1 C=1
	JMP	@R0		; Переход на 2052
2050$:	BR	2056$		; Переход на 2056
2052$:	CLN			; N=0
	BR	2050$		; Переход на 2050
2056$:	BCC	2066$		; C=0? Да - ошибка
	BVC	2066$		; V=0? Да - ошибка
	BNE	2066$		; Z=0? Да - ошибка
	BPL	2072$		; N=0? Да - OK
2066$:	JMP	2172$		; Ошибка процессора
2072$:	CLR	R2		; R2 = 0
	MOV	PC,R4		; R4 = 2076
	MOV	R4,R0		; R0 = 2076
	BR	2106$		; Переход на 2106
2102$:	COM	R2		; R2 = 177777 NZVC=1001
	BR	2114$		; Переход на 2114
2106$:	CMP	(R4)+,(R4)+	; R4 = 2102
	TST	(R4)+		; R4 = 2104
	JMP	-(R4)		; Переход на 2102 R4 = 2102
2114$:	INC	R2		; R2 = 000000 NZVC=0111
	BNE	2126$		; Z=0? Да - ошибка
	CMP	(R0)+,(R0)+	; R0 = 2102
	CMP	R0,R4		; R0 и R4 равны?
	BEQ	2132$		; Да
2126$:	JMP	2172$		; Ошибка процессора
2132$:	MOV	#2154$,R2	; R2 = 2154
	SCC			; N=1 Z=1 V=1 C=1
	CLV			; V=0
	JSR	R1,@R2		; Вызов п/п 2154 R1=2144
	TST	R2		; R2 равен нулю?
	BNE	2172$		; Нет - ошибка
	BR	2226$		; На тест регистров РК и РД
2152$:	RTS	R1		; Возврат в 2144
2154$:	BCC	2170$		; C=0? Да - ошибка
	BVS	2170$		; V=1? Да - ошибка
	BNE	2170$		; Z=0? Да - ошибка
	BPL	2170$		; N=0? Да - ошибка
	CLR	R2		; R2 = 0
	BR	2152$		; Переход на 2152
2170$:	TST	(SP)+		; Убрать из стека адрес возврата
2172$:	CMPB	@#177716,#3	; Установлен технологический режим ?
	BNE	2216$		; Нет
	INC	R5		; Увеличить счетчик ошибок
	CMP	#37,R5		; Количество ошибок превысило 30?
	BLO	2216$		; Да
	JMP	372$		; На начало тестов
2216$:	MOV	#100005,R0	; R0 = ошибка - ошибка процессора
	JMP	440$		; На передачу ошибки в регистр команд
; Тестирование регистра команд и регистра данных
2226$:	CMPB	@#177716,#3	; Установлен технологический режим ?
	BEQ	2242$		; Да
	CALL	2722$		; Очистить РК и РД
2242$:	MOV	#177100,R2	; R2 = адрес регистра команд
	TST	@R2		; Значение РК равно нулю?
	BEQ	2260$		; Да
2252$:	MOV	#100006,R0	; R0 = ошибка - ошибка регистра команд
	BR	2372$
2260$:	MOV	#177737,@R2	; Занести в регистр команд 177737
	CMP	#100200,(R2)+	; Считавается 100200? R2=адрес рег.данных
	BNE	2252$		; Нет - ошибка
	CLR	@R2		; Очистить регистр данных
	TST	@R2		; Регистр данных очищен?
	BEQ	2306$		; Да
2300$:	MOV	#100007,R0	; R0 = ошибка - ошибка регистра данных
	BR	2372$
2306$:	DEC	@R2		; Регистр данных = 177777
	CMP	#177777,@R2	; Значение РД = 177777?
	BNE	2300$		; Нет - ошибка
; Тестирование регистров контроллера накопителя
	MOV	#177130,R2	; R2 = адрес РСН
	MOV	@R2,R1		; R1 = значение РСН
	CMPB	@#177716,#3	; Установлен технологический режим ?
	BNE	2416$		; Нет
	RESET			; СБРОС
	TST	@R2		; Значение РСН равно нулю
	BEQ	2350$		; Да
2342$:	MOV	#100010,R0	; R0 = ошибка - ошибка РСН накопителя
	BR	2372$
2350$:	MOV	#177777,@R2	; Занести в РСН 177777
	CMP	#100007,@R2	; Считывается 100007 из РСН?
	BNE	2342$		; Нет - ошибка
	MOV	R1,(R2)+	; Занести старое значение РСН R2=адрес РДН
	TST	@R2		; Перевести контроллер в режим чтения
	DEC	@R2		; Перевести контроллер в режим записи
	BR	2424$
2372$:	CMPB	@#177716,#3	; Установлен технологический режим ?
	BNE	2412$           ; Нет
	INC	R5		; Увеличить счетчик ошибок
	CMP	#37,R5		; Количество ошибок превысило 30?
	BHIS	2424$		; Нет
2412$:	JMP	202$
2416$:	TST	(R2)+		; R2 = адрес РДН
	TST	@R2		; Перевести контроллер в режим чтения
	BR	2442$
2424$:	COM	@#177130
	BIC	#177774,@#177130
	JMP	372$		; На начало тестов
; Инициализация начальных значений
2442$:	MOV	SP,R3		; R3 = начальный адрес использ.блока ОЗУ
	SUB	#176,R3
	CALL	10352$		; Настройка векторов прерываний
	MOVB	#5,60(R3)	; Сектор ищется за 5 оборотов диска
	MOVB	@#177716,R0	; R0 = значение условий режима работы из РНП
	BEQ	2522$		; Установлен для НГМД-6022 (40 дорожек)
; Начальные значения для НГМД-6121 (80 дорожек)
	MOV	#14140,20(R3)	; Установка времени опускания головки (30 мс)
	MOV	#14140,22(R3)	; Установка времени подъема головки (30 мс)
	MOV	#1274,24(R3)	; Установка времени перехода (3 мс)
	MOVB	#120,54(R3)	; Дорожка, где включается прекорректор (80)
	BR	2552$
; Начальные значения для НГМД-6022 (40 дорожек)
2522$:	MOV	#20200,20(R3)	; Установка времени опускания головки (40 мс)
	MOV	#20200,22(R3)	; Установка времени подъема головки (40 мс)
	MOV	#6060,24(R3)	; Установка времени перехода (15 мс)
	MOVB	#30,54(R3)	; Дорожка, где включается прекорректор (24)
; Дальнейшая инициализация, не зависящая от типа дисководов
2552$:	CLR	2(R3)		; Очистить копию РСН
	CLR	0(R3)		; Очистить регистр состояния и ошибок
	CLRB	64(R3)		; Текущий накопитель - двусторонний
	MOV	#65,R0		; R0 - указатель на область памяти 65-70
	ADD	R3,R0
	MOV	#4,R2
2600$:	CLRB	(R0)+		; Цикл установки двусторонних накопителей
	SOB	R2,2600$
	MOVB	#377,46(R3)	; Номер текущего привода не определен
	MOV	#200,12(R3)	; Размер сектора по умолчанию - 256 байт
2620$:	MTPS	#340		; Запретить прерывания
	MOV	R3,SP		; Восстановить указатель стека
	ADD	#176,SP
	CALL	2722$		; Очистить РК и РД
	MOV	#177130,R4	; R4 = адрес РСН
	BIC	#177700,2(R3)	; Очистить в копии РСН биты DIR,ST,GOR,WM,REZ
	MOV	2(R3),@R4	; Записать в контроллер
	MOV	#47,R0		; R0 = указатель на область 47-52
	ADD	R3,R0
	MOV	#4,R1
2666$:	MOVB	#377,(R0)+	; Номера дорожек не определены
	SOB	R1,2666$
	BIC	#174177,0(R3)	; Очистить все биты РСО, кроме 7-10
	BIS	#4,0(R3)	; Начальная установка завершена
	MOV	#40,R1		; Установить в R1 бит DONE
	MTPS	#0		; Разрешить прерывания
	BR	2750$		; На основной цикл приема команды
; Подпрограмма очистки РК (со стороны КМД и вычислителя) и РД
2722$:	MOV	#177100,R2	; R2 = адрес РК
	CLR	@R2		; Очистить регистр команд
	MOV	#177777,@#177102; Уст. "окно" на диапазон 17740000-17777777
	CLR	@#72140		; Очистить РК со стороны вычислителя
	CLR	@#177102	; Очистить РД
	RETURN
; Основной цикл приема команды
2750$:	MOV	R3,SP		; Восстановить указатель стека
	ADD	#176,SP
	MOV	#177100,R2	; R2 = адрес РК
	MOV	#177130,R4	; R4 = адрес РСН
	CLRB	57(R3)		; Счетчик оборотов диска = 0
	MOV	0(R3),@#177102	; Передать РСО в РД
	MOV	R1,@R2		; Передать R1 в РК
3002$:	MOV	#47040,R0	; R0 - кол-во циклов без индекса
3006$:	BIT	#40,@R2		; Была записана новая команда?
	BEQ	3076$		; Да
	BIT	#20,2(R3)	; Двигатель еще вращается?
	BEQ	3006$		; Нет
	TST	@R4		; Линия ИНДЕКС активна?
	BMI	3040$		; Да
	SOB	R0,3006$
3032$:	CALL	7444$		; Выключить мотор
	BR	3006$		; Продолжить цикл
3040$:	CMPB	#17,57(R3)	; Число оборотов диска превысило 15 (3 сек)?
	BLOS	3032$		; Да - выключить мотор
	INCB	57(R3)		; Увеличить счетчик
	MOV	#764,R0		; R0 = кол-во циклов длины ИНДЕКСА
3060$:	BIT	#40,@R2		; Была записана новая команда?
	BEQ	3076$		; Да
	TST	@R4		; Линия ИНДЕКС активна?
	BPL	3002$		; Нет
	SOB	R0,3060$
	BR	3032$		; На выключение мотора
3076$:	MOV	@R2,R5		; R5 = новое значение РК
	BIT	#40000,R5	; Установлен бит INIT?
	BEQ	3112$		; Нет
3106$:	JMP	2620$		; На инициализацию
; Обработка полученного кода функции
3112$:	BICB	#340,R5		; Оставить биты кода команды и GO
; Обработка кода 12 (перезапуск КМД)
	CMPB	#25,R5		; Запрошен перезапуск (команда 12)?
	BNE	3130$		; Нет
	JMP	@#10000		; Перезапуск КМД
; Обработка кода 11 (чтение регистра состояния и ошибок)
3130$:	CMPB	#23,R5		; Запрошено чтение РСО (команда 11)?
	BNE	3152$		; Нет
3136$:	MOV	0(R3),@#177102	; Передать РСО в РД
	MOV	#40,R1		; Установить в R1 бит DONE
	BR	2750$		; На начало цикла
; Запрос адреса МП в РД
3152$:	MOV	#200,@R2	; Установить бит TR в РК
3156$:	TSTB	@R2		; Слово адреса параметров передано?
	BPL	3172$		; Нет
	BIT	#40000,@R2	; Установлен бит INIT?
	BEQ	3156$		; Нет
	BR	3106$		; На инициализацию
3172$:	MOV	@#177102,R1	; R1 = адрес массива параметров
; Дальнейшая обработка кода функции
	BIC	#174177,0(R3)	; Очистить РСО
	ASRB	R5		; Убрать бит GO, оставить только код команды
	MOVB	R5,45(R3)	; Сохранить код команды
; Начальная обработка кода 7 (SEEK)
	CMPB	#7,R5		; Запрошена команда SEEK?
	BNE	3234$		; Нет
	MOV	R1,R0		; R0 = номер дорожки(15-08), диска (1-0)
	SWAB	R0		; Обмен байтов в R0
	MOVB	R0,53(R3)	; Сохранить номер дорожки
	JMP	3734$		; На дальнейшую обработку
; Начальная обработка кода 6 (форматирование в формате ISO)
3234$:	CMPB	#6,R5		; Запрошено форматирование?
	BNE	3276$		; Нет
	CLR	14(R3)		; Сторона/дорожка = 0
	MOVB	R1,55(R3)	; Сохранить номер диска,сторону,код длины
	SWAB	R1
	MOVB	R1,34(R3)	; Сохранить заполнитель
	SWAB	34(R3)
	MOVB	R1,34(R3)
	SWAB	R1
	JMP	3704$		; На дальнейшую обработку
; Начальная обработка кода 14 (форматирование в формате IBM)
3276$:	CMPB	#14,R5		; Запрошено форматирование в формате IBM?
	BNE	3336$		; Нет
	CLR	14(R3)		; Сторона/дорожка = 0
	MOVB	R1,55(R3)	; Сохранить номер диска,сторону,код длины
	SWAB	R1
	MOVB	R1,34(R3)	; Сохранить заполнитель
	SWAB	34(R3)
	MOVB	R1,34(R3)
	SWAB	R1
	BR	3704$		; На дальнейшую обработку
; Начальная обработка кода 13 (FORMAT & WRITE)
3336$:	CMPB	#13,R5		; Запрошена операция FORMAT & WRITE?
	BNE	3366$		; Нет
	CLR	14(R3)		; Сторона/дорожка = 0
	MOVB	R1,55(R3)	; Сохранить номер диска,код длины
	BIC	#40,2(R3)	; Установить НИЗ в копии РСН
	JMP	4166$		; На дальнейшую обработку
; Начальная обработка кода 15 (пересылка блока памяти)
3366$:	CMPB	#15,R5		; Запрошена операция пересылки блока памяти?
	BNE	3406$		; Нет
	MOV	R5,R0		; R0 = расш. часть адреса блока параметров
	SWAB	R0
	CALL	7550$		; Преобразовать для доступа к "окну"
	BR	3526$		; На чтения массива параметров (4 слова)
; Начальная обработка кода 16 (запуск подпрограммы пользователя)
3406$:	CMPB	#16,R5		; Запрошен запуск п/п пользователя?
	BNE	3420$		; Нет
	JMP	10620$		; На обработку запуска п/п
; Начальная обработка кода 17 (LOAD)
3420$:	CMPB	#17,R5		; Запрошена команда LOAD?
	BNE	3474$		; Нет
	BIC	#177774,R1	; R1 = номер устройства загрузки
	CLRB	53(R3)		; Запрашивается нулевая дорожка
	MOVB	#1,55(R3)	; Запрашивается сектор 1
	MOV	#400,6(R3)	; Надо считать 256 слов (512 байт, 1 блок)
	CLR	4(R3)		; Считать по нулевому адресу
	CLRB	44(R3)
	CLR	14(R3)		; Сторона = НИЗ, дорожка = 0
	CLRB	45(R3)		; Код запроса = 0 (READ)
	BR	3704$		; На обработку
; Чтение массива параметров из ОЗУ вычислителя в ОЗУ КМД
3474$:	CMPB	#10,R5		; Код запроса равен 10 (SET)?
	BLO	3136$		; Больше 10 - на передачу ответа
	BNE	3510$		; Не равен 10
	JMP	6460$		; На обработку запроса SET
3510$:	MOV	R5,R0		; R0 = расш. часть адреса (в R1 основная)
	SWAB	R0
	CALL	7550$		; Преобраз. в формат "окна" (R2-адрес "окна")
	CMPB	#4,R5		; Код функции меньше 4?
	BLOS	3534$		; Да
3526$:	MOV	#4,R1		; Надо прочесть 4 слова МП (коды 0-3)
	BR	3540$
3534$:	MOV	#2,R1		; Надо прочесть 2 слова МП (остальные коды)
3540$:	MOV	#34,R0		; R0 = адрес расположения МП
	ADD	R3,R0
3546$:	TST	R2		; Перешли за границу "окна"?
	BPL	3576$		; Нет
	ROR	R2		; На начало "окна"
	ADD	#401,@#177102	; Увеличить адрес старшей части "окна"
	BNE	3576$		; Еще не перешли границу памяти
	BIS	#4000,0(R3)	; Установить ошибку адреса в РСО
	JMP	7500$		; Завершить операцию с ошибкой
3576$:	MOV	(R2)+,(R0)+	; Переслать очередное слово МП
3600$:	SOB	R1,3546$
; Разбор массива параметров
	CMPB	#15,R5		; Запрошена операция пересылки?
	BNE	3614$		; Нет
	JMP	10416$		; На обработку операции пересылки
3614$:	CMPB	#4,R5		; Код функции меньше 4?
	BLOS	3672$		; Нет
	MOV	-(R0),6(R3)	; Сохранить кол-во слов массива данных
	BNE	3634$		; Не равно нулю
	JMP	7506$		; Завершить операцию успешно
3634$:	MOVB	-(R0),R1	; R1 = номер запрашиваемой дорожки
	MOVB	R1,53(R3)	; Сохранить номер запрашиваемой дорожки
	SWAB	R1		; Преобразовать в формат дорожка/сторона
	CLRB	R1
	MOV	R1,14(R3)	; Сохранить в формате дорожка/сторона
	MOVB	-(R0),55(R3)	; Сохранить номер запрашиваемого сектора
	BNE	3672$		; Не равен нулю
	BIS	#40000,0(R3)	; Установить ошибку массива параметров
	JMP	7500$		; Завершить операцию с ошибкой
3672$:	MOV	-(R0),4(R3)	; Сохранить мл.часть адреса массива данных
	MOVB	-(R0),44(R3)	; Сохранить расш.часть адреса массива данных
	MOVB	-(R0),R1	; R1 = поверхность (2),номер привода(1-0)
3704$:	BIT	#4,R1		; Запрошена верхняя сторона?
	BEQ	3726$		; Нет
	BIS	#40,2(R3)	; Установить верхнюю сторону в копии РСН
	INC	14(R3)		; Установить ВЕРХ в формате дорожка/сторона
	BR	3734$
3726$:	BIC	#40,2(R3)	; Установить нижнюю сторону в копии РСН
; Запуск мотора, смена текущего привода
3734$:	BIC	#177774,R1	; R1 = номер запрашиваемого привода
	BIT	#20,2(R3)	; Мотор еще вращается?
	BEQ	3760$		; Нет
	CMPB	R1,46(R3)	; Номер запраш. и текущего приводов равны?
	BNE	4004$		; Нет
	BR	4166$		; Да - равны
; Запуск мотора
3760$:	BIS	#20,2(R3)	; Установить в копии РСН бит запуска мотора
	MOV	2(R3),@R4	; Передать команду в контроллер
	CLR	R0
3774$:	DEC	R0		; Цикл ожидания раскрутки мотора
	NOP
	NOP
	BNE	3774$
; Смена привода
4004$:	BIC	#17,2(R3)	; Очистить биты привода в копии РСН
	BIC	#1400,0(R3)	; Очистить биты привода в РСО
	MOV	R1,R0		; R1 = адрес признака односторон. привода
	ADD	#65,R0
	ADD	R3,R0
	MOVB	@R0,64(R3)	; Сохранить признак
	BEQ	4050$		; Двусторонний
	BIC	#40,2(R3)	; Установить НИЗ в копии РСН
	CLRB	14(R3)		; Установить НИЗ в формате дорожка/сторона
4050$:	BISB	10726$(R1),2(R3); Установить биты выбора привода в копии РСН
	MOV	2(R3),@R4	; Дать команду контроллеру
	MOVB	R1,46(R3)	; Сохранить запрошенный номер привода
	MOV	R1,R0		; R0 = адрес текущ.дорожки для выбр. привода
	ADD	#47,R0
	ADD	R3,R0
	MOV	R0,10(R3)	; Сохранить адрес текущей дорожки
	SWAB	R1
	BIS	R1,0(R3)	; Установить биты выбора привода в РСО
; Проверка присутствия дискеты
	TST	@R4		; Линия ИНДЕКС активна?
	BPL	4132$		; Нет
	MOV	#1750,R0	; R0 - длина линии ИНДЕКС в цикле
4120$:	TST	@R4		; Линия ИНДЕКС активна?
	BPL	4146$		; Нет
	SOB	R0,4120$
4126$:	JMP	7474$		; Дискета не обнаружена (выкл.мотор и ошибка)
4132$:	MOV	#51010,R0	; R0 - длина дорожки вне ИНДЕКСА
4136$:	TST	@R4		; Линия ИНДЕКС активна?
	BMI	4146$		; Да
	SOB	R0,4136$
	BR	4126$		; Дискета не обнаружена (выкл.мотор и ошибка)
4146$:	BIS	#200,0(R3)	; Устан. признак присутствия дискеты в РСО
	MOV	20(R3),R0	; R0 = время опускания головки
4160$:	SOB	R0,4160$	; Ожидание опускания головки
	MOV	2(R3),@R4	; Передать в контроллер копию РСН
; Вызов обработчиков запрошенных функций
4166$:	CLR	30(R3)		; Установить признак чтения информации
	CLRB	61(R3)		; Чтение без метки
	MOV	R4,R5		; R5 = адрес РДН
	TST	(R5)+
	MOVB	45(R3),R0	; Переход на обработку запрошенной функции
	ASL	R0
	JMP	@4214(R0)
; Адреса программ обработки функций
; RD (чтение), WR (запись), RDM (чтение с меткой), WRM (запись с меткой)
; RDTR (чтение дорожки), RDID (чтение заголовка), FORMAT (форматирование
; в стандарте ISO), выбор дорожки (SEEK), FORMAT&WRITE, FORMAT_IBM
; (форматирование в стандарте IBM)
4214$:	.WORD	4320$,4266$,4246$,4256$,4324$,6274$
	.WORD	5326$,10014$,0,0,0,10756$,11416$
; Чтение с меткой
4246$:	MOVB	#1,61(R3)	; Установить признак чтения с меткой
	BR	4320$		; На чтение сектора
; Запись с меткой
4256$:	MOV	#174241,16(R3)	; Будет записываться метка 0xF8A1
	BR	4274$		; На запись сектора
; Запись без метки
4266$:	MOV	#175641,16(R3)	; Будет записываться  0xFBA1
4274$:	BIT	#4,@R4		; Дискета защищена от записи?
	BEQ	4314$		; Нет
	BIS	#1,0(R3)	; Устан. признак ошибки - дискета защищена
	JMP	7500$		; Завершить операцию с ошибкой
4314$:	INC	30(R3)		; Установить признак записи
; Чтение без метки
; Позиционирование на нужную дорожку и определение длины сектора
4320$:	CALL	10040$		; Позиционирование на нужную дорожку
; Вход для чтения дорожки
4324$:	MOVB	44(R3),R0	; R0 = расш.часть адреса данных
	MOV	4(R3),R1	; R1 = младшая часть адреса данных
	CALL	7550$		; Преобраз. в формат "окна" (R2-адрес "окна")
	CALL	5756$		; Выбор прекорректора
	CALL	6336$		; Поиск первого попавшегося заголовка сектора
	BIC	#177774,R1	; R1 = код размера сектора
	BNE	4370$		; Он не равен нулю
	BIS	#40000,0(R3)	; Установить ошибку массива параметров
	JMP	7500$		; Завершить операцию с ошибкой
4370$:	MOVB	10742$(R1),56(R3); Номер последнего сектора на дорожке
	ASL	R1
	MOV	10732$(R1),12(R3); Размер сектора в словах
	CMPB	#4,45(R3)	; Запрошено чтение дорожки (код 4)?
	BNE	4422$		; Нет
	JMP	6062$		; Переход для чтения дорожки
4422$:	TST	R2		; Перешли за границу "окна"?
	BPL	4452$		; Нет
	ROR	R2		; На начало "окна"
	ADD	#401,@#177102	; Увеличить адрес старшей части "окна" 
	BNE	4452$		; Еще не перешли границу памяти        
	BIS	#4000,0(R3)	; Установить ошибку адреса в РСО       
	JMP	7500$		; Завершить операцию с ошибкой
; Поиск заголовка нужного сектора
4452$:	MOVB	60(R3),57(R3)	; Установить счетчик оборотов для поиска
	CMP	6(R3),12(R3)	; Объем данных меньше размера сектора
	BLO	4476$		; Да
	CLR	26(R3)		; Размер хвоста = 0
	BR	4512$
4476$:	MOV	12(R3),26(R3)	; Размер_хвоста=размер_сектора-объем_данных
	SUB	6(R3),26(R3)
4512$:	BIS	#40,0(R3)	; Устан. заранее признак "сектор не найден"
	CALL	6634$		; Поиск маркера заголовка сектора
4524$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	4524$		; Нет
	CMP	14(R3),@R5	; Счит.из загол.дор./ст. равна запрошенной
	BEQ	4612$		; Да
4536$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	4536$		; Нет
	MOV	@R5,R1		; R1 = номер сектора/длина сектора
	CALL	7340$		; Проверить CRC
	BEQ	4574$		; CRC неправильная (может и не заголовок)
	BIC	#2,0(R3)	; Ошибка CRC в заголовке
	MOVB	#377,@10(R3)	; Поставить неопределенный номер дорожки
	CALL	10040$		; Позиционирование на нужную дорожку
	BR	4512$		; На поиск сектора
4574$:	MOV	12(R3),R0	; R0 = длина сектора
	ADD	#27,R0		; Прибавить GAP2,синхрозону,маркер,CRC
	CALL	7364$		; Пропустить информацию на диске
	BR	4512$		; На поиск сектора
4612$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	4612$		; Нет
	MOV	@R5,R1		; R1 = номер сектора/длина сектора
	SWAB	R1
	CMPB	55(R3),R1	; Сравнить номер сектора с запрашиваемым
	BNE	4574$		; Не равны, на пропуск информации
	BIC	#40,0(R3)	; Сектор найден, сброс признака ошибки
	MOV	12(R3),R1	; R1 = размер сектора
	SUB	26(R3),R1	; Выч.длину хвоста,итого число слов для обмена
	CALL	7340$		; Проверить CRC
	BNE	4666$		; Все в порядке
	BIS	#2,0(R3)	; Ошибка CRC в заголовке
4662$:	JMP	7500$		; Завершить операцию с ошибкой
; Сектор найден - далее операция чтения/записи
4666$:	TST	30(R3)		; Установлен признак записи
	BNE	5164$		; Да
; Операции чтения
	CALL	7164$		; Поиск синхрозоны перед данными
	TST	32(R3)		; Поиск прошел успешно?
	BEQ	4724$		; Нет
	CALL	7220$		; Запустить команду поиска маркера
	MOV	#144,R0		; R0 = время ожидания маркера
4716$:	TSTB	@R4		; Маркер найден?
	BMI	4734$		; Да
	SOB	R0,4716$
4724$:	BIS	#20000,0(R3)	; Не обнаружен маркер данных
	BR	4662$		; Завершить операцию с ошибкой
4734$:	TST	@R5		; Сбросить готовность контроллера
4736$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	4736$		; Нет
	MOV	@R5,R0		; R0 = тип данных
	CMP	#120773,R0	; Тип данных равен 0xA1FB (нормальные)?
	BNE	4762$		; Нет
	TSTB	61(R3)		; Стоит признак чтения с меткой?
	BEQ	4770$		; Нет - на чтение
	BR	5034$		; На следующий сектор
4762$:	CMP	#120770,R0	; Тип данных равен 0xA1F8 (метка) ?
	BNE	4724$		; Нет - ошибка
4770$:	MOV	R0,16(R3)	; Сохранить прочитанный маркер
	CALL	7254$		; Прочесть сектор
	CALL	7340$		; Проверить CRC
	BNE	5020$		; CRC в порядке
	BIS	#1,0(R3)	; Установить ошибку CRC в зоне данных
	JMP	7500$		; Завершить операцию с ошибкой
; Переход к следующему сектору для операций чтения/записи
5020$:	SUB	12(R3),6(R3)	; Вычесть длину сектора из длины данных
	BHI	5034$		; Еще осталась информация для обмена
	JMP	7506$		; Завершить операцию успешно
5034$:	INCB	55(R3)		; Увеличить номер запрашиваемого сектора
	CMPB	55(R3),56(R3)	; Он превысил максимальный номер?
	BLOS	5160$		; Нет
	TSTB	64(R3)		; Привод установлен как односторонний?
	BNE	5074$		; Да
	BIT	#40,2(R3)	; Текущая сторона ВЕРХ?
	BNE	5074$		; Да
	INC	14(R3)		; Установить ВЕРХ в формате дорожка/сторона
	BR	5130$
5074$:	INCB	53(R3)		; Увеличить номер запрашиваемой дорожки
	MOV	#320,R0
5104$:	SOB	R0,5104$	; Небольшая пауза
	CALL	10040$		; Перейти на следующую дорожку
	MOVB	53(R3),14(R3)	; Установить дорожку в формате дорожка/сторона
	SWAB	14(R3)
	CLRB	14(R3)		; Установить НИЗ в формате дорожка/сторона
5130$:	MOVB	#1,55(R3)	; Номер запрашиваемого сектора - 1
	TSTB	64(R3)		; Привод установлен как односторонний?
	BNE	5154$		; Да
	MOV	#40,R0
	XOR	R0,2(R3)	; Поменять сторону в копии РСН
5154$:	CALL	5756$		; Выбор прекорректора
5160$:	JMP	4422$		; На поиск следующего сектора
; Операции записи
5164$:	MOV	#13,R0		; R0 = размер GAP2
	MTPS	#340		; Запретить прерывания
	CALL	7614$		; Запись GAP2, синнхрозоны и маркера данных
5200$:	TSTB	@R4		; Контроллер готов для приема?
	BPL	5200$		; Нет
	MOV	(R2)+,@R5	; Передать первое слово данных в секторе
	MOV	2(R3),@R4	; Сбросить бит записи маркера
	DEC	R1		; Уменьшить число записываемых слов
	BEQ	5260$		; Все записано
5216$:	TST	R2		; Перешли за границу "окна"?
	BPL	5250$		; Нет
	ROR	R2		; На начало "окна"
	ADD	#401,@#177102	; Увеличить адрес старшей части "окна"
	BNE	5250$		; Еще не перешли границу памяти
	TST	@R5		; Перевести контроллер в режим чтения
	BIS	#4000,0(R3)	; Установить ошибку адреса в РСО
	JMP	7500$		; Завершить операцию с ошибкой
5250$:	TSTB	@R4		; Контроллер готов для приема?
	BPL	5250$		; Нет
	MOV	(R2)+,@R5	; Передать очередное слово данных
5256$:	SOB	R1,5216$
5260$:	MOV	26(R3),R1	; R1 = размер хвоста
	BEQ	5300$		; Его нет
5266$:	TSTB	@R4		; Контроллер готов для приема?
	BPL	5266$		; Нет
	MOV	#0,@R5		; Записать ноль в конце сектора (хвост)
	SOB	R1,5266$
5300$:	BIT	#40000,@R4	; CRC начала записываться?
	BEQ	5300$		; Нет
	MOV	#47116,@R5	; Перед.в контрол.слово для записи после CRC
5312$:	TSTB	@R4		; Контроллер готов для приема?
	BPL	5312$		; Нет
	TST	@R5		; Перевести контроллер в режим чтения
	MTPS	#0		; Разрешить прерывания
	BR	5020$		; На поиск следующего сектора
; Форматирование дорожки
5326$:	BIT	#4,@R4		; Дискета защищена от записи?
	BEQ	5346$		; Нет
	BIS	#1,0(R3)	; Установить ошибку - дискета защищена
5342$:	JMP	7500$		; Завершить операцию с ошибкой
5346$:	CALL	5756$		; Включить прекорректор
	SWAB	14(R3)
	MOVB	@10(R3),14(R3)	; Занести номер тек.дор. в дорожку/сторону
	BPL	5376$		; Номер определенный
	BIS	#20,0(R3)	; Установить ошибку поиска дорожки
	BR	5342$		; Завершить операцию с ошибкой
5376$:	MOVB	55(R3),R2	; R2 = длина сектора,сторона,номер диска
	ASR	R2		; Выделить длину сектора
	ASR	R2
	ASR	R2
	BIC	#177774,R2
	BNE	5426$		; Длина не равна нулю
	BIS	#40000,0(R3)	; Установить ошибку в массиве параметров
	BR	5342$		; Завершить операцию с ошибкой
5426$:	MOVB	10742$(R2),56(R3); Сохранить номер последнего сектора на дор.
	MOVB	10746$(R2),62(R3); Сохранить длину GAP3
	MOVB	10752$(R2),63(R3); Сохранить длину GAP4
	MOV	R2,R1
	ASL	R1
	MOV	10732$(R1),R1	; R1 = число слов в секторе
	SWAB	R2
	INC	R2		; R2 = длина сектора/номер сектора
	MOV	#1750,R0	; R0 = длина цикла при ожидании ИНДЕКСА
5470$:	TST	@R4		; Линия ИНДЕКС активна?
	BPL	5504$		; Нет
	SOB	R0,5470$	; Ожидать исчезновения сигнала ИНДЕКС
5476$:	TST	@R5		; Перевести контроллер в режим чтения
	JMP	7474$		; Выключить мотор и завершить с ошибкой
5504$:	MOV	#6200,R0	; R0 = длина дорожки с запасом (6400 байт)
	MOV	#47116,@R5	; Заполнить дорожку байтами 0x4E
5514$:	TST	@R4		; Линия ИНДЕКС активна?
	BMI	5534$		; Да
5520$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5520$		; Нет
	MOV	#47116,@R5	; Заполнить дорожку байтами 0x4E
	SOB	R0,5514$
	BR	5476$		; Ошибка - не появился ИНДЕКС
5534$:	MOV	#20,R0		; R0 = размер GAP1
	MOV	#177241,16(R3)	; Будет записываться маркер заголовка 0xFEA1
	MTPS	#340		; Запретить прерывания
5552$:	CALL	7614$		; Запись GAP, синхрозоны и маркера заголовка
5556$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5556$		; Нет
	MOV	14(R3),@R5	; Записать дорожку/сторону в заголовок
	MOV	2(R3),@R4	; Выключить запись маркера
5572$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5572$		; Нет
	MOV	R2,@R5		; Записать код длины/номер сектора в заголовок
	MOV	#13,R0		; R0 = длина GAP2
	MOV	#175641,16(R3)	; Будет записываться маркер данных 0xFBA1
5612$:	BIT	#40000,@R4	; CRC заголовка записана?
	BEQ	5612$		; Нет
	CALL	7614$		; Запись GAP2, синхрозоны и маркера данных
	MOV	R1,R0		; R0 = размер сектора в словах
5626$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5626$		; Нет
	MOV	34(R3),@R5	; Записать первое слово заполнителя
	MOV	2(R3),@R4	; Выключить запись маркера
	DEC	R0		; Уменьшить число записываемых слов
5644$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5644$		; Нет
	MOV	34(R3),@R5	; Записать заполнитель в цикле
	SOB	R0,5644$
	INC	R2		; Увеличить номер сектора
	MOVB	62(R3),R0	; R0 = размер GAP3 в словах
	MOV	#177241,16(R3)	; Далее записывается маркер заголовка 0xFEA1
5672$:	BIT	#40000,@R4	; CRC зоны данных записана?
	BEQ	5672$		; Нет
	DECB	56(R3)		; Уменьшить счетчик записываемых секторов
	BNE	5552$		; Еще не все - продолжим
5706$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5706$		; Нет
	MOV	#47116,@R5	; Записать 0x4E4E
	TST	@R4		; Линия ИНДЕКС активна?
	BPL	5706$		; Нет
	MOV	#5,R0		; После начала ИНДЕКСА записать 5 слов 0x4E4E
5726$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	5726$		; Нет
	MOV	#47116,@R5	; Записать 0x4E4E
	SOB	R0,5726$
	TST	@R5		; Перевести контроллер в режим чтения
	MTPS	#0		; Разрешить прерывания
	SWAB	16(R3)
	JMP	7506$		; Завершить операцию успешно
; Подпрограмма включения прекорректора и выбора стороны в РСО
5756$:	CMPB	54(R3),@10(R3)	; Необходимо включить прекорректор?
	BHI	5776$		; Нет
	BIS	#2000,2(R3)	; Включить схему прекоррекции в копии РСН
	BR	6004$
5776$:	BIC	#2000,2(R3)	; Выключить схему прекоррекции в копии РСН
6004$:	MOV	2(R3),@R4	; Дать команду контроллеру
	BIT	#2000,0(R3)	; В РСО выбран ВЕРХ?
	BEQ	6050$		; Нет
	BIT	#40,2(R3)	; В копии РСН выбран ВЕРХ?
	BNE	6060$		; Да
6030$:	MOV	#310,R0		; Небольшая задержка
6034$:	SOB	R0,6034$
	MOV	#2000,R0	; Сменить сторону в РСО
	XOR	R0,0(R3)
	BR	6060$
6050$:	BIT	#40,2(R3)	; В копии РСН выбран ВЕРХ?
	BNE	6030$		; Да
6060$:	RETURN
; Чтение дорожки
6062$:	CLR	26(R3)		; Размер хвоста = 0
	MOV	#1750,R0	; R0 = длина ИНДЕКСА в цикле
6072$:	TST	@R4		; Линия ИНДЕКС активна?
	BPL	6110$		; Нет
	SOB	R0,6072$
6100$:	JMP	7474$		; Дискета не обнаружена (выкл.мотор и ошибка)
6104$:	JMP	7500$		; Завершить операцию с ошибкой
6110$:	MOV	#51010,R0	; R0 = длина дорожки в цикле
6114$:	TST	@R4		; Линия ИНДЕКС активна?
	BMI	6124$		; Да
	SOB	R0,6114$
	BR	6100$		; Дискета не обнаружена (выкл.мотор и ошибка)
6124$:	CALL	7132$		; Поиск маркера
	BMI	6142$		; Маркер найден
6132$:	BIS	#10000,0(R3)	; Ошибка - не обнаружен маркер заголовка
	BR	6104$		; Завершить операцию с ошибкой
6142$:	TST	@R5		; Пропустить 0xA1A1
6144$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	6144$		; Нет
	CMP	#120776,@R5	; Это маркер заголовка сектора (0xA1FE)?
	BNE	6132$		; Нет - ошибка
	CALL	6406$		; Прочесть заголовок в R0 и R1
	CALL	7340$		; Проверить CRC
	BNE	6176$		; В норме
	BIS	#2,0(R3)	; Ошибка CRC заголовка
6176$:	MOV	12(R3),R1	; R1 = размер сектора в словах
	CALL	7132$		; Поиск маркера
	BMI	6220$		; Маркер найден
	BIS	#20000,0(R3)	; Ошибка - не найден маркер данных
	BR	6104$		; Завершить операцию с ошибкой
6220$:	TST	@R5		; Пропустить 0xA1A1
6222$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	6222$		; Нет
	MOV	@R5,16(R3)	; Сохранить маркер
	CALL	7254$		; Прочесть сектор
	CALL	7340$		; Проверить CRC считанных данных
	BNE	6252$		; В порядке
	BIS	#1,0(R3)	; Ошибка CRC зоны данных
6252$:	DECB	56(R3)		; Уменьшить кол-во оставшихся секторов
	BNE	6124$		; На поиск очередного сектора
	BIT	#3,0(R3)	; Были ошибки CRC заголовка и данных?
	BNE	6104$		; Да - завершить с ошибкой
	JMP	7506$		; Завершить операцию успешно
; Поиск заголовка сектора
6274$:	CALL	6004$		; Установить сторону в РСО
	MOVB	44(R3),R0	; R0 = расш.часть адреса данных
	MOV	4(R3),R1        ; R1 = младшая часть адреса данных
	CALL	7550$           ; Преобраз. в формат "окна" (R2-адрес "окна")
	CALL	6336$		; Поиск первого заголовка сектора и его чтение
	CALL	6424$		; Передать сторону/дорожку в ОЗУ вычислителя
	MOV	R1,R0		; R0 = номер сектора/код длины
	CALL	6424$		; Передать номер/код в ОЗУ вычислителя
	JMP	7506$		; Завершить операцию успешно
; П/п поиска первого попавшегося заголовка и его чтение в R0 и R1
6336$:	MOVB	60(R3),57(R3)	; Количество оборотов для поиска
	BIS	#10000,0(R3)	; Заранее ошибка - маркер заголовка не найден
6352$:	CALL	6634$		; Поиск маркера заголовка
	CALL	6406$		; Чтение заголовка в R0 и R1
	BIS	#2,0(R3)	; Заранее ошибка CRC заголовка
	CALL	7340$		; Проверить CRC заголовка
	BEQ	6352$		; Неверная CRC - ищем дальше
	BIC	#2,0(R3)	; Сбросить ошибку CRC в РСО
	RETURN
; П/п чтения заголовка в R0 и R1. В R0 номер дорожки (ст.байт) и номер стороны.
; В R1 - номер сектора и код длины сектора.
6406$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	6406$		; Нет
	MOV	@R5,R0		; R0 = номер дорожки/номер стороны
6414$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	6414$		; Нет
	MOV	@R5,R1		; R1 = номер сектора/код длины
	RETURN
; П/п передачи слова в ОЗУ вычислителя. Передаваемое слово в R0.
; Адрес для передачи в ячейке 177102 и R2.
6424$:	TST	R2		; Перешли за границу "окна"?          
	BPL	6454$		; Нет
	ROR	R2		; На начало "окна"
	ADD	#401,@#177102	; Увеличить адрес старшей части "окна"
	BNE	6454$		; Еще не перешли границу памяти
	BIS	#4000,0(R3)	; Установить ошибку адреса в РСО
	JMP	7500$		; Завершить операцию с ошибкой
6454$:	MOV	R0,(R2)+	; Передать слово в ОЗУ вычислителя
6456$:	RETURN
; Обработка функции установки параметров SET
6460$:	MOVB	R1,R0		; R0 = значение параметра
	SWAB	R1
	MOV	R1,R2
	BIC	#177770,R1	; R1 = номер параметра
	CMP	#4,R1		; Номер равен 4 (односторонний привод)?
	BNE	6524$		; Нет
	ASR	R2
	ASR	R2
	ASR	R2
	BIC	#177774,R2	; R2 = номер привода
	ADD	#65,R2
	ADD	R3,R2		; R2 = адрес признака
	MOVB	R0,@R2		; Установить значение
	BR	6624$		; Завершить операцию
6524$:	CMP	#3,R1		; Номер равен 3 (дорожка вкл. прекоррекции)?
	BNE	6540$		; Нет
	MOVB	R0,54(R3)	; Установить параметр
	BR	6624$		; Завершить операцию
6540$:	BMI	6550$		; Номер больше 4 - ошибка
	BIC	#177740,R0	; В значении использ. только 5 бит
	BNE	6564$		; Не равно нулю
6550$:	BIS	#40000,0(R3)	; Ошибка массива параметров
	MOV	#100040,R1	; Установить биты ERR и DONE
	BR	6630$		; Завершить операцию
6564$:	CLR	R2		; Цикл преобразования из мс в циклы SOB
6566$:	ADD	#1160,R2	; 3 мс примерно 624 цикла SOB
	SOB	R0,6566$
	ASR	R1		; Номер равен 1?
	BCC	6606$		; Нет
	MOV	R2,20(R3)	; Установить время опускания головки
	BR	6624$
6606$:	ASR	R1		; Номер равен 2?
	BCC	6620$		; Нет
	MOV	R2,22(R3)	; Установить время подъема головки
	BR	6624$
6620$:	MOV	R2,24(R3)	; Установить время шага
6624$:	MOV	#40,R1		; Установить бит DONE
6630$:	JMP	2750$		; На цикл приема очередной команды
; Подпрограмма поиска маркера заголовка сектора
6634$:	MOV	#12,R0		; Небольшая пауза и перевод контроллера
6640$:	TST	@R5		; в режим чтения
	SOB	R0,6640$
; Пропуск нулей и 177777 при неактивном ИНДЕКСЕ
6644$:	MOV	#51010,R1	; R1 = длина дорожки в цикле
6650$:	TST	@R4		; Линия ИНДЕКС активна?
	BMI	6730$		; Да
	MOV	@R5,R0		; Считанное слово равно нулю?
	BEQ	6664$		; Да
	INC	R0		; Считанное слово равно 177777?
	BNE	6710$		; Нет
6664$:	SOB	R1,6650$	; Цикл по пропуску нулей
6666$:	BIC	#10000,0(R3)	; Сброс ошибки необнаружения маркера заголовка
	JMP	7474$		; Дискета не обнаружена (выкл.мотор и ошибка)
6700$:	JMP	7500$		; Завершить операцию с ошибкой
; Пропуск не нулей при неактивном ИНДЕКСЕ
6704$:	MOV	#51010,R1	; R1 = длина дорожки в цикле
6710$:	TST	@R4		; Линия ИНДЕКС активна?
	BMI	6762$		; Да
	MOV	@R5,R0		; Считанное слово равно нулю?
	BEQ	7014$		; Да
	INC	R0		; Считанное слово равно 177777?
	BEQ	7014$		; Да
	SOB	R1,6710$	; Цикл по пропуску не нулей
	BR	6666$		; Нет дискеты - ошибка
; Пропуск нулей и 177777 при активном ИНДЕКСЕ
6730$:	DECB	57(R3)		; Уменьшить счетчик оставшихся оборотов
	BEQ	6700$		; Маркер не найден за 5 оборотов
	MOV	#1750,R1	; R1 = длина ИНДЕКСА в цикле
6742$:	TST	@R4		; Линия ИНДЕКС активна?
	BPL	6644$		; Нет
	MOV	@R5,R0		; Считанное слово равно нулю?
	BEQ	6756$		; Да
	INC	R0		; Считанное слово равно 177777?
	BNE	6774$		; Нет
6756$:	SOB	R1,6742$	; Цикл по пропуску нулей
	BR	6666$		; Нет дискеты - ошибка
; Пропуск не нулей при активном ИНДЕКСЕ
6762$:	MOV	#1750,R1	; R1 = длина ИНДЕКСА в цикле
	DECB	57(R3)		; Уменьшить счетчик оставшихся оборотов
	BEQ	6700$		; Маркер не найден за 5 оборотов
6774$:	TST	@R4		; Линия ИНДЕКС активна?
	BPL	6704$		; Нет
	MOV	@R5,R0		; Считанное слово равно нулю?
	BEQ	7014$		; Да
	INC	R0		; Считанное слово равно 177777?
	BEQ	7014$		; Да
	SOB	R1,6774$	; Цикл по пропуску не нулей
	BR	6666$		; Нет дискеты - ошибка
; Удостоверение в том, что попали на синхрозону
7014$:	MOV	#3,32(R3)	; Счетчик для удостоверения
7022$:	MOV	@R5,R0		; Считанное слово равно нулю?
	BEQ	7032$		; Да
	INC	R0		; Считанное слово равно 177777?
	BNE	7066$		; Нет - не синхрозона
7032$:	DEC	32(R3)		; Уменьшить счетчик
	BNE	7022$		; Продолжаем дальше
; Поиск и ожидание маркера
	CALL	7220$		; Дать команду на поиск маркера
	MOV	#24,R0		; R0 = счетчик ожидания маркера
	TST	@R4		; Линия ИНДЕКС активна?
	BPL	7060$		; Нет
	MOV	#764,R0		; R0 = счетчик ожидания для первого сектора
7060$:	TSTB	@R4		; Маркер найден?
	BMI	7074$		; Да
	SOB	R0,7060$	; Цикл ожидания маркера
; Маркер не найден - на поиск нулей
7066$:	TST	@R4		; Линия индекс активна?
	BPL	6664$		; На пропуск нулей при неактивном ИНДЕКСЕ
	BR	6756$		; На пропуск нулей при активном ИНДЕКСЕ
; Определение типа найденного маркера
7074$:	TST	@R5		; Пропустить 0xA1A1
7076$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	7076$		; Нет
	CMP	#120776,@R5	; Это маркер заголовка (0xA1FE)?
	BEQ	7122$		; Да
	MOV	12(R3),R0	; R0 = длина сектора в словах
	CALL	7364$		; Пропуск зоны данных
	BR	6634$		; Продолжить поиск сначала
7122$:	BIC	#10000,0(R3)	; Сброс ошибки - маркер заголовка найден
	RETURN
; Поиск маркера из промежутка GAP (контроллер в режиме формирования данных)
7132$:	CALL	7164$		; Пропуск GAP (ожидание синхрозоны)
	TST	32(R3)		; Синхрозона найдена?
	BEQ	7162$		; Нет
	CALL	7220$		; Дать команду на поиск маркера
	MOV	#1010,R0	; Счетчик ожидания маркера
7154$:	TSTB	@R4		; Маркер найден
	BMI	7162$		; Да (установлен бит N)
	SOB	R0,7154$	; Цикл ожидания маркера
7162$:	RETURN
; Подпрограмма пропуска промежутка до синхрозоны
7164$:	TST	@R5		; Перевести контроллер в режим чтения
	MOV	#106,32(R3)	; Предполагаемый максимальный размер GAP
7174$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	7174$		; Нет
	MOV	@R5,R0		; Прочитанное слово равно нулю?
	BEQ	7216$		; Да - вышли на синхрозону
	INC	R0		; Прочитанное слово равно 177777?
	BEQ	7216$		; Да - вышли на синхрозону
	DEC	32(R3)		; Уменьшить счетчик
	BNE	7174$
7216$:	RETURN
; Подпрограмма подачи команды контроллеру на поиск маркера
7220$:	BIS	#400,2(R3)	; Установить в копии РСН бит GOR
	MOV	2(R3),@R4	; Дать команду контроллеру
	BIC	#400,2(R3)	; Снять в копии РСН бит GOR
	MOV	#10,R0		; Небольшая пауза
7244$:	SOB	R0,7244$
	MOV	2(R3),@R4	; Дать команду контроллеру
	RETURN
; Подпрограмма чтения сектора
7254$:	TST	R2		; Перешли за границу "окна"?
	BPL	7304$		; Нет
	ROR	R2		; На начало "окна"
	ADD	#401,@#177102	; Увеличить адрес старшей части "окна"
	BNE	7304$		; Еще не перешли границу памяти
	BIS	#4000,0(R3)	; Установить ошибку адреса в РСО
	JMP	7500$		; Завершить операцию с ошибкой
7304$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	7304$		; Нет
	MOV	@R5,R0		; Прочесть слово
	SWAB	R0		; Обменять байты
	MOV	R0,(R2)+	; Передать слово в ОЗУ вычислителя
7316$:	SOB	R1,7254$
	MOV	26(R3),R1	; R1 = размер хвоста
	BEQ	7336$		; Равен нулю
7326$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	7326$		; Нет
	TST	@R5		; Пропустить слово
	SOB	R1,7326$
7336$:	RETURN
; Подпрограмма проверки CRC
7340$:	MOV	#17,32(R3)	; Установить счетчик ожидания
7346$:	BIT	#40000,@R4	; CRC корректна?
	BNE	7362$		; Да
	DEC	32(R3)		; Уменьшить счетчик
	BNE	7346$		; Не равен нулю - ждем
7362$:	RETURN
; П/п пропуска заданного кол-ва слов (контроллер в режиме формир. данных)
7364$:  TST	@R4		; Активна линия ИНДЕКС?
	BMI	7426$		; Да
7370$:	TST	@R4		; Активна линия ИНДЕКС?
	BMI	7406$		; Да
7374$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	7370$		; Нет
	TST	@R5		; Пропустить слово
	SOB	R0,7370$	; Цикл по пропуску
	BR	7442$		; Завершить
7406$:  DECB	57(R3)		; Уменьшить счетчик оборотов диска
	BNE	7432$		; Не равен нулю - продолжаем
	BIS	#40,0(R3)	; Ошибка - сектор не найден
	JMP	7500$		; Завершить операцию с ошибкой
7426$:	TST	@R4		; Активна линия ИНДЕКС?
	BPL	7374$		; Нет
7432$:	TSTB	@R4		; Очередное слово сформировано?
	BPL	7426$		; Нет
	TST	@R5		; Пропустить слово
	SOB	R0,7426$	; Цикл по пропуску
7442$:	RETURN
; Подпрограмма выключения мотора
7444$:	BIC	#37,2(R3)	; Сброс.в копии РСН биты выбора прив.и мотора
	MOV	2(R3),@R4	; Выключить мотор
	BIC	#200,0(R3)	; Дискета не вращается
	MOV	22(R3),R0	; R0 = время подъема головки
7470$:	SOB	R0,7470$	; Ожидание подъема головки
	RETURN
; Точка входа при завершении с ошибкой и выключении мотора
7474$:	CALL	7444$		; Выключить мотор
; Точка входа при завершении с ошибкой
7500$:	MOV	#100000,R1	; Установить в R1 бит ERR
	BR	7510$
; Точка входа при успешном завершении операции
7506$:	CLR	R1		; Нет ошибок
7510$:	TST	30(R3)		; Была операция чтения?
	BEQ	7522$		; Да
	SWAB	16(R3)		; Обменять байты прочитанного маркера
7522$:	CMP	#120770,16(R3)	; Был прочитан/записан маркер метки (0xA1F8)?
	BNE	7540$		; Нет
	BIS	#100,0(R3)	; Был прочитан/записан сектор с меткой
7540$:	BIS	#40,R1		; Установить в R1 бит DONE
	JMP	2750$		; На передачу результата и прием след. команды
; Подпрограмма преобразования 22-разрядного адреса в формат "окна".
; Младшие 14 битов содержаться в регистре R2, старшие 8 - в РД 177102 и R1
; При входе в R1 - младшие 16 бит, в R0 - старшие 6 бит
7550$:	MOV	R1,R2		; R2 = младшие 16 бит
	BIC	#140000,R2	; Оставить 14 бит
	BIS	#40000,R2	; Установить бит 14 - адрес начала "окна"
	ASL	R0		; Получить в R0 старшие 8 бит
	ASL	R1
	ADC	R0
	ASL	R0
	ASL	R1
	ADC	R0
	MOVB	R0,R1		; Перед.ст.8 бит в младший и старший байты R1
	SWAB	R1
	CLRB	R1
	BISB	R0,R1
	MOV	R1,@#177102	; Записать адрес старшей части "окна"
	RETURN
; П/п записи промежутка, синхрозоны и маркера. В R0 - длина промежутка.
7614$:	MOV	#47116,@R5	; Записать слово промежутка (0x4E4E)
7620$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	7620$		; Нет
	MOV	#47116,@R5	; Запись промежутка словом 0x4E4E
	SOB	R0,7620$	; Цикл записи промежутка
	MOV	#6,R0		; R0 - размер синхрозоны
7636$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	7636$		; Нет
	MOV	#0,@R5		; Запись синхрозоны
	SOB	R0,7636$	; Цикл записи синхрозоны
	BIS	#1000,2(R3)	; Установить в копии РСН бит записи маркера
7656$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	7656$		; Нет
	MOV	#120641,@R5	; Записать 0xA1A1
	MOV	2(R3),@R4	; Передать команду контроллеру
	BIC	#1000,2(R3)	; Сбросить в копии РСН бит записи маркера
7700$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	7700$		; Нет
	MOV	16(R3),@R5	; Записать маркер
	RETURN

	.=10000

; Точка начального пуска
10000$:	MTPS	#340		; Запретить прерывания
	MOV	#20400,@#177760	; Настройка 537РУ11 на адрес 20000
	CLR	PC		; Переход на адрес 0
; Исполнение функции SEEK
10014$:	TSTB	53(R3)		; Запрошено позиционир. на нулевую дорожку
	BNE	10030$		; Нет
	CALL	10256$		; Позиционирование на нулевую дорожку
	BR	10034$
10030$:	CALL	10040$		; Позиционирование на запрошенную дорожку
10034$:	JMP	7506$
; Подпрограмма позиционирования на запрошенную дорожку
10040$:	TSTB	@10(R3)		; Номер дорожки определенный?
	BPL	10052$		; Да
	CALL	10256$		; Позиционирование на нулевую дорожку
10052$:	CMPB	@10(R3),53(R3)	; Запрошенная и текущая дорожки равны?
	BEQ	10100$		; Да - возврат
	BHI	10072$		; Запрошенная меньше
	CALL	10110$		; На шаг вперед
	BR	10052$		; Продолжить дальше
10072$:	CALL	10150$		; На шаг назад
	BR	10052$		; Продолжить дальше
10100$: MOV	#23420,R0	; Пауза в 48 мс
10104$:	SOB	R0,10104$
	RETURN
; Шаг вперед
10110$:	INCB	@10(R3)		; Увеличить номер дорожки
	BMI	10136$		; Больше 127 - ошибка
10116$:	BIT	#100,2(R3)	; Стоит направление к центру?
	BNE	10214$		; Да - сделать шаг
	BIS	#100,2(R3)	; Установить в копии РСН направ.к центру
	BR	10206$		; Сделать шаг
10136$:	BIS	#20,0(R3)	; Ошибка - нет позиционирования на дорожку
	JMP	7500$		; Завершить операцию с ошибкой
; Шаг назад
10150$:	DECB	@10(R3)		; Уменьшить номер дорожки
10154$:	BIT	#1,@R4		; Стоим на нулевой дорожке?
	BEQ	10170$		; Нет
	CLRB	@10(R3)		; Текущая дорожка - нулевая
	RETURN
10170$:	BIT	#100,2(R3)	; Стоит направление от центра?
	BEQ	10214$		; Да - сделать шаг
	BIC	#100,2(R3)	; Установить в копии РСН направ.от центра
10206$:	MOV	#310,R0		; Время ожидания при смене направления
	BR	10220$
10214$:	MOV	#1,R0		; Время ожидания при том же направлении
10220$:	MOV	2(R3),@R4	; Известить контроллер о направлении
10224$:	SOB	R0,10224$	; Цикл ожидания
	BIS	#200,2(R3)	; Установить бит шага в копии РСН
	MOV	2(R3),@R4	; Сделать шаг
	MOV	24(R3),R0	; R0 = время шага
	BIC	#200,2(R3)	; Сбросить бит шага в копии РСН
10252$:	SOB	R0,10252$	; Цикл ожидания
	RETURN
; Подпрограмма позиционирования на нулевую дорожку
10256$:	TSTB	@10(R3)		; Номер дорожки определенный?
	BPL	10304$		; Да
	MOV	#5,32(R3)	; Сделать пять шагов к центру
10272$:	CALL	10116$		; Сделать шаг
	DEC	32(R3)		; Уменьшить счетчик
	BNE	10272$
10304$:	MOVB	#200,@10(R3)	; Установить неопределенный номер (128 попыток)
10312$:	CALL	10154$		; Сделать шаг назад
	BIT	#1,@R4		; Достигли нулевой дорожки
	BNE	10344$		; Да
	DECB	@10(R3)		; Уменьшить кол-во попыток
	BNE	10312$		; Продолжаем дальше
	BIS	#10,0(R3)	; Ошибка - нет позиционирования на 0-ю дор.
	JMP	7500$		; Завершить операцию с ошибкой
10344$:	CLRB	@10(R3)		; Текущая дорожка - нулевая
	RETURN
; Подпрограмма настроек точек перехода векторов 4, 10, 24, 100
10352$:	MOV	#137,R0		; R0 = код команды JMP @#...
	MOV	R3,R1		; R1 = адрес массива точек перехода
	ADD	#72,R1
	MOV	R0,(R1)+	; Сохранить команду перехода
	MOV	#104$,(R1)+	; Сохранить адрес обработки TRAP4
	MOV	R0,(R1)+	; Сохранить команду перехода
	MOV	#252$,(R1)+	; Сохранить адрес обработки TRAP10
	MOV	R0,(R1)+	; Сохранить команду перехода
	MOV	#30$,(R1)+	; Сохранить адрес обработки PWRFAIL (24)
	MOV	R0,(R1)+	; Сохранить команду перехода
	MOV	#274$,@R1	; Сохранить адрес обработки IRQ2 (100)
	RETURN
; Подпрограмма обработки пересылки блока памяти
10416$:	MOV	34(R3),R0	; R0 - расш.часть адреса БЛОКА1
	MOV	36(R3),R1	; R1 - младшая часть адреса БЛОКА1
	CALL	7550$		; Преобразовать в формат "окна"
	MOV	R1,R4		; R4 = ст.часть адреса "окна" БЛОКА1
	MOV	R2,R5		; R5 = мл.часть адреса "окна" БЛОКА1
	MOV	34(R3),R0
	SWAB	R0		; R0 - расш.часть адреса БЛОКА2
	MOV	40(R3),R1	; R1 - младшая часть адреса БЛОКА2
	CALL	7550$		; Преобразовать в формат "окна"
	MOV	R5,R0		; R0 = мл.часть адреса "окна" БЛОКА1
	MOV	R1,R5		; R5 = ст.часть адреса "окна" БЛОКА2
	MOV	R0,R1		; R1 = мл.часть адреса "окна" БЛОКА1
; R1 = мл.часть адреса "окна" БЛОКА1, R2 = мл.часть адреса "окна" БЛОКА2
; R4 = ст.часть адреса "окна" БЛОКА1, R5 = ст.часть адреса "окна" БЛОКА2
	MOV	42(R3),6(R3)	; Количество слов для обмена
10470$:	MOV	#100000,R0	; R0 = адрес границы окна
	CMP	R1,R2		; Адрес БЛОКА1 больше адреса БЛОКА2?
	BHI	10504$		; Да
	SUB	R2,R0		; R0 = кол-во байт от начала БЛОКА2 до границы
	BR	10506$
10504$:	SUB	R1,R0 		; R0 = кол-во байт от начала БЛОКА1 до границы
10506$:	CLC			; Преобразовать кол-во байт в кол-во слов
	ROR	R0
	CMP	6(R3),R0	; Кол-во слов обм.больше кол-ва слов до гран.?
	BHI	10532$		; Да
	MOV	6(R3),R0	; Цикл по кол-ву слов до обмена
	CLR	6(R3)		; Осталось для обмена ноль слов
	BR	10536$
10532$:	SUB	R0,6(R3)	; Вычесть из кол-ва для обмена кол-во до гран.
10536$:	MOV	R4,@#177102	; Адрес ст.части "окна" БЛОКА1
	MOV	(R1)+,-(SP)	; Сохранить слово из БЛОКА1 в стеке
	MOV	R5,@#177102	; Адрес ст.части "окна" БЛОКА2
	MOV	(SP)+,(R2)+	; Записать слово в БЛОК2 из стека
	SOB	R0,10536$	; Цикл обмена
	TST	6(R3)		; Операция пересылки завершена?
	BEQ	10610$		; Да
	TST	R1		; Адрес БЛОКА1 подошел к границе?
	BPL	10574$		; Нет
	ROR	R1		; На начало "окна"
	ADD	#401,R4		; Увеличить адрес старшей части
10574$:	TST	R2		; Адрес БЛОКА2 подошел к границе?
	BPL	10470$		; Нет
	ROR	R2		; На начало "окна"
	ADD	#401,R5		; Увеличить адрес старшей части
	BR	10470$		; Продолжить операцию пересылки
10610$:	MOV	#40,R1		; Установить в R1 бит DONE
	JMP	2750$		; На прием очередной команды
; Запуск подпрограммы пользователя
10620$:	MOV	R5,R0		; R0 - расш.часть адреса п/п пользов.
	SWAB	R0		; в R1 - младшая часть
	CALL	7550$		; Преобразование адреса в формат "окна"
	CALL	@R2		; Вызов подпрограммы
	MOV	#40,R1		; Установить в R1 бит DONE
	JMP	2750$		; На прием очередной команды
; Подпрограмма чтения символа с ожиданием с клавиатуры терминала
; Символ содержится в R0, регистр R1 портится
10642$:	MOV	@#177102,R1	; Сохранить в R1 адрес ст.части "окна"
	MOV	#177777,@#177102; Установить в адрес ст. части адрес IOPAGE
10654$:	TSTB	@#77560		; Клавиша нажата?
	BPL	10654$		; Нет
	MOVB	@#77562,R0	; Получить код клавиши
	MOV	R1,@#177102	; Восстановить адрес ст.части "окна"
	RETURN
; Подпрограмма вывода символа на терминал
; Код символа содержится в R0, регистр R1 портится
10674$:	MOV	@#177102,R1	; Сохранить в R1 адрес ст.части "окна"
	MOV	#177777,@#177102; Установить в адрес ст. части адрес IOPAGE
10706$:	TSTB	@#77564		; Терминал готов к приему?
	BPL	10706$		; Нет
	MOVB	R0,@#77566	; Вывести символ
	MOV	R1,@#177102	; Восстановить адрес ст.части "окна"
	RETURN
; Устанавливаемые биты выбора привода в копии РСН
10726$:	.BYTE	1,2,4,10
; Размер сектора в словах для форматов x, 256, 512, 1024 байта
10732$:	.WORD	0,200,400,1000
; Кол-во секторов на дорожке для форматов x, 256, 512, 1024 байта
10742$:	.BYTE	0,20,12,5
; Размер промежутка GAP3 для форматов x, 256, 512, 1024 байта
10746$:	.BYTE	0,33,22,72
; Размер промежутка GAP4 для форматов x, 256, 512, 1024 байта
10752$:	.BYTE	0,240,124,242
; FORMAT & WRITE
10756$:	INC	30(R3)		; Установить признак записи
10762$:	BIT	#2,@R4		; В контроллере установлен бит готовности?
	BEQ	10762$		; Нет - ожидаем
	CLR	R0		; R0 = 0 (расш.часть адреса)
	MOV	#100000,R1	; R1 = 100000 (мл.часть адреса)
	CALL	7550$		; Преобразование в формат "окна"
	MOV	R2,4(R3)	; Сохранить адрес
	MOVB	55(R3),R0	; R0 = привод (5-2),код длины (1-0)
	BIC	#177700,R0	; Выделение битов выбора привода
	ASR	R0
	ASR	R0
	BIS	R0,2(R3)	; Установить биты привода в копии РСН
	BIC	#2000,2(R3)	; Сбросить бит включения прекорректора
	TST	R0		; Привод выбран?
	BEQ	11046$		; Нет
	BIS	#2000,2(R3)	; Установить бит включения прекорректора
11046$:	MOV	2(R3),@R4	; Дать команду контроллеру
	MOVB	55(R3),R2	; R2 = привод (5-2),код длины (1-0)
	BIC	#177774,R2	; R0 = код длины (1-0)
	BNE	11076$		; Он не равен нулю
	BIS	#40000,0(R3)	; Ошибка блока параметров
	JMP	7500$		; Завершить операцию с ошибкой
11076$:	MOVB	10742$(R2),56(R3); Сохранить номер последнего сектора на дор.
	MOVB	10746$(R2),62(R3); Сохранить длину GAP3                      
	MOVB	10752$(R2),63(R3); Сохранить длину GAP4                      
	MOV	R2,R1
	ASL	R1
	MOV	10732$(R1),R1	; R1 = число слов в секторе
	MTPS	#340		; Запретить прерывания
	SWAB	R2
11136$:	INC	R2		; R2 = код длины/номер сектора
	MOVB	56(R3),32(R3)	; Установить счетчик равным числу секторов
	MOV	#20,R0		; R0 = длина GAP1
	MOV	#177241,16(R3)	; Будет записываться маркер заголовка 0xFEA1
	MOV	#47116,@R5	; Перевести контроллер в режим записи
	BIS	#20,2(R3)	; Установить бит включения мотора
	MOV	2(R3),@R4	; Дать команду контроллеру (вкл. мотор)
11176$:	CALL	7620$		; Запись GAP, синхрозоны и маркера заголовка
11202$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11202$		; Нет
	MOV	14(R3),@R5	; Запись дорожки/стороны
	MOV	2(R3),@R4	; Сбросить бит записи маркера
11216$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11216$		; Нет
	MOV	R2,@R5		; Запись кода длины/номера сектора
	MOV	#13,R0		; R0 = длина GAP2
	MOV	#175641,16(R3)	; Будет записываться маркер данных 0xFBA1
	MOV	R2,-(SP)	; Сохранить в стеке код длины/номер сектора
	MOV	4(R3),R2	; R2 = адрес массива данных
11244$:	BIT	#40000,@R4	; CRC заголовка записана?
	BEQ	11244$		; Нет
	CALL	7614$		; Запись GAP2, синхрозоны и маркера данных
	BIC	#20,2(R3)	; Сбросить бит запуска мотора в копии РСН
	MOV	R1,R0		; R0 = число слов в секторе
11266$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11266$		; Нет
	MOV	(R2)+,@R5	; Запись первого слова зоны данных
	MOV	2(R3),@R4	; Сбросить бит записи маркера
	DEC	R0		; Уменьшить число записываемых слов
11302$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11302$		; Нет
	MOV	(R2)+,@R5	; Записать очередное слово данных
	SOB	R0,11302$	; Цикл записи сектора
	MOV	(SP)+,R2	; Восстановить код длины/номер сектора
	INC	R2		; Увеличить номер сектора
	MOVB	62(R3),R0	; R0 = размер GAP3
	MOV	#177241,16(R3)	; Будет записываться маркер заголовка 0xFEA1
11330$:	BIT	#40000,@R4	; CRC данных записана?
	BEQ	11330$		; Нет
	DECB	32(R3)		; Уменьшить счетчик записываемых секторов
	BEQ	11352$		; Все сектора записаны
	MOV	#47116,@R5	; Передать в контроллер 0x4E4E
	BR	11176$		; Продолжить дальше
11352$:	MOVB	63(R3),R0	; R0 = длина GAP4
11356$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11356$		; Нет
	MOV	#47116,@R5	; Запись GAP4 (0x4E4E)
	SOB	R0,11356$	; Цикл записи промежутка GAP4
	CLRB	R2		; Номер сектора = 0
	BIT	#2,@R4		; В контроллере установлен бит готовности?
	BNE	11136$		; Да - начнем сначала
	TST	@R5		; Перевести контроллер в режим чтения
	MTPS	#0		; Разрешить прерывания
	SWAB	16(R3)
	JMP	7506$		; Завершить операцию успешно
; Форматирование дорожки в формате IBM
11416$:	BIT	#4,@R4		; Дискета защищена от записи?
	BEQ	11436$		; Нет
	BIS	#1,0(R3)	; Установить ошибку - дискета защищена
11432$:	JMP	7500$		; Завершить операцию с ошибкой
11436$:	CALL	5756$		; Включить прекорректор
	SWAB	14(R3)
	MOVB	@10(R3),14(R3)	; Занести номер тек.дор. в дорожку/сторону
	BPL	11466$		; Номер определенный
	BIS	#20,0(R3)	; Установить ошибку поиска дорожки
	BR	11432$		; Завершить операцию с ошибкой
11466$:	MOVB	55(R3),R2	; R2 = длина сектора,сторона,номер диска
	ASR	R2		; Выделить длину сектора
	ASR	R2
	ASR	R2
	BIC	#177774,R2
	BNE	11516$		; Длина не равна нулю
	BIS	#40000,0(R3)	; Установить ошибку в массиве параметров
	BR	11432$		; Завершить операцию с ошибкой
11516$:	MOVB	10742$(R2),56(R3); Сохранить номер последнего сектора на дор.
	MOVB	10746$(R2),62(R3); Сохранить длину GAP3
	MOVB	10752$(R2),63(R3); Сохранить длину GAP4
	MOV	R2,R1
	ASL	R1
	MOV	10732$(R1),R1	; R1 = число слов в секторе
	SWAB	R2
	INC	R2		; R2 = длина сектора/номер сектора
	MOV	#1750,R0	; R0 = длина цикла при ожидании ИНДЕКСА
11560$:	TST	@R4		; Линия ИНДЕКС активна?
	BPL	11574$		; Нет
	SOB	R0,11560$	; Ожидать исчезновения сигнала ИНДЕКС
11566$:	TST	@R5		; Перевести контроллер в режим чтения
	JMP	7474$		; Выключить мотор и завершить с ошибкой
11574$:	MOV	#6200,R0	; R0 = длина дорожки с запасом (6400 байт)
	MOV	#47116,@R5	; Заполнить дорожку байтами 0x4E
11604$:	TST	@R4		; Линия ИНДЕКС активна?
	BMI	11624$		; Да
11610$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11610$		; Нет
	MOV	#47116,@R5	; Заполнить дорожку байтами 0x4E
	SOB	R0,11604$
	BR	11566$		; Ошибка - не появился ИНДЕКС
11624$:	MOV	#50,R0		; R0 = размер GAP4B
	MOV	#176302,16(R3)  ; Будет записываться маркер индекса 0xFСС2
	MTPS	#340            ; Запретить прерывания                      
	MOV	#47116,@R5	; Записать слово промежутка 0x4E4E
11646$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11646$		; Нет
	MOV	#47116,@R5	; Записать очередное слово промежутка GAP4B
	SOB	R0,11646$	; Цикл записи промежутка GAP4B
	MOV	#6,R0		; R0 = размер синхрозоны
11664$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11664$		; Нет
	MOV	#0,@R5		; Запись синхрозоны
	SOB	R0,11664$	; Цикл записи синхрозоны
	BIS	#1000,2(R3)	; Установить в копии РСН бит записи маркера
11704$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11704$		; Нет
	MOV	#141302,@R5	; Записать маркер 0xC2C2
	MOV	2(R3),@R4	; Включить режим записи маркера
	BIC	#1000,2(R3)	; Сбросить в копии РСН бит записи маркера
11726$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11726$		; Нет
	MOV	16(R3),@R5	; Записать маркер 0xFСС2
11736$:	TSTB	@R4		; Контроллер готов к приему?
	BPL	11736$		; Нет
	MOV	#47116,@R5	; Записать первое слово промежутка GAP1
	MOV	2(R3),@R4	; Сбросить режим записи маркера
	MOV	#31,R0		; R0 = размер GAP1 в формате IBM (50 байт)
	DEC	R0
	MOV	#177241,16(R3)	; Будет записываться маркер заголовка 0xFEA1
	JMP	5552$		; На дальнейшее форматирование
11772$:	.WORD	16012,0,0
12000$:	.WORD	15540		; Контрольная сумма ПЗУ (0-11776)

	.=20000
	.=.-2
	.WORD	0
	.END	10000$
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   