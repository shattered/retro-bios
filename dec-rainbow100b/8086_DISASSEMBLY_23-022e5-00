seg000:0000 ; +---------------------------------------------------------------------------+
seg000:0000 ; |  Disassembly of BOOT ROM of DEC Rainbow-100 B. 8086 only; no Z80 sections |
seg000:0000 ; |    (23-022e5-00.bin)                                                      |     
seg000:0000 ; |    = CRC(9d1332b4) SHA1(736306d2a36bd44f95a39b36ebbab211cc8fea6e)         |       
seg000:0000 ; +---------------------------------------------------------------------------+
seg000:0000 ; ¦    File generated by The Interactive Disassembler (IDA) Freeware version  ¦
seg000:0000 ; |    LAST MODIFIED: January. 17th 2018                                      ¦                                          
seg000:0000 ; +---------------------------------------------------------------------------+
seg000:0000 ;
seg000:0000 ; Input MD5   : 06EEB8B2C69315B0BD1D37224EB6D812
seg000:0000
seg000:0000 ; File Name   : 23-022e5-00.bin
seg000:0000 ; Format      : Binary file
seg000:0000 ; Base Address: 0000h Range: 0000h - 4000h Loaded length: 4000h
seg000:0000
seg000:0000                 .8086
seg000:0000                 .model flat
seg000:0000
seg000:0000 ; ---------------------------------------------------------------------------
seg000:0000
seg000:0000 ; Segment type: Regular
seg000:0000 seg000          segment byte public ''
seg000:0000                 assume cs:seg000
seg000:0000                 assume es:nothing, ss:nothing, ds:nothing
seg000:0000
seg000:0000 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0000
seg000:0000 ; Attributes: thunk
seg000:0000
seg000:0000 sub_0           proc near               ; DATA XREF: SETUP_IRQ_TABLE_DH__sub_1B88+Bw
seg000:0000                                         ; SETUP_IRQ_TABLE_DH__sub_1B88+15w
seg000:0000                                         ; seg000:1CFAw
seg000:0000                                         ; SETUP_IRQ_TABLE_DH__sub_1B88+1Dw
seg000:0000                 jmp     loc_86          ; CODE EXECUTED AFTER CPU RESET
seg000:0000 sub_0           endp
seg000:0000
seg000:0003
seg000:0003 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0003
seg000:0003 ; Attributes: thunk
seg000:0003
seg000:0003 j_SHORT_SELFTEST__loc_150 proc near     ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344:W18__loc_15E9j
seg000:0003                                         ; DATA XREF: sub_2517+Aw
seg000:0003                                         ; seg000:372Fr
seg000:0003                                         ; seg000:373Bw
seg000:0003                                         ; REVERSE_FIELD__sub_3752+13w
seg000:0003                 jmp     SHORT_SELFTEST__loc_150 ; Sets DL to 0.
seg000:0003 j_SHORT_SELFTEST__loc_150 endp          ;
seg000:0003                                         ; In all other aspects, it's the same as sub_6
seg000:0006
seg000:0006 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0006
seg000:0006 ; Attributes: thunk
seg000:0006
seg000:0006 j_S_ELFTEST__loc_152 proc near          ; DATA XREF: seg000:0E91w
seg000:0006                                         ; ENABLE_RAM_BOARD_DETECTION__sub_109A+4w
seg000:0006                                         ; SETUP_IRQ_TABLE_DH__sub_1B88+60w
seg000:0006                 jmp     S_ELFTEST__loc_152 ; Reads port $67.
seg000:0006 j_S_ELFTEST__loc_152 endp               ; SETS port 10C to 00.
seg000:0006                                         ; Blanks screen.
seg000:0006                                         ; SETS and GETS diagnostic register $0a.
seg000:0006                                         ;
seg000:0006                                         ; Branches depending on test jumpers
seg000:0006                                         ;  W13, W14 and W15.
seg000:0009
seg000:0009 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0009
seg000:0009 ; Attributes: thunk
seg000:0009
seg000:0009 SYS_MESSAGE_SIT_n_WAIT__sub_9 proc near ; CODE XREF: sub_84+933p
seg000:0009                                         ; seg000:0A09p
seg000:0009                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+49p
seg000:0009                                         ; seg000:0DDEp
seg000:0009                                         ; seg000:0EFDp
seg000:0009                                         ; seg000:loc_F92p
seg000:0009                                         ; seg000:1287p
seg000:0009                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+9Bp
seg000:0009                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+21Dp
seg000:0009                                         ; sub_84+1663p
seg000:0009                                         ; TEST_PRN__sub_1718+33p
seg000:0009                                         ; seg000:17B3p
seg000:0009                                         ; TEST_COMM___sub_195A+49p
seg000:0009                                         ; NEXT_TEST_KBD__sub_19B2+80p
seg000:0009                                         ; DATA XREF: seg000:0E99w
seg000:0009                 jmp     EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215 ; SYSTEM MESSAGE (See Owner's Manual etc.)   Loops forever if DL=2!
seg000:0009 SYS_MESSAGE_SIT_n_WAIT__sub_9 endp
seg000:0009
seg000:000C
seg000:000C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:000C
seg000:000C ; Attributes: thunk
seg000:000C
seg000:000C j_CONTROL_ALL_LEDs__sub_B9A proc near   ; CODE XREF: seg000:0DD5p
seg000:000C                                         ; seg000:1708p
seg000:000C                                         ; TEST_PRN__sub_1718+2Ap
seg000:000C                                         ; seg000:17AAp
seg000:000C                                         ; NEXT_TEST_KBD__sub_19B2+72p
seg000:000C                 jmp     SET_DIAG_LEDs__sub_B9A ; SUBROUTINE (sub_C) : Controls 7 LEDs at back of computer.
seg000:000C j_CONTROL_ALL_LEDs__sub_B9A endp
seg000:000C
seg000:000F
seg000:000F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:000F
seg000:000F ; Attributes: thunk
seg000:000F
seg000:000F j_CRC_CHECK1__loc_2A3 proc near         ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+50p
seg000:000F                                         ; NVM_WRITEPROTECT_READABLE__sub_3DF3+63p
seg000:000F                 jmp     CRC_CHECK1__loc_2A3 ; CRC check (used for ROMS 0,1,2)
seg000:000F j_CRC_CHECK1__loc_2A3 endp
seg000:000F
seg000:0012
seg000:0012 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0012
seg000:0012 ; Attributes: thunk
seg000:0012
seg000:0012 j_SETUP_VIDEO_HW__sub_1AF0 proc near    ; CODE XREF: sub_2517+1Ep
seg000:0012                 jmp     INIT_VIDEO_HW__sub_1AF0 ; SUBROUTINE
seg000:0012 j_SETUP_VIDEO_HW__sub_1AF0 endp         ;
seg000:0012                                         ; Accesses PORT 04H  DC011 Write Register
seg000:0012                                         ;
seg000:0012                                         ; Called from  sub_66
seg000:0015
seg000:0015 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0015
seg000:0015 ; Attributes: thunk
seg000:0015
seg000:0015 j_DC012_REVERSE_FIELD_NVM8A proc near   ; CODE XREF: REVERSE_FIELD__sub_3752+1Fp
seg000:0015                 jmp     DC012_REVERSE_FIELD_NVM8A__sub_1B5B ; CRT display dark or light
seg000:0015 j_DC012_REVERSE_FIELD_NVM8A endp
seg000:0015
seg000:0018
seg000:0018 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0018
seg000:0018 ; Attributes: thunk
seg000:0018
seg000:0018 sub_18          proc near
seg000:0018                 jmp     sub_39E3        ; CURSOR RELATED #1
seg000:0018 sub_18          endp                    ;
seg000:0018                                         ; Disables cursor first.
seg000:0018                                         ; Re-enables cursor depending on a certain memory location. Blink?
seg000:001B
seg000:001B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:001B
seg000:001B ; Attributes: thunk
seg000:001B
seg000:001B j_CURSOR_OFF_ON1__sub_39C4 proc near
seg000:001B                 jmp     CURSOR_OFF_ON1__sub_39C4 ; CURSOR RELATED #2
seg000:001B j_CURSOR_OFF_ON1__sub_39C4 endp         ;
seg000:001B                                         ; Disables, then enables cursor.
seg000:001B                                         ; Sets memory location to 1.
seg000:001B                                         ;
seg000:001B                                         ; SEE sub_2a.
seg000:001E
seg000:001E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:001E
seg000:001E ; Attributes: thunk
seg000:001E
seg000:001E j_ROM_DisableCursor proc near           ; CODE XREF: seg000:1FD9p
seg000:001E                                         ; seg000:1FE2p
seg000:001E                                         ; sub_28C9-7D4p
seg000:001E                                         ; sub_28C9-768p
seg000:001E                                         ; sub_28C9-740p
seg000:001E                                         ; sub_28C9-701p
seg000:001E                                         ; sub_28C9-6E5p
seg000:001E                                         ; sub_2385+3p sub_23A6+3p
seg000:001E                                         ; sub_23C2+3p sub_23D6+3p
seg000:001E                                         ; sub_23D6+31p sub_2426+3p
seg000:001E                                         ; seg000:2465p
seg000:001E                                         ; sub_1D78+724p
seg000:001E                                         ; seg000:24B7p
seg000:001E                                         ; SET_132__sub_2508p
seg000:001E                                         ; SET_SCREEN_WIDTH_80__sub_2544p
seg000:001E                                         ; seg000:2792p sub_284D+3j
seg000:001E                                         ; seg000:2892p
seg000:001E                 jmp     ROM_DisableCursor__3927 ; ???  ROM_DisableCursor    0x08
seg000:001E j_ROM_DisableCursor endp                ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:001E
seg000:0021
seg000:0021 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0021
seg000:0021 ; Attributes: thunk
seg000:0021
seg000:0021 j_ROM_EnableCursor proc near            ; CODE XREF: seg000:1FDFj
seg000:0021                                         ; seg000:1FE8j
seg000:0021                                         ; sub_23D6:EnableCursor1__loc_241Dj
seg000:0021                                         ; sub_1D78:EnableCursor2__loc_2420p
seg000:0021                                         ; SET_132__sub_2508+Cj
seg000:0021                                         ; seg000:27D9p
seg000:0021                                         ; seg000:354Cp
seg000:0021                 jmp     ROM_EnableCursor__3950 ; ??? ROM_EnableCursor     0x0a
seg000:0021 j_ROM_EnableCursor endp                 ;
seg000:0021                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:0024
seg000:0024 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0024
seg000:0024 ; Attributes: thunk
seg000:0024
seg000:0024 SCREEN_TO_PRN1__sub_24 proc near
seg000:0024                 jmp     sub_39F7        ; SCREEN TO PRINTER?  HARDCOPY?
seg000:0024 SCREEN_TO_PRN1__sub_24 endp             ;
seg000:0024                                         ; Almost the same as the next subroutine.
seg000:0027
seg000:0027 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0027
seg000:0027 ; Attributes: thunk
seg000:0027
seg000:0027 j_SCREEN_TO_PRN2__sub_39FD proc near
seg000:0027                 jmp     SCREEN_TO_PRN__sub_39FD ; SCREEN TO PRINTER?  HARDCOPY?
seg000:0027 j_SCREEN_TO_PRN2__sub_39FD endp
seg000:0027
seg000:002A
seg000:002A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:002A
seg000:002A ; Attributes: thunk
seg000:002A
seg000:002A j_CURSOR_OFF_ON__sub_39F4 proc near
seg000:002A                 jmp     CURSOR_OFF_ON2__sub_39F4 ; CURSOR RELATED #2
seg000:002A j_CURSOR_OFF_ON__sub_39F4 endp          ;
seg000:002A                                         ; Disables, then enables cursor.
seg000:002A                                         ; Sets memory location to 1.
seg000:002A                                         ;
seg000:002A                                         ; SEE sub_1b.
seg000:002D
seg000:002D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:002D
seg000:002D ; Attributes: thunk
seg000:002D
seg000:002D sub_2D          proc near               ; CODE XREF: sub_28C9:loc_2917j
seg000:002D                 jmp     sub_3A66        ; VIDEO : uses video & cursor routines.
seg000:002D sub_2D          endp                    ;
seg000:002D                                         ; Routine called by jump table @ word_2A44
seg000:0030
seg000:0030 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0030
seg000:0030 ; Attributes: thunk
seg000:0030
seg000:0030 j_SWITCH_HOLDSCREEN__sub_3C34 proc near ; CODE XREF: seg000:3559p
seg000:0030                 jmp     SWITCH_HOLDSCREEN__sub_3C34
seg000:0030 j_SWITCH_HOLDSCREEN__sub_3C34 endp
seg000:0030
seg000:0033
seg000:0033 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0033
seg000:0033 ; Attributes: thunk
seg000:0033
seg000:0033 sub_33          proc near
seg000:0033                 jmp     sub_39D0        ; CURSOR FX ?
seg000:0033 sub_33          endp                    ;
seg000:0033                                         ; Possibly emits a space ($20 char) if certain conditions are met.
seg000:0033                                         ;
seg000:0033                                         ; Calls $800c located in high ROM.
seg000:0036
seg000:0036 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0036
seg000:0036 ; Attributes: thunk
seg000:0036
seg000:0036 j_GET_VIDEORAM_OFFSET__sub_3C8E proc near
seg000:0036                 jmp     GET_VIDEORAM_OFFSET__sub_3C8E ; GET VIDEO RAM *OFFSET* FOR BEGINNING OF LINE (= dh).
seg000:0036 j_GET_VIDEORAM_OFFSET__sub_3C8E endp    ;
seg000:0036                                         ; PARAMETER = DH (line number; beginning with 1)
seg000:0036                                         ; => RESULT : BX  (Hi Lo)
seg000:0036                                         ;
seg000:0036                                         ; Note: this uses a table located @ EEEF4
seg000:0036                                         ;
seg000:0036                                         ; Example: DH = 01 / BX = 00 12
seg000:0036                                         ;
seg000:0039
seg000:0039 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0039
seg000:0039 ; Attributes: thunk
seg000:0039
seg000:0039 sub_39          proc near
seg000:0039                 jmp     sub_3D01        ; [KEYBOARD]
seg000:0039 sub_39          endp                    ;
seg000:0039                                         ; Bell sound (if certain conditions are met).
seg000:0039                                         ;
seg000:0039                                         ; - USED BY ROUTINE IN LANGUAGE ROM
seg000:0039                                         ; "ROM_ConsoleOut"  @ 1B8E
seg000:0039                                         ;
seg000:0039                                         ; The routine above is called from within a jump table.
seg000:0039                                         ; ?? related to terminal emulation ??
seg000:003C
seg000:003C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:003C
seg000:003C ; Attributes: thunk
seg000:003C
seg000:003C j_COMM_CTRL_STATUS__sub_31C1 proc near
seg000:003C                 jmp     CONTROL_STATUS__sub_31C1 ; [COMMUNICATION CONTROL / STATUS]
seg000:003C j_COMM_CTRL_STATUS__sub_31C1 endp       ;
seg000:003C                                         ; Communicates with PORT 42 (hex).
seg000:003C                                         ; = COMM CONTROL / STATUS REGISTER (7201) RO/WO.
seg000:003F
seg000:003F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:003F
seg000:003F ; Attributes: thunk
seg000:003F
seg000:003F j_PRINTERCONTROL_STATUS__sub_3219 proc near
seg000:003F                 jmp     PRINTERCONTROL_STATUS__sub_3219 ; [PRINTER CONTROL / STATUS ]
seg000:003F j_PRINTERCONTROL_STATUS__sub_3219 endp  ;
seg000:003F                                         ; Communicates with PORT 43 (hex).
seg000:003F                                         ; = PRINTER CONTROL / STATUS REGISTER (7201)  RO/WO.
seg000:0042
seg000:0042 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0042
seg000:0042 ; Attributes: thunk
seg000:0042
seg000:0042 j_PRINTER_BITRATE__sub_31A4 proc near
seg000:0042                 jmp     HANDLE_BITRATES_NVRAM__sub_31A4 ; [PRINTER BIT RATE]
seg000:0042 j_PRINTER_BITRATE__sub_31A4 endp        ;
seg000:0042                                         ; Communicates with PORT 0e
seg000:0042                                         ; = PRINTER BIT RATE REGISTER /  WO.
seg000:0045
seg000:0045 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0045
seg000:0045 ; Attributes: thunk
seg000:0045
seg000:0045 j_KBD__sub_368F proc far
seg000:0045                 jmp     near ptr KBD_HOP__sub_368F ; [KEYBOARD]
seg000:0045 j_KBD__sub_368F endp                    ;
seg000:0045                                         ; May send keyboard command $7f (if certain conditions are met).
seg000:0048
seg000:0048 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0048
seg000:0048 ; Attributes: thunk
seg000:0048
seg000:0048 j_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC proc near
seg000:0048                 jmp     INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC
seg000:0048 j_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC endp
seg000:0048
seg000:004B
seg000:004B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:004B
seg000:004B ; Attributes: thunk
seg000:004B
seg000:004B j_REVERSE_FIELD__sub_3752 proc near     ; CODE XREF: E::ROM_FastVideo(const const)+Ap
seg000:004B                 jmp     REVERSE_FIELD__sub_3752 ; Unknown what this really does.
seg000:004B j_REVERSE_FIELD__sub_3752 endp          ; Calls  DC012_REVERSE_FIELD_ON,
seg000:004B                                         ; - also queries and sets DS: variables.
seg000:004B                                         ;
seg000:004B                                         ; Called from ROM_FastVideo (here in low ROM).
seg000:004E ; ---------------------------------------------------------------------------
seg000:004E ; START OF FUNCTION CHUNK FOR sub_1D78
seg000:004E
seg000:004E loc_4E:                                 ; CODE XREF: sub_224F:loc_2279j
seg000:004E                                         ; sub_28C9-5DEj
seg000:004E                                         ; sub_28C9-5D6j
seg000:004E                                         ; sub_28C9-5CEj
seg000:004E                                         ; sub_2343+6j sub_234C+6j
seg000:004E                                         ; sub_28C9-547j
seg000:004E                                         ; sub_28C9-4F6j
seg000:004E                                         ; sub_1D78+6ABj
seg000:004E                                         ; sub_255D+7j seg000:2578j
seg000:004E                                         ; seg000:2594j
seg000:004E                                         ; sub_28C9:loc_25A6j
seg000:004E                                         ; sub_28C9:loc_25C1j
seg000:004E                                         ; sub_28C9-300j
seg000:004E                                         ; sub_28C9:loc_25DDj
seg000:004E                                         ; sub_28C9-2C8j
seg000:004E                                         ; sub_28C9:loc_2615j
seg000:004E                                         ; seg000:2645j
seg000:004E                                         ; seg000:2658j
seg000:004E                                         ; seg000:265Fj
seg000:004E                                         ; sub_28C9:loc_267Cj
seg000:004E                                         ; sub_28C9-23Dj
seg000:004E                                         ; seg000:26ADj
seg000:004E                                         ; sub_28C9-160j
seg000:004E                                         ; seg000:loc_27DCj
seg000:004E                                         ; seg000:289Cj
seg000:004E                                         ; seg000:28A2j
seg000:004E                                         ; seg000:28A5j
seg000:004E                                         ; seg000:2B75j
seg000:004E                                         ; seg000:2B96j
seg000:004E                                         ; seg000:2BA1j
seg000:004E                                         ; seg000:2BC2j
seg000:004E                                         ; seg000:loc_2BD8j
seg000:004E                                         ; seg000:loc_2BF5j
seg000:004E                                         ; seg000:loc_2C01j
seg000:004E                                         ; seg000:loc_2C12j
seg000:004E                                         ; seg000:loc_2C1Ej
seg000:004E                                         ; seg000:loc_2C36j
seg000:004E                                         ; seg000:2C40j
seg000:004E                                         ; seg000:2C48j
seg000:004E                                         ; seg000:2C7Aj
seg000:004E                                         ; seg000:2C82j
seg000:004E                                         ; seg000:2CB7j
seg000:004E                                         ; seg000:2CBFj ...
seg000:004E                 jmp     loc_28C3        ; AND   byte ptr ds:0F2Fh, 7Fh
seg000:004E ; END OF FUNCTION CHUNK FOR sub_1D78    ; RETN.
seg000:0051
seg000:0051 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0051
seg000:0051 ; Attributes: thunk
seg000:0051
seg000:0051 j_TERMINAL__sub_28A8 proc near
seg000:0051                 jmp     SET_EMULATION_FROM_NVM__sub_28A8 ; SETS  ds:0EDCh
seg000:0051 j_TERMINAL__sub_28A8 endp
seg000:0051
seg000:0054
seg000:0054 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0054
seg000:0054 ; Attributes: thunk
seg000:0054
seg000:0054 sub_54          proc near
seg000:0054                 jmp     sub_28C9        ; GETS DATA from  ds:0EDCh
seg000:0054 sub_54          endp
seg000:0054
seg000:0057 ; ---------------------------------------------------------------------------
seg000:0057 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:0057
seg000:0057 loc_57:                                 ; CODE XREF: sub_28C9:loc_2917j
seg000:0057                 jmp     loc_2AFA        ; Routine called by jump table @ word_2A44
seg000:0057 ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:005A
seg000:005A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:005A
seg000:005A ; Attributes: thunk
seg000:005A
seg000:005A sub_5A          proc near               ; CODE XREF: KEYB_IN_AL__sub_38B1+41p
seg000:005A                 jmp     sub_30F2
seg000:005A sub_5A          endp
seg000:005A
seg000:005D
seg000:005D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:005D
seg000:005D ; Attributes: thunk
seg000:005D
seg000:005D j_ROM_RomVersion__1F23 proc near
seg000:005D                 jmp     ROM_RomVersion__1F23
seg000:005D j_ROM_RomVersion__1F23 endp
seg000:005D
seg000:0060
seg000:0060 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0060
seg000:0060 ; Attributes: thunk
seg000:0060
seg000:0060 sub_60          proc near
seg000:0060                 jmp     sub_2343
seg000:0060 sub_60          endp
seg000:0060
seg000:0063
seg000:0063 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0063
seg000:0063 ; Attributes: thunk
seg000:0063
seg000:0063 sub_63          proc near
seg000:0063                 jmp     sub_234C
seg000:0063 sub_63          endp
seg000:0063
seg000:0066
seg000:0066 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0066
seg000:0066 ; Attributes: thunk
seg000:0066
seg000:0066 sub_66          proc near
seg000:0066                 jmp     sub_2517        ; INITIALIZE VIDEO (?)
seg000:0066 sub_66          endp                    ;
seg000:0066                                         ; - uses fastvideo call and does internal housekeeping -
seg000:0069
seg000:0069 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0069
seg000:0069 ; Attributes: thunk
seg000:0069
seg000:0069 sub_69          proc near
seg000:0069                 jmp     sub_255D
seg000:0069 sub_69          endp
seg000:0069
seg000:006C
seg000:006C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:006C
seg000:006C ; Attributes: thunk
seg000:006C
seg000:006C j_NVM_WRITABLE__loc_3E10 proc near      ; CODE XREF: sub_503+144p
seg000:006C                                         ; seg000:0DACp
seg000:006C                                         ; seg000:0E36p
seg000:006C                 jmp     NVM_WRITABLE__loc_3E10
seg000:006C j_NVM_WRITABLE__loc_3E10 endp
seg000:006C
seg000:006F
seg000:006F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:006F
seg000:006F ; Attributes: thunk
seg000:006F
seg000:006F j_NVM_WRITEPROTECT_READABLE__sub_3DF3 proc near
seg000:006F                 jmp     NVM_WRITEPROTECT_READABLE__sub_3DF3
seg000:006F j_NVM_WRITEPROTECT_READABLE__sub_3DF3 endp
seg000:006F
seg000:0072
seg000:0072 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0072
seg000:0072 ; Attributes: thunk
seg000:0072
seg000:0072 j_NVM_READ_n_CHECK__sub_3D62 proc near  ; CODE XREF: EMIT_SETUP_STRING__sub_19F+17p
seg000:0072                                         ; sub_84+34Dp seg000:0DA7p
seg000:0072                                         ; seg000:0DCDp
seg000:0072                 jmp     NVM_READ_n_CHECK__sub_3D62 ; See sub_75 !
seg000:0072 j_NVM_READ_n_CHECK__sub_3D62 endp
seg000:0072
seg000:0075
seg000:0075 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0075
seg000:0075 ; Attributes: thunk
seg000:0075
seg000:0075 j_NVM_READ_n_CHECK__sub_3D62_0 proc near
seg000:0075                 jmp     NVM_READ_n_CHECK__sub_3D62 ; - write protect NVM
seg000:0075 j_NVM_READ_n_CHECK__sub_3D62_0 endp     ; - make it readable
seg000:0075                                         ; - check if content is valid
seg000:0075                                         ; - reset NVM DEFAULTS if invalid
seg000:0078
seg000:0078 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0078
seg000:0078 ; Attributes: thunk
seg000:0078
seg000:0078 j_PRN__sub_32FB proc near
seg000:0078                 jmp     PRN__sub_32FB   ; [PRINTER DATA]
seg000:0078 j_PRN__sub_32FB endp                    ;
seg000:0078                                         ; Writes to port 41 (hex).
seg000:0078                                         ; = PRINTER DATA REGISTER (7201);   RO/WO.
seg000:007B
seg000:007B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:007B
seg000:007B ; Attributes: thunk
seg000:007B
seg000:007B j_PRN_CTRL_STATUS__sub_32E3 proc near
seg000:007B                 jmp     PRN_CTRL_STATUS__sub_32E3 ; [PRINTER CONTROL / STATUS]
seg000:007B j_PRN_CTRL_STATUS__sub_32E3 endp        ;
seg000:007B                                         ; Gets data from port 43 (hex).
seg000:007B                                         ; = PRINTER CONTROL / STATUS REGISTER (7201);   RO/WO.
seg000:007E
seg000:007E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:007E
seg000:007E ; Attributes: thunk
seg000:007E
seg000:007E j_NVM_DEFAULTS__sub_3D74 proc near
seg000:007E                 jmp     NVM_DEFAULTS__sub_3D74
seg000:007E j_NVM_DEFAULTS__sub_3D74 endp
seg000:007E
seg000:0081
seg000:0081 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0081
seg000:0081 ; Attributes: thunk
seg000:0081
seg000:0081 j_PREPARE_NVM__loc_3DCF proc near       ; DATA XREF: sub_1357:ERROR_29__Z80_RESPONSE__loc_13AAo
seg000:0081                 jmp     PREPARE_NVM__loc_3DCF
seg000:0081 j_PREPARE_NVM__loc_3DCF endp
seg000:0081
seg000:0084
seg000:0084 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0084
seg000:0084 ; Attributes: hidden
seg000:0084
seg000:0084 sub_84          proc near               ; DATA XREF: SET_SMOOTH_SCROLL__sub_230A+3w
seg000:0084                                         ; SET_JUMP_SCROLL__NVM_84__sub_2314+3w
seg000:0084                                         ; sub_3AB5+23r
seg000:0084
seg000:0084 ; FUNCTION CHUNK AT seg000:02A1 SIZE 0000025D BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:0662 SIZE 00000021 BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:080E SIZE 000000D0 BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:0960 SIZE 00000034 BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:0998 SIZE 00000058 BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:0CA0 SIZE 00000022 BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:0FA8 SIZE 0000005A BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:108E SIZE 00000004 BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:1631 SIZE 000000BC BYTES
seg000:0084 ; FUNCTION CHUNK AT seg000:37D0 SIZE 000000E1 BYTES
seg000:0084
seg000:0084                 mov     ch, 29h ; ')'   ; <==== CODE EXECUTION STARTS HERE AFTER RESET
seg000:0086
seg000:0086 loc_86:                                 ; CODE XREF: sub_0j
seg000:0086                                         ; DATA XREF: sub_84+2E9r
seg000:0086                                         ; sub_84+3C2r
seg000:0086                                         ; INIT_VIDEO_HW__sub_1AF0+3r
seg000:0086                                         ; INIT_VIDEO_HW__sub_1AF0+46r
seg000:0086                                         ; SET_132__sub_2508+3w
seg000:0086                                         ; SET_SCREEN_WIDTH_80__sub_2544+3w
seg000:0086                                         ; sub_1C72+2Br
seg000:0086                                         ; SET_VT52_EMULATION__sub_22C9w
seg000:0086                                         ; sub_28C9:SET_ANSI_EMULATION__loc_22E2w
seg000:0086                 mov     ax, 0EE00h
seg000:0089
seg000:0089 loc_89:                                 ; DATA XREF: AUTO_REPEAT_ON__sub_254Fw
seg000:0089                                         ; AUTO_REPEAT_OFF__sub_2556w
seg000:0089                                         ; ROM_EnableCursor__3950+49r
seg000:0089                                         ; DC012_REVERSE_FIELD_NVM8A__sub_1B5B+2r
seg000:0089                                         ; SET_DC012_REV_FIELD_ON__sub_231Ew
seg000:0089                                         ; SET_DC012_REV_FIELD_ON__sub_231E:SET_DC012_REV_FIELD_OFF__loc_2328w
seg000:0089                 mov     ss, ax
seg000:008B                 assume ss:nothing
seg000:008B
seg000:008B loc_8B:                                 ; DATA XREF: sub_3D01r
seg000:008B                                         ; SET_AUTOWRAP_NVM_8D__sub_2335w
seg000:008B                                         ; RESET_AUTOWRAP_NVM_8D__sub_233Cw
seg000:008B                 mov     sp, 1FF7h
seg000:008E
seg000:008E loc_8E:                                 ; DATA XREF: sub_2371w
seg000:008E                                         ; sub_2378w
seg000:008E                                         ; SCREEN_TO_PRN__sub_39FD:loc_3A24r
seg000:008E                                         ; ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F+3r
seg000:008E                                         ; sub_1934+Ew seg000:36FFr
seg000:008E                 mov     ax, 0
seg000:0091
seg000:0091 loc_91:                                 ; DATA XREF: INIT_VIDEO_HW__sub_1AF0+Br
seg000:0091                                         ; seg000:1CF0r sub_25E0w
seg000:0091                                         ; sub_25E7w
seg000:0091                 mov     ds, ax
seg000:0093
seg000:0093 loc_93:                                 ; DATA XREF: sub_25EEw
seg000:0093                                         ; sub_25F5w
seg000:0093                                         ; ENABLE_WINCHESTER_IRQ__sub_919+9r
seg000:0093                                         ; ENABLE_WINCHESTER_IRQ__sub_919+18w
seg000:0093                                         ; DISABLE_WINCHESTER_IRQ__sub_940+9w
seg000:0093                                         ; sub_2363w sub_236Aw
seg000:0093                                         ; sub_84+37FCr
seg000:0093                                         ; ENABLE_WINCHESTER_IRQ__sub_919+10r
seg000:0093                                         ; ENABLE_WINCHESTER_IRQ__sub_919+21w
seg000:0093                                         ; DISABLE_WINCHESTER_IRQ__sub_940+10w
seg000:0093                                         ; KEYB_IN_AL__sub_38B1:loc_390Fr
seg000:0093                                         ; SETUP_PORT_PROPERTIES__sub_3267:COMM__loc_3281r
seg000:0093                 mov     byte ptr ds:loc_4FE+4, 0
seg000:0098
seg000:0098 loc_98:                                 ; DATA XREF: sub_1934+15w
seg000:0098                                         ; sub_84+3810r
seg000:0098                                         ; seg000:111Fw
seg000:0098                 mov     byte ptr ds:sub_503, 0
seg000:009D
seg000:009D loc_9D:                                 ; DATA XREF: sub_84+2F4r
seg000:009D                                         ; sub_84+31Fr sub_84+3EAr
seg000:009D                                         ; sub_84+3EFw sub_84+3FCw
seg000:009D                                         ; ROM_GetSet7or8__1FC8+4w
seg000:009D                                         ; ROM_GetSet7or8__1FC8:loc_1FD1r
seg000:009D                                         ; sub_84:loc_381Ar
seg000:009D                                         ; sub_84:loc_3830r
seg000:009D                                         ; KEYB_IN_AL__sub_38B1:loc_38DEr
seg000:009D                 mov     ax, 200h
seg000:00A0
seg000:00A0 loc_A0:                                 ; DATA XREF: CONTROL_STATUS__sub_31C1:LOB__loc_31D0r
seg000:00A0                                         ; HANDLE_BITRATES_NVRAM__sub_31A4+13r
seg000:00A0                 mov     es, ax
seg000:00A2                 assume es:nothing
seg000:00A2
seg000:00A2 loc_A2:                                 ; DATA XREF: HANDLE_BITRATES_NVRAM__sub_31A4+Br
seg000:00A2                                         ; sub_84+376Cr
seg000:00A2                 mov     al, 0F4h ; '('  ; LSB : 0100 / MSB : 1111 - ALL LEDs  OFF  /  set COMM DTR L
seg000:00A4
seg000:00A4 loc_A4:                                 ; DATA XREF: PRINTERCONTROL_STATUS__sub_3219:loc_3228r
seg000:00A4                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:00A4                                         ;      Shown in paragraphs 4-31 / bits in 4-17 (page 155).
seg000:00A4                                         ;         Used to set / write MODEM (SERIAL) + DIAGNOSTIC LEDs.
seg000:00A4                                         ;
seg000:00A6
seg000:00A6 loc_A6:                                 ; DATA XREF: HANDLE_BITRATES_NVRAM__sub_31A4r
seg000:00A6                                         ; SETUP_PORT_PROPERTIES__sub_3267+Dr
seg000:00A6                                         ; sub_3AB5+133r
seg000:00A6                 in      al, 2           ; [02] COMMUNICATIONS STATUS REGISTER - PAGE 154 (**** READ **** )
seg000:00A6                                         ;      Shown in paragraphs 4-30 / 4-16 (page 154).
seg000:00A6                                         ;         Used to read status of SERIAL modem,
seg000:00A6                                         ;         IRQ line of each CPU, and MHFU logic enable signal.
seg000:00A6                                         ;
seg000:00A8                 test    al, 20h         ; test  $20   MHFU ENBL L (status of MHFU enable L)
seg000:00AA
seg000:00AA loc_AA:                                 ; DATA XREF: sub_2355w
seg000:00AA                                         ; sub_235Cw
seg000:00AA                                         ; NVM_WRITEPROTECT_READABLE__sub_3DF3+1Fw
seg000:00AA                                         ; NVM_WRITEPROTECT_READABLE__sub_3DF3+40w
seg000:00AA                                         ; sub_84+355r
seg000:00AA                 jnz     short NO_MHFU__loc_D9 ;
seg000:00AA                                         ;
seg000:00AC                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER - PAGE 153  ( *** READ **** )
seg000:00AC                                         ;         See table 4-29 and 4-15
seg000:00AE                 test    al, 20h         ;  $20     PORT LOOPBACK H (PORT loopback H, state of bit 5 of 8088 diag.write register)
seg000:00B0
seg000:00B0 loc_B0:                                 ; DATA XREF: seg000:3601r
seg000:00B0                 jnz     short _loc_11F
seg000:00B2                 cli                     ;
seg000:00B2                                         ;
seg000:00B3                 mov     al, 0
seg000:00B5                 mov     dx, 10Ch
seg000:00B8                 out     dx, al          ; DISABLE MHFU (0x00 => port 10C) // Set scroll latch LSB ' s to 00
seg000:00B8                                         ;
seg000:00B9                 mov     word ptr es:6000h, 76h ; 'v'
seg000:00C0                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:00C0                                         ;
seg000:00C2                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:00C2                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:00C2                                         ;
seg000:00C4                 mov     cx, 4000h       ; DELAY LOOP - wait for Z80?
seg000:00C4                                         ;
seg000:00C7
seg000:00C7 loc_C7:                                 ; CODE XREF: sub_84+44j
seg000:00C7                 nop
seg000:00C8                 loop    loc_C7
seg000:00CA                 mov     dl, 4
seg000:00CC                 mov     si, 816Fh       ; [RBHIGH.16K] 816f: 02 12 83 1f 89
seg000:00CC                                         ;                    8312 "16 - "
seg000:00CC                                         ;                    891f "Interrupts Off"
seg000:00CC                                         ;
seg000:00CC                                         ; Either a software bug or a hardware problem (then FATAL).
seg000:00CC                                         ;
seg000:00CF                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:00CF                                         ;
seg000:00D1                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:00D1                                         ;
seg000:00D3                 call    EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:00D6                 jmp     RAINBOW100_LOGO__loc_33D ; STARTUP ?
seg000:00D9 ; ---------------------------------------------------------------------------
seg000:00D9
seg000:00D9 NO_MHFU__loc_D9:                        ; CODE XREF: sub_84:loc_AAj
seg000:00D9                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER - PAGE 153  ( *** READ **** )
seg000:00D9                                         ;      See TABLE 4-29 and 4-15
seg000:00DB
seg000:00DB loc_DB:                                 ; DATA XREF: SETUP_IRQ_TABLE_DH__sub_1B88+55r
seg000:00DB                 test    al, 1           ;  ZRESET L (represents the state of bit 0 of the 8088 diagnostic write register)
seg000:00DD                 jnz     short ERROR_INTERRUPTS_OFF__loc_10C
seg000:00DF                 mov     word ptr es:2, 0
seg000:00E6                 mov     al, 0A0h ; 'á'  ; LSB : 0000 - MSB : 1010; Bit 5 + 7 SET
seg000:00E6                                         ;
seg000:00E8                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:00E8                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:00E8                                         ; ----------------------------------------------------
seg000:00E8                                         ;
seg000:00EA                 mov     al, 0           ; 00 => reset scroll region to default:
seg000:00EA                                         ;       first line starts at scan row 0;
seg000:00EA                                         ;       last line terminates at scan row 9 (all visible).
seg000:00EA                                         ;
seg000:00EA                                         ; - SEE PAGE 14 + 15 OF PC 100 SYSTEM SPECIFICATION -
seg000:00EA                                         ;
seg000:00EC                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:00EC                                         ;
seg000:00EE                 mov     cx, 4000h
seg000:00F1
seg000:00F1 COUNT_LOOP1_Z80__loc_F1:                ; CODE XREF: sub_84+73j
seg000:00F1                 nop                     ; COUNT / DELAY / WAIT FOR Z80 ?
seg000:00F2                 inc     word ptr es:2
seg000:00F7                 loop    COUNT_LOOP1_Z80__loc_F1
seg000:00F9
seg000:00F9 OUTER_LOOP__loc_F9:                     ; CODE XREF: sub_84+B1j
seg000:00F9                 cli
seg000:00FA                 mov     al, 0
seg000:00FC                 mov     dx, 10Ch
seg000:00FF                 out     dx, al          ; DISABLE MHFU (0x00 => port 10C) // Set scroll latch LSB ' s to 00
seg000:00FF                                         ;
seg000:0100                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:0102                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0102                                         ;
seg000:0104                 mov     dl, 84h ; 'ä'
seg000:0106                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER - PAGE 153  ( *** READ **** )
seg000:0106                                         ;      See TABLE 4-29 and 4-15
seg000:0108                 test    al, 4           ; W14  MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:010A                 jnz     short S_ELFTEST__loc_152
seg000:010C
seg000:010C ERROR_INTERRUPTS_OFF__loc_10C:          ; CODE XREF: sub_84+59j
seg000:010C                                         ; sub_84+A8j
seg000:010C                 cli
seg000:010D                 mov     al, 0
seg000:010F                 mov     dx, 10Ch
seg000:0112                 out     dx, al          ; DISABLE MHFU (0x00 => port 10C) // Set scroll latch LSB ' s to 00
seg000:0112                                         ;
seg000:0113                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:0115                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0115                                         ;
seg000:0117                 mov     dl, 82h ; 'é'
seg000:0119                 mov     si, 816Fh       ; [RBHIGH.16K]
seg000:0119                                         ; 816f: 02 12 83 1f 89
seg000:0119                                         ;         8312 "16 - "
seg000:0119                                         ;         891f "Interrupts Off"
seg000:0119                                         ;
seg000:0119                                         ; Either a software bug or a hardware problem (then FATAL).
seg000:011C                 jmp     EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:011F ; ---------------------------------------------------------------------------
seg000:011F
seg000:011F _loc_11F:                               ; CODE XREF: sub_84:loc_B0j
seg000:011F                 mov     al, 0
seg000:0121                 mov     dx, 10Ch
seg000:0124                 out     dx, al          ; DISABLE MHFU (0x00 => port 10C) // Set scroll latch LSB ' s to 00
seg000:0124                                         ;
seg000:0125                 cmp     word ptr es:2, 1900h
seg000:012C                 jl      short ERROR_INTERRUPTS_OFF__loc_10C ;
seg000:012C                                         ;
seg000:012E                 cmp     word ptr es:2, 2100h
seg000:0135                 jg      short OUTER_LOOP__loc_F9 ;
seg000:0135                                         ;
seg000:0137                 mov     word ptr es:6000h, 76h ; 'v'
seg000:013E                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:013E                                         ;
seg000:0140                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0140                                         ;
seg000:0142                 mov     cx, 4000h
seg000:0145
seg000:0145 COUNT_LOOP2_Z80__loc_145:               ; CODE XREF: sub_84+C2j
seg000:0145                 nop                     ; DELAY / WAIT FOR Z80 ?
seg000:0146                 loop    COUNT_LOOP2_Z80__loc_145 ;
seg000:0146                                         ;
seg000:0148                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:014A                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:014A                                         ;
seg000:014C                 mov     dl, 80h ; 'Ç'
seg000:014E                 jmp     short S_ELFTEST__loc_152
seg000:0150 ; ---------------------------------------------------------------------------
seg000:0150
seg000:0150 SHORT_SELFTEST__loc_150:                ; CODE XREF: j_SHORT_SELFTEST__loc_150j
seg000:0150                 mov     dl, 0           ; SELF TEST (dl = 0  seems to be the short, initial one)
seg000:0152
seg000:0152 S_ELFTEST__loc_152:                     ; CODE XREF: j_S_ELFTEST__loc_152j
seg000:0152                                         ; sub_84+86j sub_84+CAj
seg000:0152                                         ; sub_84+3BEj
seg000:0152                 in      al, 103         ; * Reads port $67.
seg000:0152                                         ; * SETS port 10C to 00.
seg000:0152                                         ; * Blanks screen.
seg000:0152                                         ; * SETS and GETS diagnostic register $0a.
seg000:0152                                         ;
seg000:0152                                         ; * Branches depending on test jumpers
seg000:0152                                         ;   W13, W14 and W15.
seg000:0154                 mov     cx, dx
seg000:0156                 cli
seg000:0157                 mov     al, 0
seg000:0159                 mov     dx, 10Ch
seg000:015C                 out     dx, al          ; DISABLE MHFU (0x00 => port 10C) // Set scroll latch LSB ' s to 00
seg000:015C                                         ;
seg000:015D                 mov     dx, cx
seg000:015F                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:015F                                         ;
seg000:0161                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0161                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0163                 mov     ax, 0EE00h
seg000:0166                 mov     ss, ax
seg000:0168                 mov     sp, 1FF7h
seg000:016B                 mov     ax, 0
seg000:016E
seg000:016E loc_16E:
seg000:016E                 mov     ds, ax
seg000:0170                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER - PAGE 153  ( *** READ **** )
seg000:0170                                         ;      See table 4-29 and 4-15
seg000:0170                                         ;
seg000:0172                 test    al, 8           ; BITS 1-3 represent the state of W13, W14 and W15 MANUFACTURING TEST JUMPERS (normally high = 1)
seg000:0174                 jnz     short ALL_LEDs_ON__loc_181
seg000:0176                 test    al, 2
seg000:0178                 jnz     short ALL_LEDs_ON__loc_181
seg000:017A                 test    al, 4
seg000:017C                 jnz     short ALL_LEDs_ON__loc_181 ;
seg000:017C                                         ;
seg000:017E                 jmp     RAINBOW100_LOGO__loc_33D
seg000:0181 ; ---------------------------------------------------------------------------
seg000:0181
seg000:0181 ALL_LEDs_ON__loc_181:                   ; CODE XREF: sub_84+F0j
seg000:0181                                         ; sub_84+F4j sub_84+F8j
seg000:0181                 mov     ax, 0F400h
seg000:0184                 mov     ds, ax
seg000:0186                 assume ds:nothing
seg000:0186                 mov     bx, 0
seg000:0189                 mov     bp, 3FFEh
seg000:018C                 mov     al, 0Fh         ; LSB : 1111 - MSB : 0000 - ALL LEDs _ON_
seg000:018C                                         ;
seg000:018E                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:018E                                         ;      Shown in paragraphs 4-31 / bits in 4-17 (page 155).
seg000:018E                                         ;      Used to set / write MODEM (SERIAL) + DIAGNOSTIC LEDs.
seg000:0190                 jmp     CRC_CHECK0__loc_2A1 ; CRC check
seg000:0190 sub_84          endp
seg000:0190
seg000:0193 ; ---------------------------------------------------------------------------
seg000:0193                 jmp     loc_960
seg000:0196
seg000:0196 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0196
seg000:0196
seg000:0196                 public ACTIVATE_Z80_STI__sub_196
seg000:0196 ACTIVATE_Z80_STI__sub_196 proc near     ; CODE XREF: seg000:1150p
seg000:0196                                         ; seg000:12F1p
seg000:0196                                         ; seg000:1317p
seg000:0196                 sti
seg000:0196 ACTIVATE_Z80_STI__sub_196 endp
seg000:0196
seg000:0197
seg000:0197 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0197
seg000:0197
seg000:0197 CPU_DELAY2_n_CLI__sub_197 proc near     ; CODE XREF: seg000:0F9Fp
seg000:0197                                         ; seg000:10DCp
seg000:0197                                         ; seg000:11F3p
seg000:0197                                         ; sub_84+160Fp
seg000:0197                 call    CPU_DELAY1__sub_72C ;
seg000:0197                                         ; CALLS HARD CODED CPU DELAY
seg000:0197                                         ;
seg000:019A                 or      dl, 10h
seg000:019D                 cli
seg000:019E                 retn
seg000:019E CPU_DELAY2_n_CLI__sub_197 endp
seg000:019E
seg000:019F
seg000:019F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:019F
seg000:019F
seg000:019F                 public EMIT_SETUP_STRING__sub_19F
seg000:019F EMIT_SETUP_STRING__sub_19F proc near    ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+Fp
seg000:019F                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+17p
seg000:019F                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+1Dp
seg000:019F                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+21p
seg000:019F                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+27p
seg000:019F                                         ; sub_84+2FBp sub_84+326p
seg000:019F                                         ; sub_84+3F8p sub_69D+26p
seg000:019F                                         ; seg000:BOOTSELECTOR__loc_71Cp
seg000:019F                                         ; seg000:0725p sub_84+94Cp
seg000:019F                                         ; seg000:0A95p
seg000:019F                                         ; NORMAL_SCRN_80_132SWITCH__sub_ABC+Ep
seg000:019F                                         ; NORMAL_SCRN_80_132SWITCH__sub_ABC+14p
seg000:019F                                         ; NORMAL_SCRN_80_132SWITCH__sub_ABC+1Ap
seg000:019F                                         ; seg000:0DB5p
seg000:019F                                         ; seg000:0DBBp
seg000:019F                                         ; seg000:0DC1p
seg000:019F                                         ; seg000:0DC7p
seg000:019F                                         ; seg000:0E40p
seg000:019F                                         ; seg000:0E46p
seg000:019F                                         ; seg000:0E4Cp
seg000:019F                 push    cx
seg000:01A0                 push    dx
seg000:01A1                 call    DISABLE_MHFU__sub_73A
seg000:01A4                 test    dl, 20h
seg000:01A7                 jnz     short loc_1C1   ;
seg000:01A7                                         ;
seg000:01A9                 call    sub_D72
seg000:01AC                 call    ES_ed00__DS_ee00__sub_744
seg000:01AF                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:01AF                                         ;
seg000:01B1                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:01B1                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:01B3                 mov     ds:1EE6h, al
seg000:01B6                 call    j_NVM_READ_n_CHECK__sub_3D62 ; write protect NVM; make it readable; check CRC and reset to default if necessary
seg000:01B9                 xor     dh, dh
seg000:01BB                 call    sub_1D78        ; invokes RAM TEST (among other things)
seg000:01BE                 call    sub_D87
seg000:01C1
seg000:01C1 loc_1C1:                                ; CODE XREF: EMIT_SETUP_STRING__sub_19F+8j
seg000:01C1                 mov     ax, cx
seg000:01C3                 mov     ds, ax
seg000:01C5                 assume ds:nothing
seg000:01C5                 mov     ax, 0ED00h
seg000:01C8                 mov     es, ax
seg000:01CA                 assume es:nothing
seg000:01CA                 mov     ax, 0
seg000:01CD                 mov     al, [si]
seg000:01CF                 inc     si
seg000:01D0
seg000:01D0 OUTER_LOOP__loc_1D0:                    ; CODE XREF: EMIT_SETUP_STRING__sub_19F+6Ej
seg000:01D0                 push    ax              ; *** START OF OUTER LOOP ***
seg000:01D1                 push    si
seg000:01D2                 mov     ax, [si]
seg000:01D4                 mov     si, ax
seg000:01D6                 cmp     ax, cs:804Eh    ; 8615 / 8616 : "Press SELECT to choose keyboard..." (English) / magic value stored in RBHIGH.16K
seg000:01DB                 jle     short inner_loop___loc_1E5 ; If lower, it is a null terminated list of pointers (to strings)
seg000:01DB                                         ;
seg000:01DD                 mov     cx, es:0ACh     ; Otherwise, AX contains a string reference, for example $89e7 : "See Owners Manual - MESSAGE ..."
seg000:01E2                 call    sub_7CA
seg000:01E5
seg000:01E5 inner_loop___loc_1E5:                   ; CODE XREF: EMIT_SETUP_STRING__sub_19F+3Cj
seg000:01E5                                         ; EMIT_SETUP_STRING__sub_19F+66j
seg000:01E5                 cld
seg000:01E6                 lodsb
seg000:01E7                 cmp     al, 0
seg000:01E9                 jz      short loc_207   ;
seg000:01E9                                         ;
seg000:01EB                 call    sub_D72
seg000:01EE                 push    ax
seg000:01EF                 call    ES_ed00__DS_ee00__sub_744
seg000:01F2                 or      byte ptr es:88h, 1 ; 0x88 :EMULATION (0=VT52 1=ANSI) => ANSI
seg000:01F8                 and     byte ptr es:8Eh, 0FEh ; 0x8e NEW LINE MODE (0=LF 1=NL) => Return = CR only
seg000:01FE                 pop     ax
seg000:01FF                 call    near ptr 8003h  ; Emit SINGLE ESCAPE CODE in AL
seg000:0202                 call    sub_D87
seg000:0205                 jmp     short inner_loop___loc_1E5
seg000:0207 ; ---------------------------------------------------------------------------
seg000:0207
seg000:0207 loc_207:                                ; CODE XREF: EMIT_SETUP_STRING__sub_19F+4Aj
seg000:0207                 pop     si
seg000:0208                 inc     si
seg000:0209                 inc     si
seg000:020A                 pop     ax
seg000:020B                 dec     al
seg000:020D                 jnz     short OUTER_LOOP__loc_1D0 ; *** END OF OUTER LOOP ***
seg000:020F                 pop     dx
seg000:0210                 pop     cx
seg000:0211                 or      dl, 20h
seg000:0214                 retn
seg000:0214 EMIT_SETUP_STRING__sub_19F endp
seg000:0214
seg000:0215
seg000:0215 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0215
seg000:0215
seg000:0215 EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215 proc near
seg000:0215                                         ; CODE XREF: SYS_MESSAGE_SIT_n_WAIT__sub_9j
seg000:0215                                         ; sub_84+4Fp sub_84+98j
seg000:0215                                         ; sub_84+2ADp
seg000:0215                                         ; sub_69D:loc_6CCp
seg000:0215                                         ; sub_84+7B2p sub_84+84Fp
seg000:0215                                         ; SYSLOAD_ERR__sub_956+6p
seg000:0215                 call    DISABLE_MHFU__sub_73A ; Code here / below is invoked after 'TESTING...'
seg000:0218                 mov     cx, 0F400h
seg000:021B                 push    si              ; Save string => SI
seg000:021B                                         ;
seg000:021C                 test    dl, 2           ; Bit 1 (value 2) should not be set, this would indicate a FATAL error.
seg000:021F                 jz      short loc_229   ; JZ : NO ERROR
seg000:021F                                         ;
seg000:0221                 mov     si, 81ECh       ; [RBHIGH.16K]  01 E7 89 "See Owner's Manual"
seg000:0224                 call    EMIT_SETUP_STRING__sub_19F
seg000:0227                 jmp     short loc_235
seg000:0229 ; ---------------------------------------------------------------------------
seg000:0229
seg000:0229 loc_229:                                ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+Aj
seg000:0229                 mov     si, 81EFh       ; [RBHIGH.16K]  01 34 82
seg000:0229                                         ;                  8234: "ESC[1;5;7m"
seg000:022C                 call    EMIT_SETUP_STRING__sub_19F
seg000:022F                 mov     si, 81ECh       ; [RBHIGH.16K]  01 E7 89 "See Owner's Manual"
seg000:0232                 call    EMIT_SETUP_STRING__sub_19F
seg000:0235
seg000:0235 loc_235:                                ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+12j
seg000:0235                 pop     si
seg000:0236                 call    EMIT_SETUP_STRING__sub_19F
seg000:0239                 mov     si, 81F2h       ; [RBHIGH.16K] 8275 : "ESC[0m"
seg000:023C                 call    EMIT_SETUP_STRING__sub_19F
seg000:023F                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:023F                                         ;
seg000:0241                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0241                                         ; ----------------------------------------------------------------
seg000:0243                 mov     ax, 0
seg000:0246                 mov     ds, ax
seg000:0248                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER - PAGE 153  ( *** READ **** )
seg000:0248                                         ;
seg000:024A                 test    byte ptr ds:loc_4FE+4, 1 ; test byte ptr[502h],1
seg000:024F                 jz      short DONTCARE_loc_255
seg000:0251                 test    al, 8           ; BIT 3 [0A] : state of jumper W14
seg000:0253                 jz      short LUCKY__loc_280
seg000:0255
seg000:0255 DONTCARE_loc_255:                       ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+3Aj
seg000:0255                 test    al, 4           ; BIT 2 [0A] : state of jumper W13
seg000:0257                 jz      short UNLUCKY__loc_25E
seg000:0259                 test    dl, 2
seg000:025C                 jz      short LUCKY__loc_280
seg000:025E
seg000:025E UNLUCKY__loc_25E:                       ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+42j
seg000:025E                 mov     dh, 0FFh
seg000:0260                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:0263                 mov     bx, 2
seg000:0266                 mov     ax, 0A7h ; 'º'  ; LK_CMD_SOUND_BELL       0xa7   ?
seg000:0269                 call    DELAY_n_SEND_AL_KBD__loc_683
seg000:026C
seg000:026C DEAD_END__loc_26C:                      ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+69j
seg000:026C                 mov     bx, 1
seg000:026F                 mov     ax, 8F13h       ; ALL LEDs ON ?
seg000:0272                 call    DELAY_n_SEND_AL_KBD__loc_683
seg000:0275                 mov     bx, 1
seg000:0278                 mov     ax, 8F11h       ; ALL LEDs OFF ?
seg000:027B                 call    DELAY_n_SEND_AL_KBD__loc_683
seg000:027E                 jmp     short DEAD_END__loc_26C ; (LOOP TO loc_26c).
seg000:0280 ; ---------------------------------------------------------------------------
seg000:0280
seg000:0280 LUCKY__loc_280:                         ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+3Ej
seg000:0280                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+47j
seg000:0280                 and     dl, 0F7h
seg000:0283                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:0286                 retn
seg000:0286 EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215 endp
seg000:0286
seg000:0287
seg000:0287 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0287
seg000:0287
seg000:0287 sub_287         proc near               ; CODE XREF: LOAD_AX_CX_to_Z80__sub_1339+7p
seg000:0287                 push    es
seg000:0288                 push    ds
seg000:0289                 mov     ax, 200h
seg000:028C                 mov     es, ax
seg000:028E                 assume es:nothing
seg000:028E                 mov     ax, 0
seg000:0291                 mov     ds, ax
seg000:0293                 mov     si, word ptr ds:loc_4FE+2
seg000:0297                 mov     di, es:75DCh
seg000:029C                 pop     ds
seg000:029D                 rep movsw
seg000:029F                 pop     es
seg000:02A0                 assume es:nothing
seg000:02A0                 retn
seg000:02A0 sub_287         endp
seg000:02A0
seg000:02A1 ; ---------------------------------------------------------------------------
seg000:02A1 ; START OF FUNCTION CHUNK FOR sub_84
seg000:02A1
seg000:02A1 CRC_CHECK0__loc_2A1:                    ; CODE XREF: sub_84+10Cj
seg000:02A1                                         ; sub_C6D+30j
seg000:02A1                 xor     dh, dh          ;
seg000:02A1                                         ; CRC CHECK routine (also called from jump table: sub_F)
seg000:02A3
seg000:02A3 CRC_CHECK1__loc_2A3:                    ; CODE XREF: j_CRC_CHECK1__loc_2A3j
seg000:02A3                 xor     ax, ax
seg000:02A5                 mov     si, dx
seg000:02A7                 xor     dx, dx
seg000:02A9                 xor     di, di
seg000:02AB                 xor     cx, cx
seg000:02AD
seg000:02AD LOOP__loc_2AD:                          ; CODE XREF: sub_84+26Cj
seg000:02AD                                         ; sub_84+298j
seg000:02AD                 mov     al, [bx+di]     ;
seg000:02AD                                         ; LOOP ENTRY (2 x)
seg000:02AD                                         ;
seg000:02AF                 test    si, 100h        ; DATA XREF: seg000:loc_3605r
seg000:02B3                 jz      short loc_2B7
seg000:02B5                 and     al, 0Fh
seg000:02B7
seg000:02B7 loc_2B7:                                ; CODE XREF: sub_84+22Fj
seg000:02B7                 xor     al, dl
seg000:02B9                 mov     cl, al
seg000:02BB                 jp      short loc_2E1
seg000:02BD                 mov     al, dh
seg000:02BF                 xor     al, 1
seg000:02C1                 mov     dl, al
seg000:02C3                 mov     al, cl
seg000:02C5                 rcr     al, 1
seg000:02C7                 xor     al, cl
seg000:02C9                 rcr     al, 1
seg000:02CB                 xor     al, 0C0h
seg000:02CD
seg000:02CD loc_2CD:                                ; CODE XREF: sub_84+267j
seg000:02CD                 mov     dh, al
seg000:02CF                 mov     al, cl
seg000:02D1                 rcl     al, 1
seg000:02D3                 xor     al, cl
seg000:02D5                 ror     al, 1
seg000:02D7                 ror     al, 1
seg000:02D9                 and     al, 0C0h
seg000:02DB                 xor     al, dl
seg000:02DD                 mov     dl, al
seg000:02DF                 jmp     short loc_2ED
seg000:02E1 ; ---------------------------------------------------------------------------
seg000:02E1
seg000:02E1 loc_2E1:                                ; CODE XREF: sub_84+237j
seg000:02E1                 mov     dl, dh
seg000:02E3                 rcr     al, 1
seg000:02E5                 xor     al, cl
seg000:02E7                 rcr     al, 1
seg000:02E9                 or      al, al
seg000:02EB                 jmp     short loc_2CD
seg000:02ED ; ---------------------------------------------------------------------------
seg000:02ED
seg000:02ED loc_2ED:                                ; CODE XREF: sub_84+25Bj
seg000:02ED                 inc     bx
seg000:02EE                 cmp     bx, bp
seg000:02F0                 jnz     short LOOP__loc_2AD ; jump to start of loop.
seg000:02F0                                         ;
seg000:02F2                 test    si, 40h
seg000:02F6                 jnz     short VIDEO_FATAL__loc_339 ; "1 - Main Board [video]" [FATAL]
seg000:02F8                 test    si, 100h
seg000:02FC                 jnz     short locret_33C ; return
seg000:02FC                                         ;
seg000:02FE                 mov     ax, [bx+di]
seg000:0300                 cmp     ax, dx          ; AX = 88 1B (CRC stored @ ROM OFFSET $3ffe as 1B 88)
seg000:0300                                         ; DX = ?? ?? (CRC calculated here)
seg000:0300                                         ;
seg000:0302                 jnz     short loc_31E   ; jump to 31E means CRC ERROR @ ROM 0
seg000:0304                 cmp     ch, 0
seg000:0307                 jnz     short loc_30D
seg000:0309                 mov     al, 1Fh         ; LSB : 1111 - MSB : 0001 - LED D3 OFF (LED #7 ON BACK OFF)
seg000:0309                                         ; = "31 MAIN BOARD [CRC Rom1] / FATAL"
seg000:0309                                         ;
seg000:030B                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:030B                                         ;      Shown in paragraphs 4-31 / bits in 4-17 (page 155).
seg000:030B                                         ;      Used to set / write MODEM (SERIAL) + DIAGNOSTIC LEDs.
seg000:030D
seg000:030D loc_30D:                                ; CODE XREF: sub_84+283j
seg000:030D                 xor     bx, bx
seg000:030F                 add     di, 8000h
seg000:0313                 inc     ch
seg000:0315                 cmp     ch, 2
seg000:0318                 jz      short loc_334   ; continue with other things (OPTION BOARDS, VIDEO...)
seg000:0318                                         ;
seg000:031A                 xor     dx, dx
seg000:031C                 jmp     short LOOP__loc_2AD ; jump to start of loop.
seg000:031E ; ---------------------------------------------------------------------------
seg000:031E
seg000:031E loc_31E:                                ; CODE XREF: sub_84+27Ej
seg000:031E                 mov     dx, si
seg000:0320                 cmp     ch, 0
seg000:0323                 jnz     short loc_32B
seg000:0325                 mov     si, 81F5h       ; 02 66 83-42 8A
seg000:0325                                         ;    8366 : "30 - "
seg000:0325                                         ;    8a42 : "Main Board"
seg000:0325                                         ;
seg000:0325                                         ; [rom crc ROM 0] /  [FATAL]
seg000:0328                 jmp     loc_32E
seg000:032B ; ---------------------------------------------------------------------------
seg000:032B
seg000:032B loc_32B:                                ; CODE XREF: sub_84+29Fj
seg000:032B                 mov     si, 81FAh       ; 02 6C-83 42 8A
seg000:032B                                         ;    836c : "31 - "
seg000:032B                                         ;    8a42 : "Main Board"
seg000:032B                                         ;
seg000:032B                                         ; [rom crc ROM 1] /  [FATAL]
seg000:032E
seg000:032E loc_32E:                                ; CODE XREF: sub_84+2A4j
seg000:032E                 or      dl, 2
seg000:0331                 call    EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:0334
seg000:0334 loc_334:                                ; CODE XREF: sub_84+294j
seg000:0334                 mov     dx, si
seg000:0336                 jmp     loc_960         ; Reset OPTION BOARDS ...
seg000:0339 ; ---------------------------------------------------------------------------
seg000:0339
seg000:0339 VIDEO_FATAL__loc_339:                   ; CODE XREF: sub_84+272j
seg000:0339                 jmp     MainBoard_VIDEO_FATAL__loc_CA0 ; "1 - Main Board [video]" [FATAL]
seg000:033C ; ---------------------------------------------------------------------------
seg000:033C
seg000:033C locret_33C:                             ; CODE XREF: sub_84+278j
seg000:033C                 retn
seg000:033D ; ---------------------------------------------------------------------------
seg000:033D
seg000:033D RAINBOW100_LOGO__loc_33D:               ; CODE XREF: sub_84+52j
seg000:033D                                         ; sub_84+FAj sub_503+159j
seg000:033D                                         ; sub_84+857j
seg000:033D                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+2B9j
seg000:033D                                         ; sub_84+1666j
seg000:033D                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:033D                                         ;
seg000:033F                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:033F                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:0341                 call    ES_ed00__DS_ee00__sub_744
seg000:0344                 or      dh, 1
seg000:0347                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:034A                 mov     word ptr ds:loc_1FF8+1, 10h
seg000:0350                 test    dl, 4
seg000:0353                 jz      short loc_35A   ;
seg000:0353                                         ;
seg000:0355                 mov     byte ptr ds:loc_1FF8+2, 0FFh
seg000:035A
seg000:035A loc_35A:                                ; CODE XREF: sub_84+2CFj
seg000:035A                 call    near ptr 8018h  ; FC018 = RBHIGH.16K :
seg000:035A                                         ; 000027A0: 06                           push   es
seg000:035A                                         ; 000027A1: 1E                           push   ds
seg000:035A                                         ; 000027A2: 07                           pop    es
seg000:035A                                         ; 000027A3: B95B00                       mov    cx,0005B
seg000:035A                                         ; 000027A6: B000                         mov    al,000
seg000:035A                                         ; 000027A8: BF5A0F                       mov    di,00F5A
seg000:035A                                         ; 000027AB: FC                           cld
seg000:035A                                         ; 000027AC: F3AA                         repe   stosb
seg000:035A                                         ; 000027AE: 07                           pop    es
seg000:035A                                         ; 000027AF: E89658                       call   F4048  ( sub_36DC in BOOT ROM )
seg000:035A                                         ; = HOUSEKEEPING_DS_KBD_or_CON__sub_36DC
seg000:035A                                         ; 000027B2: C3                           retn
seg000:035D                 sti
seg000:035E
seg000:035E WAIT_FOR_BIT3__loc_35E:                 ; CODE XREF: sub_84+2DFj
seg000:035E                 test    byte ptr ds:loc_1FF8+1, 8 ; EE00:1ff9 / efff9
seg000:0363                 jz      short WAIT_FOR_BIT3__loc_35E ; Wait for bit 3 (value 8) to appear
seg000:0363                                         ;
seg000:0365                 and     byte ptr ds:loc_1FF8+1, 0EFh ; 11101111 - mask out bit 4
seg000:036A                 mov     cx, 0F400h
seg000:036D                 test    byte ptr es:loc_86, 1 ; 80 / 132 column mode ?
seg000:0373                 jnz     short ONLY_LOGO_132COLS__loc_3A0 ;
seg000:0373                                         ;
seg000:0375                 mov     si, 80D1h       ; Only the logo (reused by keyboard selection)!
seg000:0375                                         ; ----------------------------------------
seg000:0375                                         ;           digital
seg000:0375                                         ;         Rainbow 100
seg000:0375                                         ;   / 80 columns version
seg000:0375                                         ; ----------------------------------------
seg000:0375                                         ; [RBHIGH.16K]
seg000:0375                                         ; 80d1 : 02 ae 83 c0 83
seg000:0375                                         ;
seg000:0375                                         ;         83ae : ESC[0;15H
seg000:0375                                         ;         83c0 : ESC#3 "digital Rainbow 100"
seg000:0375                                         ;
seg000:0375                                         ; (until $8410)
seg000:0378                 test    byte ptr es:loc_9D, 1 ; 0x9D KEYBOARD (0=NOT SELECTED 1 = SELECTED)
seg000:037E                 pushf
seg000:037F                 call    EMIT_SETUP_STRING__sub_19F
seg000:0382                 popf
seg000:0383                 cli
seg000:0384                 jnz     short BOOT_SELECTOR_80__loc_389 ;
seg000:0384                                         ;
seg000:0386                 jmp     KEYB_SELECT0__loc_445
seg000:0389 ; ---------------------------------------------------------------------------
seg000:0389
seg000:0389 BOOT_SELECTOR_80__loc_389:              ; CODE XREF: sub_84+300j
seg000:0389                 mov     si, 80DBh       ; [RBHIGH.16K] :
seg000:0389                                         ; 80db : 02 12 84 c0 86
seg000:0389                                         ;         8412 : 0a 0a ESC [8C
seg000:0389                                         ;         86c0 : Version
seg000:038C                 call    BOOTSELECTOR__loc_71C ; DIGITAL EQUIPMENT CORPORATION 1983        ...(etc)...
seg000:038F                 jz      short loc_39D   ;
seg000:038F                                         ;
seg000:0391                 mov     bp, 112Eh
seg000:0394                 call    BOLD_ATTR__loc_70E
seg000:0397                 mov     bp, 12Fh
seg000:039A                 call    FX_VIDEORAM_0x19__loc_75E ; adds graphical character (0x019)
seg000:039D
seg000:039D loc_39D:                                ; CODE XREF: sub_84+30Bj
seg000:039D                 jmp     loc_3C8
seg000:03A0 ; ---------------------------------------------------------------------------
seg000:03A0
seg000:03A0 ONLY_LOGO_132COLS__loc_3A0:             ; CODE XREF: sub_84+2EFj
seg000:03A0                 mov     si, 80D6h       ; ----------------------------------------
seg000:03A0                                         ;           digital
seg000:03A0                                         ;         Rainbow 100
seg000:03A0                                         ;   / 132 columns version
seg000:03A0                                         ; ----------------------------------------
seg000:03A0                                         ; [RBHIGH.16K]
seg000:03A0                                         ; 80d6 : 02 b7 83 c0 83
seg000:03A0                                         ;         83b7 : ESC[0;28H
seg000:03A0                                         ;         83c0 : ESC#3 "digital Rainbow 100" (until $8410)
seg000:03A3                 test    byte ptr es:loc_9D, 1
seg000:03A9                 pushf
seg000:03AA                 call    EMIT_SETUP_STRING__sub_19F
seg000:03AD                 popf
seg000:03AE                 cli
seg000:03AF                 jnz     short BOOT_SELECTOR_132__loc_3B4 ;
seg000:03AF                                         ;
seg000:03B1                 jmp     KEYB_SELECT0__loc_445
seg000:03B4 ; ---------------------------------------------------------------------------
seg000:03B4
seg000:03B4 BOOT_SELECTOR_132__loc_3B4:             ; CODE XREF: sub_84+32Bj
seg000:03B4                 mov     si, 80E0h       ; [RBHIGH.16K]
seg000:03B4                                         ; 80e0 : 02 19 84 c0 86
seg000:03B4                                         ;
seg000:03B4                                         ;         8419 : 0a 0a ESC[21C
seg000:03B4                                         ;         86c0 : Version
seg000:03B4                                         ;
seg000:03B7                 call    BOOTSELECTOR__loc_71C ; DIGITAL EQUIPMENT CORPORATION 1983        ...(etc)...
seg000:03BA                 jz      short loc_3C8   ;
seg000:03BA                                         ;
seg000:03BC                 mov     bp, 113Bh
seg000:03BF                 call    BOLD_ATTR__loc_70E
seg000:03C2                 mov     bp, 13Ch
seg000:03C5                 call    FX_VIDEORAM_0x19__loc_75E ; adds graphical character (0x019)
seg000:03C8
seg000:03C8 loc_3C8:                                ; CODE XREF: sub_84:loc_39Dj
seg000:03C8                                         ; sub_84+336j
seg000:03C8                 or      dh, 1
seg000:03CB                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:03CB                                         ;
seg000:03CE                 call    ES_ed00__DS_ee00__sub_744 ; ES = ed00  /  DS = ee00
seg000:03D1                 call    j_NVM_READ_n_CHECK__sub_3D62 ; write protect NVM; make it readable; check CRC and reset to default if necessary
seg000:03D4                 test    dl, 4
seg000:03D7                 jnz     short SETUP__loc_3E4 ;
seg000:03D7                                         ;
seg000:03D9                 mov     al, byte ptr es:loc_AA+1
seg000:03DD                 and     al, 0Fh
seg000:03DF                 jz      short SETUP__loc_3E4 ;
seg000:03DF                                         ;
seg000:03E1                 jmp     loc_662
seg000:03E4 ; ---------------------------------------------------------------------------
seg000:03E4
seg000:03E4 SETUP__loc_3E4:                         ; CODE XREF: sub_84+353j
seg000:03E4                                         ; sub_84+35Bj sub_84+5E9j
seg000:03E4                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:03E4                                         ;
seg000:03E6                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:03E6                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:03E6                                         ;      Used during diagnostic testing to control and read the status of various system functions.
seg000:03E6                                         ;
seg000:03E8
seg000:03E8 WAITFORKEY__loc_3E8:                    ; CODE XREF: sub_84+36Bj
seg000:03E8                                         ; sub_84+37Cj sub_84+390j
seg000:03E8                                         ; sub_84+3A6j sub_84+3B0j
seg000:03E8                 call    ES_ed00__DS_ee00__sub_744
seg000:03EB                 sti
seg000:03EC                 call    near ptr 803Ch  ; ROM_ConsoleLev2In    0x02
seg000:03EC                                         ; char->AL; status->CL (00h= no char.avail./ FFh - character in AL)
seg000:03EC                                         ; ------------------------------
seg000:03EC                                         ; Wait for individual keypresses:
seg000:03EC                                         ; A B C D W S
seg000:03EC                                         ;   B C D W S T
seg000:03EC                                         ; See RBHIGH for the strings.
seg000:03EC                                         ; ------------------------------
seg000:03EC                                         ; BOOT SELECTOR A - D (W = Winchester, S = Self Test, T = Terminal Mode)
seg000:03EF                 jnb     short WAITFORKEY__loc_3E8 ;
seg000:03EF                                         ;
seg000:03F1                 or      al, 20h
seg000:03F3                 cmp     al, 77h ; 'w'
seg000:03F5                 jnz     short loc_3FA   ;
seg000:03F5                                         ;
seg000:03F7                 jmp     W_INCHESTER__loc_80E ; try to boot hard disc.
seg000:03FA ; ---------------------------------------------------------------------------
seg000:03FA
seg000:03FA loc_3FA:                                ; CODE XREF: sub_84+371j
seg000:03FA                 mov     bl, 61h ; 'a'
seg000:03FC                 mov     cl, 0
seg000:03FE
seg000:03FE loc_3FE:                                ; CODE XREF: sub_84+39Ej
seg000:03FE                 cmp     al, bl
seg000:0400                 jb      short WAITFORKEY__loc_3E8 ;
seg000:0400                                         ;
seg000:0402                 jnz     short loc_419
seg000:0404
seg000:0404 loc_404:                                ; CODE XREF: sub_84+5F9j
seg000:0404                 xor     ax, ax
seg000:0406                 mov     ds, ax
seg000:0408                 mov     ds:7FF6h, cl
seg000:040C                 call    DS_to_0000__sub_13CD
seg000:040F                 test    byte ptr ds:loc_4FE+4, 1
seg000:0414                 jnz     short WAITFORKEY__loc_3E8 ;
seg000:0414                                         ;
seg000:0416                 jmp     loc_1631
seg000:0419 ; ---------------------------------------------------------------------------
seg000:0419
seg000:0419 loc_419:                                ; CODE XREF: sub_84+37Ej
seg000:0419                 inc     cl
seg000:041B                 inc     bl
seg000:041D                 cmp     bl, 64h ; 'd'
seg000:0420                 jg      short loc_424   ; accept A-D
seg000:0420                                         ;
seg000:0422                 jmp     short loc_3FE
seg000:0424 ; ---------------------------------------------------------------------------
seg000:0424
seg000:0424 loc_424:                                ; CODE XREF: sub_84+39Cj
seg000:0424                 cmp     al, 73h ; 's'
seg000:0426                 jz      short S_ELFTEST__loc_440 ;
seg000:0426                                         ;
seg000:0428                 cmp     al, 74h ; 't'
seg000:042A                 jnz     short WAITFORKEY__loc_3E8 ;
seg000:042A                                         ;
seg000:042C                 call    DS_to_0000__sub_13CD
seg000:042F                 test    byte ptr ds:sub_503, 1 ; 1 = no terminal mode
seg000:0434                 jnz     short WAITFORKEY__loc_3E8 ;
seg000:0434                                         ;
seg000:0436                 call    ES_ed00__DS_ee00__sub_744
seg000:0439                 call    near ptr 8048h  ; this is only called ONCE (here). BELL + KEYCLICK VOLUME?
seg000:043C                 sti
seg000:043D                 jmp     TERMINAL_MODE__loc_37D0
seg000:0440 ; ---------------------------------------------------------------------------
seg000:0440
seg000:0440 S_ELFTEST__loc_440:                     ; CODE XREF: sub_84+3A2j
seg000:0440                 mov     dl, 1
seg000:0442                 jmp     S_ELFTEST__loc_152
seg000:0445 ; ---------------------------------------------------------------------------
seg000:0445
seg000:0445 KEYB_SELECT0__loc_445:                  ; CODE XREF: sub_84+302j
seg000:0445                                         ; sub_84+32Dj
seg000:0445                 push    dx
seg000:0446                 test    byte ptr es:loc_86, 1 ; 80 / 132 column mode ?
seg000:044C                 jnz     short loc_45D   ;
seg000:044C                                         ;
seg000:044E                 mov     bp, 112Eh
seg000:0451                 call    BOLD_ATTR__loc_70E
seg000:0454                 mov     bp, 12Fh
seg000:0457                 call    FX_VIDEORAM_0x19__loc_75E ; adds graphical character (0x019)
seg000:045A                 jmp     KEYB_SELECT__loc_469
seg000:045D ; ---------------------------------------------------------------------------
seg000:045D
seg000:045D loc_45D:                                ; CODE XREF: sub_84+3C8j
seg000:045D                 mov     bp, 113Bh
seg000:0460                 call    BOLD_ATTR__loc_70E
seg000:0463                 mov     bp, 13Ch
seg000:0466                 call    FX_VIDEORAM_0x19__loc_75E ; adds graphical character (0x019)
seg000:0469
seg000:0469 KEYB_SELECT__loc_469:                   ; CODE XREF: sub_84+3D6j
seg000:0469                 mov     cx, 0F400h
seg000:046C                 mov     dl, 20h ; ' '
seg000:046E                 mov     al, byte ptr es:loc_9D+1
seg000:0472                 push    ax
seg000:0473                 mov     byte ptr es:loc_9D+1, 0
seg000:0479                 mov     si, 8144h       ; United States/Canada
seg000:047C                 call    EMIT_SETUP_STRING__sub_19F
seg000:047F                 pop     ax
seg000:0480                 mov     byte ptr es:loc_9D+1, al
seg000:0484                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0484                                         ;
seg000:0486                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0486                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0488                 mov     cx, 2
seg000:048B                 mov     di, 489h
seg000:048E
seg000:048E OUTER_LOOP__loc_48E:                    ; CODE XREF: sub_84+417j
seg000:048E                 push    cx
seg000:048F                 mov     cx, 3
seg000:0492                 mov     si, 8054h       ; 0D 12 12 12-0C 0D 12 12-12 0C 0D 12 12 12 0C
seg000:0492                                         ; Upper part: 3 boxes
seg000:0492                                         ; 0D opens box, $12 is a horizontal line, 0C closes
seg000:0495
seg000:0495 INNER_LOOP__loc_495:                    ; CODE XREF: sub_84+414j
seg000:0495                 call    DIRECT_DISPLAY_ROMSTRING__loc_779 ; SET ES = ee00 / DS = f400
seg000:0498                 loop    INNER_LOOP__loc_495
seg000:049A                 pop     cx
seg000:049B                 loop    OUTER_LOOP__loc_48E ;
seg000:049B                                         ;
seg000:049D                 mov     cx, 3
seg000:04A0                 mov     si, 8084h       ; 20 20 20 20-20 0D 12 12-12 0C 20 20 20 20 20
seg000:04A0                                         ; Single box in middle - 0D opens, 0C closes
seg000:04A3
seg000:04A3 REPEAT_3x__loc_4A3:                     ; CODE XREF: sub_84+422j
seg000:04A3                 call    DIRECT_DISPLAY_ROMSTRING__loc_779
seg000:04A6                 loop    REPEAT_3x__loc_4A3 ;
seg000:04A6                                         ;
seg000:04A8                 mov     si, 8054h       ; 0D 12 12 12-0C 0D 12 12-12 0C 0D 12 12 12 0C
seg000:04A8                                         ; Upper part: 3 boxes : 0D opens, 0C closes
seg000:04AB                 call    DIRECT_DISPLAY_ROMSTRING__loc_779 ;
seg000:04AB                                         ;
seg000:04AE                 mov     si, 80B4h       ; 19 20 20 20-19 19 20 76-20 19 19 20 20 20 19
seg000:04AE                                         ; Vertical char.(0x19) "v" (0x76) and spaces
seg000:04B1                 call    DIRECT_DISPLAY_ROMSTRING__loc_779 ; middle part with _2_ boxes and V between
seg000:04B1                                         ;
seg000:04B4                 mov     si, 8074h       ; 0E 12 12 12-0B 0E 12 12-12 0B 0E 12 12 12 0B
seg000:04B4                                         ; Bottom part: 3 boxes - 0E opens, 0B closes
seg000:04B7                 call    DIRECT_DISPLAY_ROMSTRING__loc_779 ;
seg000:04B7                                         ;
seg000:04BA                 mov     al, 0Dh
seg000:04BC                 mov     di, 161Eh       ; offset into video ram
seg000:04BF                 mov     cx, 3
seg000:04C2
seg000:04C2 LOOP__loc_4C2:                          ; CODE XREF: sub_84+447j
seg000:04C2                 push    cx
seg000:04C3                 call    loc_7A4
seg000:04C6                 add     di, 82h ; 'é'   ; +130
seg000:04CA                 pop     cx
seg000:04CB                 loop    LOOP__loc_4C2   ; repeat
seg000:04CB                                         ;
seg000:04CD                 mov     al, 0Bh
seg000:04CF                 mov     di, 17B8h       ; offset into video ram
seg000:04D2                 call    loc_7A4
seg000:04D5                 mov     di, 183Fh
seg000:04D8                 mov     cx, 5
seg000:04DB
seg000:04DB LOOP__loc_4DB:                          ; CODE XREF: sub_84+45Ej
seg000:04DB                 call    loc_7A4
seg000:04DE                 add     di, 82h ; 'é'   ; +130
seg000:04E2                 loop    LOOP__loc_4DB
seg000:04E4                 mov     al, 0Dh
seg000:04E6                 mov     di, cs:8391h
seg000:04EB                 mov     cl, 16h
seg000:04ED
seg000:04ED loc_4ED:                                ; CODE XREF: sub_84+46Aj
seg000:04ED                 stosb
seg000:04EE                 loop    loc_4ED
seg000:04F0                 call    ES_ed00__DS_ee00__sub_744
seg000:04F3                 or      dh, 1
seg000:04F6                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:04F9                 mov     bl, cs:8393h
seg000:04F9 ; END OF FUNCTION CHUNK FOR sub_84
seg000:04FE
seg000:04FE loc_4FE:                                ; DATA XREF: sub_287+Cr
seg000:04FE                                         ; seg000:112Aw sub_1320+7w
seg000:04FE                                         ; SET_and_RESET_Z80__sub_13F4+13w
seg000:04FE                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+122w
seg000:04FE                                         ; sub_84+15CAw
seg000:04FE                                         ; sub_84:loc_93w
seg000:04FE                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+35r
seg000:04FE                                         ; sub_84+38Br seg000:10EAw
seg000:04FE                                         ; seg000:127Cw
seg000:04FE                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+93w
seg000:04FE                 mov     di, cs:8391h
seg000:0503
seg000:0503 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0503
seg000:0503
seg000:0503 sub_503         proc near               ; DATA XREF: sub_84:loc_98w
seg000:0503                                         ; sub_84+3ABr sub_69D+Br
seg000:0503                                         ; seg000:0A2Aw
seg000:0503                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+3w
seg000:0503                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+2Dr
seg000:0503                                         ; TEST_PRN__sub_1718+22w
seg000:0503                                         ; TEST_COMM___sub_195A+3Aw
seg000:0503                                         ; NEXT_TEST_KBD__sub_19B2r
seg000:0503                 add     di, 1000h
seg000:0507                 sti
seg000:0508
seg000:0508 POLL_KEY_LOOP__loc_508:                 ; CODE XREF: sub_503:loc_50Fj
seg000:0508                                         ; sub_503+83j sub_503+8Fj
seg000:0508                                         ; sub_503+FFj
seg000:0508                                         ; sub_503:loc_65Fj
seg000:0508                 push    bx
seg000:0509                 push    di
seg000:050A                 call    near ptr 8012h  ; ConsoleLev1In__sub_1F6F
seg000:050A                                         ;
seg000:050A                                         ;  code -> AX (16 BIT !);
seg000:050A                                         ;  status->CL
seg000:050D                 pop     di
seg000:050E
seg000:050E loc_50E:                                ; DATA XREF: sub_84+5E2r
seg000:050E                                         ; sub_84+5F4w sub_69D+6w
seg000:050E                 pop     bx
seg000:050F
seg000:050F loc_50F:                                ; DATA XREF: ENABLE_WINCHESTER_IRQ__sub_919+Dw
seg000:050F                                         ; DISABLE_WINCHESTER_IRQ__sub_940+6r
seg000:050F                 jnb     short POLL_KEY_LOOP__loc_508
seg000:0511
seg000:0511 loc_511:                                ; DATA XREF: ENABLE_WINCHESTER_IRQ__sub_919+14w
seg000:0511                                         ; DISABLE_WINCHESTER_IRQ__sub_940+Dr
seg000:0511                 cmp     ax, 1A9h        ; DOWN (as a 16 bit character from keyboard)
seg000:0514
seg000:0514 loc_514:                                ; DATA XREF: sub_84+79Cw
seg000:0514                                         ; WINCH_IRQ_COMPLETE__sub_8DE+Cr
seg000:0514                                         ; WINCH_IRQ_COMPLETE__sub_8DE+13r
seg000:0514                                         ; WINCH_IRQ_COMPLETE__sub_8DE:OK_loc_900w
seg000:0514                                         ; seg000:090Fw
seg000:0514                 jnz     short loc_588   ;
seg000:0514                                         ;
seg000:0516                 cmp     bx, 1
seg000:0519                 jz      short loc_588   ;
seg000:0519                                         ;
seg000:051B                 mov     cx, 16h
seg000:051E                 mov     al, 0Eh
seg000:0520
seg000:0520 loc_520:                                ; CODE XREF: sub_503+1Ej
seg000:0520                 stosb
seg000:0521                 loop    loc_520
seg000:0523                 dec     bl
seg000:0525                 cmp     bl, cs:8393h
seg000:052A                 jz      short loc_569   ;
seg000:052A                                         ;
seg000:052C                 call    sub_D72
seg000:052F                 call    sub_7AE
seg000:0532                 mov     cx, 0F400h
seg000:0535                 mov     ds, cx
seg000:0537                 assume ds:nothing
seg000:0537                 mov     cx, [si]
seg000:0539                 mov     si, cs:8051h
seg000:053E                 call    sub_7CA
seg000:0541                 mov     cx, 0
seg000:0544                 lodsb
seg000:0545                 mov     cl, al
seg000:0547                 lodsw
seg000:0548                 mov     di, ax
seg000:054A
seg000:054A loc_54A:                                ; CODE XREF: sub_503+61j
seg000:054A                 push    di
seg000:054B                 push    cx
seg000:054C                 push    di
seg000:054D                 mov     ax, 0EE00h
seg000:0550                 mov     es, ax
seg000:0552                 assume es:nothing
seg000:0552                 mov     al, 20h ; ' '
seg000:0554                 mov     cx, 1Ch
seg000:0557
seg000:0557 loc_557:                                ; CODE XREF: sub_503+55j
seg000:0557                 stosb
seg000:0558                 loop    loc_557
seg000:055A                 pop     di
seg000:055B                 pop     cx
seg000:055C                 call    sub_78E
seg000:055F                 pop     di
seg000:0560                 add     di, 87h ; 'ç'
seg000:0564                 loop    loc_54A
seg000:0566                 call    sub_D87
seg000:0569
seg000:0569 loc_569:                                ; CODE XREF: sub_503+27j
seg000:0569                 sub     di, 9Dh ; '¥'
seg000:056D                 push    bx
seg000:056E                 push    di
seg000:056F                 mov     al, 1Bh         ; ESCAPE M - VT52 REVERSE INDEX :
seg000:056F                                         ;   move cursor up 1 line. If cursor is at top of
seg000:056F                                         ;   window, window is scrolled down 1 line
seg000:0571                 call    near ptr 8003h  ; Emit SINGLE ESCAPE CODE in AL
seg000:0574                 mov     al, 4Dh ; 'M'
seg000:0576                 call    near ptr 8003h  ; Emit SINGLE ESCAPE CODE in AL
seg000:0579                 pop     di
seg000:057A                 pop     bx
seg000:057B                 mov     cx, 16h
seg000:057E                 mov     al, 0Dh
seg000:0580
seg000:0580 loc_580:                                ; CODE XREF: sub_503+7Ej
seg000:0580                 stosb
seg000:0581                 loop    loc_580
seg000:0583                 sub     di, 16h
seg000:0586                 jmp     short POLL_KEY_LOOP__loc_508
seg000:0588 ; ---------------------------------------------------------------------------
seg000:0588
seg000:0588 loc_588:                                ; CODE XREF: sub_503:loc_514j
seg000:0588                                         ; sub_503+16j
seg000:0588                 cmp     ax, 1ABh
seg000:058B                 jnz     short loc_605
seg000:058D                 cmp     bx, 10h
seg000:0590                 jnz     short loc_595
seg000:0592                 jmp     POLL_KEY_LOOP__loc_508
seg000:0595 ; ---------------------------------------------------------------------------
seg000:0595
seg000:0595 loc_595:                                ; CODE XREF: sub_503+8Dj
seg000:0595                 mov     cx, 16h
seg000:0598                 mov     al, 0Eh
seg000:059A                 inc     bl
seg000:059C                 cmp     bl, cs:8393h
seg000:05A1                 jz      short loc_5E3   ;
seg000:05A1                                         ;
seg000:05A3                 call    sub_D72
seg000:05A6                 call    sub_7AE
seg000:05A9                 mov     bx, 1
seg000:05AC                 mov     cx, 0F400h
seg000:05AF                 mov     ds, cx
seg000:05B1                 mov     cx, [si]
seg000:05B3                 mov     si, cs:8051h
seg000:05B8                 call    sub_7CA
seg000:05BB                 mov     cx, 0
seg000:05BE                 lodsb
seg000:05BF                 mov     cl, al
seg000:05C1                 lodsw
seg000:05C2                 mov     di, ax
seg000:05C4
seg000:05C4 loc_5C4:                                ; CODE XREF: sub_503+DBj
seg000:05C4                 push    di
seg000:05C5                 push    cx
seg000:05C6                 push    di
seg000:05C7                 mov     ax, 0EE00h
seg000:05CA                 mov     es, ax
seg000:05CC                 mov     al, 20h ; ' '
seg000:05CE                 mov     cx, 1Ch
seg000:05D1
seg000:05D1 loc_5D1:                                ; CODE XREF: sub_503+CFj
seg000:05D1                 stosb
seg000:05D2                 loop    loc_5D1
seg000:05D4                 pop     di
seg000:05D5                 pop     cx
seg000:05D6                 call    sub_78E
seg000:05D9                 pop     di
seg000:05DA                 add     di, 87h ; 'ç'
seg000:05DE                 loop    loc_5C4
seg000:05E0                 call    sub_D87
seg000:05E3
seg000:05E3 loc_5E3:                                ; CODE XREF: sub_503+9Ej
seg000:05E3                                         ; sub_503+E1j
seg000:05E3                 stosb
seg000:05E4                 loop    loc_5E3
seg000:05E6                 mov     cx, 16h
seg000:05E9                 mov     al, 0Dh
seg000:05EB                 add     di, 71h ; 'q'
seg000:05EE
seg000:05EE loc_5EE:                                ; CODE XREF: sub_503+ECj
seg000:05EE                 stosb
seg000:05EF                 loop    loc_5EE
seg000:05F1                 push    bx
seg000:05F2                 push    di
seg000:05F3                 mov     al, 0Ah
seg000:05F5                 call    near ptr 8003h  ; Emit SINGLE ESCAPE CODE in AL
seg000:05F8                 mov     al, 0Dh
seg000:05FA                 call    near ptr 8003h  ; Emit SINGLE ESCAPE CODE in AL
seg000:05FD                 pop     di
seg000:05FE                 pop     bx
seg000:05FF                 sub     di, 16h
seg000:0602                 jmp     POLL_KEY_LOOP__loc_508
seg000:0605 ; ---------------------------------------------------------------------------
seg000:0605
seg000:0605 loc_605:                                ; CODE XREF: sub_503+88j
seg000:0605                 cmp     bl, cs:8393h
seg000:060A                 jz      short KBD_SELECT1__loc_61E ;
seg000:060A                                         ;
seg000:060C                 cmp     ax, 1A3h
seg000:060F                 jz      short KBD_SELECTED2__loc_62C
seg000:0611                 cmp     ax, 183h
seg000:0614                 jz      short KBD_SELECTED2__loc_62C
seg000:0616                 cmp     ax, 0Dh
seg000:0619                 jz      short KBD_SELECTED2__loc_62C
seg000:061B                 jmp     loc_65F         ; POLL_KEY_LOOP__loc_508
seg000:061E ; ---------------------------------------------------------------------------
seg000:061E
seg000:061E KBD_SELECT1__loc_61E:                   ; CODE XREF: sub_503+107j
seg000:061E                 cmp     ax, 1E4h
seg000:0621                 jnz     short loc_65F   ; POLL_KEY_LOOP__loc_508
seg000:0621                                         ;
seg000:0623                 mov     byte ptr es:9Dh, 1 ; 0x9D KEYBOARD (0=NOT SELECTED) => SELECTED.
seg000:0629                 jmp     LOOP__loc_64A
seg000:062C ; ---------------------------------------------------------------------------
seg000:062C
seg000:062C KBD_SELECTED2__loc_62C:                 ; CODE XREF: sub_503+10Cj
seg000:062C                                         ; sub_503+111j
seg000:062C                                         ; sub_503+116j
seg000:062C                 call    sub_7AE
seg000:062F                 mov     cx, 0F400h
seg000:0632                 mov     ds, cx
seg000:0634                 mov     al, [si]
seg000:0636                 mov     ah, 0
seg000:0638                 push    ax
seg000:0639                 call    ES_ed00__DS_ee00__sub_744
seg000:063C                 pop     ax
seg000:063D                 mov     es:0ACh, ax
seg000:0641                 mov     byte ptr es:9Dh, 1 ; 0x9D KEYBOARD (0=NOT SELECTED) => SELECTED.
seg000:0647                 call    j_NVM_WRITABLE__loc_3E10
seg000:064A
seg000:064A LOOP__loc_64A:                          ; CODE XREF: sub_503+126j
seg000:064A                                         ; sub_503+14Cj
seg000:064A                 cmp     word ptr ds:0F67h, 1
seg000:064F                 jnz     short LOOP__loc_64A
seg000:0651                 push    ds
seg000:0652                 push    cs
seg000:0653                 pop     ds
seg000:0654                 assume ds:nothing
seg000:0654                 mov     si, 822Ah       ; [RBHIGH.16K]:
seg000:0654                                         ; ESC[3;1H
seg000:0654                                         ; ESC[J
seg000:0657                 call    EMIT_STRING__sub_6EC
seg000:065A                 pop     ds
seg000:065B                 pop     dx
seg000:065C                 jmp     RAINBOW100_LOGO__loc_33D
seg000:065F ; ---------------------------------------------------------------------------
seg000:065F
seg000:065F loc_65F:                                ; CODE XREF: sub_503+118j
seg000:065F                                         ; sub_503+11Ej
seg000:065F                 jmp     POLL_KEY_LOOP__loc_508
seg000:065F sub_503         endp
seg000:065F
seg000:0662 ; ---------------------------------------------------------------------------
seg000:0662 ; START OF FUNCTION CHUNK FOR sub_84
seg000:0662
seg000:0662 loc_662:                                ; CODE XREF: sub_84+35Dj
seg000:0662                 xor     cx, cx
seg000:0664                 mov     ds, cx
seg000:0666                 test    byte ptr ds:loc_50E, 1
seg000:066B                 jz      short loc_670   ;
seg000:066B                                         ;
seg000:066D                 jmp     SETUP__loc_3E4
seg000:0670 ; ---------------------------------------------------------------------------
seg000:0670
seg000:0670 loc_670:                                ; CODE XREF: sub_84+5E7j
seg000:0670                 cmp     al, 5
seg000:0672                 jz      short loc_680   ;
seg000:0672                                         ;
seg000:0674                 mov     cl, al
seg000:0676                 dec     cl
seg000:0678                 mov     byte ptr ds:loc_50E, 1
seg000:067D                 jmp     loc_404
seg000:0680 ; ---------------------------------------------------------------------------
seg000:0680
seg000:0680 loc_680:                                ; CODE XREF: sub_84+5EEj
seg000:0680                 jmp     W_INCHESTER__loc_80E
seg000:0680 ; END OF FUNCTION CHUNK FOR sub_84
seg000:0683 ; ---------------------------------------------------------------------------
seg000:0683
seg000:0683 DELAY_n_SEND_AL_KBD__loc_683:           ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+54p
seg000:0683                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+5Dp
seg000:0683                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+66p
seg000:0683                 sti
seg000:0684
seg000:0684 MINILOOP_loc_684:                       ; CODE XREF: seg000:0697j
seg000:0684                 push    ax
seg000:0685                 mov     cx, 1FFh
seg000:0688                 call    CPU_DELAY1__sub_72C ; hard coded delay
seg000:068B                 call    ES_ed00__DS_ee00__sub_744
seg000:068E                 pop     ax
seg000:068F                 push    bx
seg000:0690                 push    ax
seg000:0691                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:0691                                         ;
seg000:0691                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:0694                 pop     ax
seg000:0695                 pop     bx
seg000:0696                 dec     bx
seg000:0697                 jnz     short MINILOOP_loc_684
seg000:0699                 call    DISABLE_MHFU__sub_73A
seg000:069C                 retn
seg000:069D
seg000:069D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:069D
seg000:069D
seg000:069D sub_69D         proc near               ; CODE XREF: seg000:0D9Dp
seg000:069D                 mov     cx, 0F400h
seg000:06A0                 call    DS_to_0000__sub_13CD
seg000:06A3                 mov     byte ptr ds:loc_50E, 0
seg000:06A8                 test    byte ptr ds:sub_503, 2
seg000:06AD                 jz      short loc_6B2   ;
seg000:06AD                                         ;
seg000:06AF                 jmp     locret_6CF      ; return
seg000:06B2 ; ---------------------------------------------------------------------------
seg000:06B2
seg000:06B2 loc_6B2:                                ; CODE XREF: sub_69D+10j
seg000:06B2                 and     dl, 0DFh
seg000:06B5                 test    dl, 4           ; DECIDE if INTERRUPTS OFF or TESTING...
seg000:06B8                 jz      short loc_6C0   ;
seg000:06B8                                         ;
seg000:06BA                 mov     si, 816Fh       ; [RBHIGH.16K]
seg000:06BA                                         ; 816f: 02 12 83 1f 89
seg000:06BA                                         ;         8312 "16 - "
seg000:06BA                                         ;         891f "Interrupts Off"
seg000:06BA                                         ;
seg000:06BA                                         ; Either a software bug or a hardware problem (then FATAL).
seg000:06BD                 jmp     loc_6CC
seg000:06C0 ; ---------------------------------------------------------------------------
seg000:06C0
seg000:06C0 loc_6C0:                                ; CODE XREF: sub_69D+1Bj
seg000:06C0                 mov     si, 80CAh       ; [RBHIGH.16K]
seg000:06C0                                         ; 80ca : 03 65 82 96 86 6e 82
seg000:06C0                                         ;
seg000:06C0                                         ;         8265 : ESC[1;5;7m
seg000:06C0                                         ;         8696 : TESTING...
seg000:06C0                                         ;         826e : ESC[0m
seg000:06C3                 call    EMIT_SETUP_STRING__sub_19F
seg000:06C6                 and     dl, 0DFh
seg000:06C9                 jmp     locret_6CF      ; return
seg000:06CC ; ---------------------------------------------------------------------------
seg000:06CC
seg000:06CC loc_6CC:                                ; CODE XREF: sub_69D+20j
seg000:06CC                 call    EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:06CF
seg000:06CF locret_6CF:                             ; CODE XREF: sub_69D+12j
seg000:06CF                                         ; sub_69D+2Cj
seg000:06CF                 retn
seg000:06CF sub_69D         endp
seg000:06CF
seg000:06D0
seg000:06D0 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:06D0
seg000:06D0
seg000:06D0 sub_6D0         proc near               ; CODE XREF: seg000:071Fp
seg000:06D0                 push    cx              ; Display ROM_VERSION.
seg000:06D0                                         ;
seg000:06D1                 push    dx
seg000:06D2                 mov     bp, 0
seg000:06D5                 mov     dx, 506h
seg000:06D8                 call    ROM_RomVersion__1F23
seg000:06DB                 mov     si, 506h
seg000:06DE                 mov     ax, 0
seg000:06E1                 mov     ds, ax
seg000:06E3                 call    EMIT_STRING__sub_6EC
seg000:06E6                 call    EMIT_STRING__sub_6EC
seg000:06E9                 pop     dx
seg000:06EA                 pop     cx
seg000:06EB                 retn
seg000:06EB sub_6D0         endp
seg000:06EB
seg000:06EC
seg000:06EC ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:06EC
seg000:06EC
seg000:06EC EMIT_STRING__sub_6EC proc near          ; CODE XREF: sub_503+154p
seg000:06EC                                         ; sub_6D0+13p sub_6D0+16p
seg000:06EC                                         ; seg000:0E66p
seg000:06EC                                         ; seg000:0E6Cp
seg000:06EC                 cld                     ; STRING OUTPUT LOOP - string ends with 00.
seg000:06EC                                         ;          - string may contain ESCAPE codes -
seg000:06ED
seg000:06ED loc_6ED:                                ; CODE XREF: EMIT_STRING__sub_6EC+14j
seg000:06ED                 lodsb
seg000:06EE                 cmp     al, 0
seg000:06F0                 jz      short locret_702
seg000:06F2                 call    sub_D72
seg000:06F5                 push    ax
seg000:06F6                 call    ES_ed00__DS_ee00__sub_744
seg000:06F9                 pop     ax
seg000:06FA                 call    near ptr 8003h  ; Emit SINGLE ESCAPE CODE in AL
seg000:06FD                 call    sub_D87
seg000:0700                 jmp     short loc_6ED
seg000:0702 ; ---------------------------------------------------------------------------
seg000:0702
seg000:0702 locret_702:                             ; CODE XREF: EMIT_STRING__sub_6EC+4j
seg000:0702                 retn
seg000:0702 EMIT_STRING__sub_6EC endp
seg000:0702
seg000:0703
seg000:0703 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0703
seg000:0703
seg000:0703 MONO_TEST_80C4h__sub_703 proc near      ; CODE XREF: seg000:0728p
seg000:0703                 mov     ax, 0F400h      ; Tests a flag in the language ROM (offset 0xc4).
seg000:0703                                         ; If 0, a simple monochrome version (without highlights) is shown.
seg000:0706                 mov     ds, ax
seg000:0708                 assume ds:nothing
seg000:0708                 test    byte ptr ds:80C4h, 1
seg000:070D                 retn
seg000:070D MONO_TEST_80C4h__sub_703 endp
seg000:070D
seg000:070E ; ---------------------------------------------------------------------------
seg000:070E
seg000:070E BOLD_ATTR__loc_70E:                     ; CODE XREF: sub_84+310p
seg000:070E                                         ; sub_84+33Bp sub_84+3CDp
seg000:070E                                         ; sub_84+3DCp
seg000:070E                 call    ES_ed00__DS_ee00__sub_744
seg000:0711                 call    EE000_BP_BOLD__sub_74F ; sets 13 bold attributes beginning @ EE000:BP
seg000:0714                 add     bp, 87h ; 'ç'
seg000:0718                 call    EE000_BP_BOLD__sub_74F ; sets 13 bold attributes beginning @ EE000:BP
seg000:071B                 retn
seg000:071C ; ---------------------------------------------------------------------------
seg000:071C
seg000:071C BOOTSELECTOR__loc_71C:                  ; CODE XREF: sub_84+308p
seg000:071C                                         ; sub_84+333p
seg000:071C                 call    EMIT_SETUP_STRING__sub_19F
seg000:071F                 call    sub_6D0         ; displays ROM_VERSION.
seg000:071F                                         ;
seg000:0722                 mov     si, 80E5h       ; [RBHIGH.16K]
seg000:0722                                         ; 80e5 : 2f strings (not all given here) @ location 80e6 ... 8143
seg000:0722                                         ;
seg000:0722                                         ;        8421 :  DIGITAL EQUIPMENT CORPORATION 1983        ...(etc)...
seg000:0725                 call    EMIT_SETUP_STRING__sub_19F
seg000:0728                 call    MONO_TEST_80C4h__sub_703
seg000:072B                 retn
seg000:072C
seg000:072C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:072C
seg000:072C
seg000:072C CPU_DELAY1__sub_72C proc near           ; CODE XREF: CPU_DELAY2_n_CLI__sub_197p
seg000:072C                                         ; seg000:0688p
seg000:072C                 push    dx              ;
seg000:072C                                         ; SUBROUTINE: HARD CODED CPU DELAY SUITABLE FOR 8088
seg000:072C                                         ;
seg000:072D
seg000:072D loc_72D:                                ; CODE XREF: CPU_DELAY1__sub_72C+Aj
seg000:072D                 push    cx
seg000:072E                 mov     cx, 28h ; '('   ; change to 00064 for NEC_V20 CPU
seg000:0731
seg000:0731 loc_731:                                ; CODE XREF: CPU_DELAY1__sub_72C+7j
seg000:0731                 mul     ax
seg000:0733                 loop    loc_731
seg000:0735                 pop     cx
seg000:0736                 loop    loc_72D
seg000:0738                 pop     dx
seg000:0739                 retn
seg000:0739 CPU_DELAY1__sub_72C endp
seg000:0739
seg000:073A
seg000:073A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:073A
seg000:073A
seg000:073A DISABLE_MHFU__sub_73A proc near         ; CODE XREF: EMIT_SETUP_STRING__sub_19F+2p
seg000:073A                                         ; EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215p
seg000:073A                                         ; seg000:0699p
seg000:073A                 cli                     ; See 3.1.3.9.5 DC012 Programming Information / PC-100 Spec.
seg000:073B                 push    dx
seg000:073C                 xor     ax, ax
seg000:073E                 mov     dx, 10Ch
seg000:0741                 out     dx, al          ; $00 => PORT 10c
seg000:0742                 pop     dx
seg000:0743                 retn
seg000:0743 DISABLE_MHFU__sub_73A endp
seg000:0743
seg000:0744
seg000:0744 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0744
seg000:0744
seg000:0744 ES_ed00__DS_ee00__sub_744 proc near     ; CODE XREF: EMIT_SETUP_STRING__sub_19F+Dp
seg000:0744                                         ; EMIT_SETUP_STRING__sub_19F+50p
seg000:0744                                         ; sub_84+2BDp sub_84+34Ap
seg000:0744                                         ; sub_84:WAITFORKEY__loc_3E8p
seg000:0744                                         ; sub_84+3B2p sub_84+46Cp
seg000:0744                                         ; sub_503+136p
seg000:0744                                         ; seg000:068Bp
seg000:0744                                         ; EMIT_STRING__sub_6EC+Ap
seg000:0744                                         ; seg000:BOLD_ATTR__loc_70Ep
seg000:0744                                         ; seg000:0DA4p
seg000:0744                 mov     ax, 0ED00h
seg000:0747                 mov     es, ax
seg000:0749                 assume es:nothing
seg000:0749                 mov     ax, 0EE00h
seg000:074C                 mov     ds, ax
seg000:074E                 assume ds:nothing
seg000:074E                 retn
seg000:074E ES_ed00__DS_ee00__sub_744 endp
seg000:074E
seg000:074F
seg000:074F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:074F
seg000:074F
seg000:074F EE000_BP_BOLD__sub_74F proc near        ; CODE XREF: seg000:0711p
seg000:074F                                         ; seg000:0718p
seg000:074F                 mov     al, 0Dh         ; sets 13 bold attributes beginning @ EE000:BP
seg000:0751                 mov     cx, 0Dh
seg000:0754                 mov     di, 0
seg000:0757
seg000:0757 loc_757:                                ; CODE XREF: EE000_BP_BOLD__sub_74F+Cj
seg000:0757                 mov     ds:[bp+di], al
seg000:075A                 inc     di
seg000:075B                 loop    loc_757
seg000:075D                 retn
seg000:075D EE000_BP_BOLD__sub_74F endp
seg000:075D
seg000:075E ; ---------------------------------------------------------------------------
seg000:075E
seg000:075E FX_VIDEORAM_0x19__loc_75E:              ; CODE XREF: sub_84+316p
seg000:075E                                         ; sub_84+341p sub_84+3D3p
seg000:075E                                         ; sub_84+3E2p
seg000:075E                 call    EE000_BP_0x19__sub_769
seg000:0761                 add     bp, 87h ; 'ç'
seg000:0765                 call    EE000_BP_0x19__sub_769
seg000:0768                 retn
seg000:0769
seg000:0769 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0769
seg000:0769
seg000:0769 EE000_BP_0x19__sub_769 proc near        ; CODE XREF: seg000:FX_VIDEORAM_0x19__loc_75Ep
seg000:0769                                         ; seg000:0765p
seg000:0769                 mov     al, 19h         ; adds graphical character (0x019) between d i g i t a l
seg000:076B                 mov     cx, 6
seg000:076E                 mov     di, 0
seg000:0771
seg000:0771 loc_771:                                ; CODE XREF: EE000_BP_0x19__sub_769+Dj
seg000:0771                 mov     ds:[bp+di], al
seg000:0774                 inc     di
seg000:0775                 inc     di
seg000:0776                 loop    loc_771
seg000:0778                 retn
seg000:0778 EE000_BP_0x19__sub_769 endp
seg000:0778
seg000:0779 ; ---------------------------------------------------------------------------
seg000:0779
seg000:0779 DIRECT_DISPLAY_ROMSTRING__loc_779:      ; CODE XREF: sub_84:INNER_LOOP__loc_495p
seg000:0779                                         ; sub_84:REPEAT_3x__loc_4A3p
seg000:0779                                         ; sub_84+427p sub_84+42Dp
seg000:0779                                         ; sub_84+433p
seg000:0779                 mov     ax, 0EE00h      ; displays a 0x00 terminated string from F400:SI
seg000:077C                 mov     es, ax
seg000:077E                 assume es:nothing
seg000:077E                 mov     ax, 0F400h
seg000:0781                 mov     ds, ax
seg000:0783                 assume ds:nothing
seg000:0783                 cld
seg000:0784
seg000:0784 IF_NOT_ZERO__loc_784:                   ; CODE XREF: seg000:0788j
seg000:0784                 lodsb
seg000:0785                 stosb
seg000:0786                 cmp     al, 0
seg000:0788                 jnz     short IF_NOT_ZERO__loc_784
seg000:078A                 add     di, 77h ; 'w'
seg000:078D                 retn
seg000:078E
seg000:078E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:078E
seg000:078E
seg000:078E sub_78E         proc near               ; CODE XREF: sub_503+59p
seg000:078E                                         ; sub_503+D3p
seg000:078E                 mov     ax, 0EE00h
seg000:0791                 mov     es, ax
seg000:0793                 mov     ax, 0F400h
seg000:0796                 mov     ds, ax
seg000:0798                 cld
seg000:0799
seg000:0799 loc_799:                                ; CODE XREF: sub_78E+13j
seg000:0799                 lodsb
seg000:079A                 cmp     al, 3
seg000:079C                 jz      short locret_7A3
seg000:079E                 stosb
seg000:079F                 cmp     al, 0
seg000:07A1                 jnz     short loc_799
seg000:07A3
seg000:07A3 locret_7A3:                             ; CODE XREF: sub_78E+Ej
seg000:07A3                 retn
seg000:07A3 sub_78E         endp
seg000:07A3
seg000:07A4 ; ---------------------------------------------------------------------------
seg000:07A4
seg000:07A4 loc_7A4:                                ; CODE XREF: sub_84+43Fp
seg000:07A4                                         ; sub_84+44Ep
seg000:07A4                                         ; sub_84:LOOP__loc_4DBp
seg000:07A4                 cld
seg000:07A5                 push    cx
seg000:07A6                 mov     cx, 5
seg000:07A9
seg000:07A9 LOOP__loc_7A9:                          ; CODE XREF: seg000:07AAj
seg000:07A9                 stosb
seg000:07AA                 loop    LOOP__loc_7A9
seg000:07AC                 pop     cx
seg000:07AD                 retn
seg000:07AE
seg000:07AE ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:07AE
seg000:07AE
seg000:07AE sub_7AE         proc near               ; CODE XREF: sub_503+2Cp
seg000:07AE                                         ; sub_503+A3p
seg000:07AE                                         ; sub_503:KBD_SELECTED2__loc_62Cp
seg000:07AE                 mov     si, 8393h
seg000:07B1                 lods    byte ptr cs:[si]
seg000:07B3                 dec     al
seg000:07B5                 cmp     bl, al
seg000:07B7                 jle     short loc_7BB
seg000:07B9                 dec     bl
seg000:07BB
seg000:07BB loc_7BB:                                ; CODE XREF: sub_7AE+9j
seg000:07BB                 mov     si, 8394h
seg000:07BE                 mov     al, 1
seg000:07C0
seg000:07C0 loc_7C0:                                ; CODE XREF: sub_7AE+19j
seg000:07C0                 cmp     bl, al
seg000:07C2                 jz      short locret_7C9
seg000:07C4                 inc     al
seg000:07C6                 inc     si
seg000:07C7                 jmp     short loc_7C0
seg000:07C9 ; ---------------------------------------------------------------------------
seg000:07C9
seg000:07C9 locret_7C9:                             ; CODE XREF: sub_7AE+14j
seg000:07C9                 retn
seg000:07C9 sub_7AE         endp
seg000:07C9
seg000:07CA
seg000:07CA ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:07CA
seg000:07CA
seg000:07CA sub_7CA         proc near               ; CODE XREF: EMIT_SETUP_STRING__sub_19F+43p
seg000:07CA                                         ; sub_503+3Bp sub_503+B5p
seg000:07CA                 push    si
seg000:07CB                 and     cx, 0F0Fh
seg000:07CF                 mov     bl, 0
seg000:07D1                 mov     si, 83A4h
seg000:07D4
seg000:07D4 loc_7D4:                                ; CODE XREF: sub_7CA+11j
seg000:07D4                 lodsb
seg000:07D5                 cmp     al, 20h ; ' '
seg000:07D7                 jz      short loc_7E2
seg000:07D9                 cmp     cl, al
seg000:07DB                 jnz     short loc_7D4
seg000:07DD                 mov     bl, 1
seg000:07DF                 jmp     loc_800
seg000:07E2 ; ---------------------------------------------------------------------------
seg000:07E2
seg000:07E2 loc_7E2:                                ; CODE XREF: sub_7CA+Dj
seg000:07E2                                         ; sub_7CA+1Fj
seg000:07E2                 lodsb
seg000:07E3                 cmp     al, 20h ; ' '
seg000:07E5                 jz      short loc_7F0
seg000:07E7                 cmp     cl, al
seg000:07E9                 jnz     short loc_7E2
seg000:07EB                 mov     bl, 2
seg000:07ED                 jmp     loc_800
seg000:07F0 ; ---------------------------------------------------------------------------
seg000:07F0
seg000:07F0 loc_7F0:                                ; CODE XREF: sub_7CA+1Bj
seg000:07F0                                         ; sub_7CA+2Dj
seg000:07F0                 lodsb
seg000:07F1                 cmp     al, 20h ; ' '
seg000:07F3                 jz      short loc_7FE
seg000:07F5                 cmp     cl, al
seg000:07F7                 jnz     short loc_7F0
seg000:07F9                 mov     bl, 3
seg000:07FB                 jmp     loc_800
seg000:07FE ; ---------------------------------------------------------------------------
seg000:07FE
seg000:07FE loc_7FE:                                ; CODE XREF: sub_7CA+29j
seg000:07FE                 mov     bl, 1
seg000:0800
seg000:0800 loc_800:                                ; CODE XREF: sub_7CA+15j
seg000:0800                                         ; sub_7CA+23j sub_7CA+31j
seg000:0800                 pop     si
seg000:0801
seg000:0801 loc_801:                                ; CODE XREF: sub_7CA+41j
seg000:0801                 cld
seg000:0802                 dec     bl
seg000:0804                 jz      short locret_80D
seg000:0806
seg000:0806 loc_806:                                ; CODE XREF: sub_7CA+3Fj
seg000:0806                 lodsb
seg000:0807                 cmp     al, 0
seg000:0809                 jnz     short loc_806
seg000:080B                 jmp     short loc_801
seg000:080D ; ---------------------------------------------------------------------------
seg000:080D
seg000:080D locret_80D:                             ; CODE XREF: sub_7CA+3Aj
seg000:080D                 retn
seg000:080D sub_7CA         endp
seg000:080D
seg000:080E ; ---------------------------------------------------------------------------
seg000:080E ; START OF FUNCTION CHUNK FOR sub_84
seg000:080E
seg000:080E W_INCHESTER__loc_80E:                   ; CODE XREF: sub_84+373j
seg000:080E                                         ; sub_84:loc_680j
seg000:080E                 mov     al, 2           ; HARD DISC CONTROLLER RESET -
seg000:0810                 out     68h, al         ; (bit in Secondary Command Register 0x68)
seg000:0810                                         ;
seg000:0812                 mov     cx, 0FFFh
seg000:0815
seg000:0815 WINCH_DELAY__loc_815:                   ; CODE XREF: sub_84+792j
seg000:0815                 nop
seg000:0816                 loop    WINCH_DELAY__loc_815
seg000:0818                 call    ENABLE_WINCHESTER_IRQ__sub_919
seg000:081B                 mov     ax, 0
seg000:081E                 mov     ds, ax
seg000:0820                 assume ds:nothing
seg000:0820                 mov     byte ptr ds:loc_514, 0 ;
seg000:0820                                         ;
seg000:0825                 in      al, 68h
seg000:0827                 and     al, 0E0h        ; 11100000
seg000:0829                 cmp     al, 0A0h ; 'á'  ; 10100000 (test magic bits; 101 für hard disc controller on bits 5-7)
seg000:082B                 jz      short OK_HDC_PRESENT__loc_83C ;
seg000:082B                                         ;
seg000:082D                 mov     dx, 84h ; 'ä'
seg000:0830                 mov     si, 8165h       ; "21 - Drive Not Ready"
seg000:0833                 mov     cx, 0F400h
seg000:0836                 call    EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:0839                 jmp     EXIT_WINCHESTER__loc_8D6
seg000:083C ; ---------------------------------------------------------------------------
seg000:083C
seg000:083C OK_HDC_PRESENT__loc_83C:                ; CODE XREF: sub_84+7A7j
seg000:083C                 mov     al, 32h ; '2'   ; [61]    (WRITE): WRITE PRECOMP CYLINDER.
seg000:083C                                         ;         Value loaded is multiplied by 4 to specify cyl.where RWC is asserted.
seg000:083C                                         ;         ST-506 requires precomp on cylinder 128 ($80) and above.
seg000:083C                                         ;         Therefore, a value of 32 ($20) is loaded.
seg000:083E                 out     61h, al         ;
seg000:083E                                         ;
seg000:0840                 mov     al, 20h ; ' '   ; 512 = SECTOR SIZE / DRIVE 0 / HEAD 0
seg000:0842                 out     66h, al         ; [66] : (READ / WRITE ) Size / Drive / Head register
seg000:0842                                         ; //  Bit 7 : EXT = 1 : CRC is not appended to the data field
seg000:0842                                         ; //         (data field becomes "sector size + 7"). More on page 9 of WD PDF!
seg000:0842                                         ; //  Bit 6 / Bit 5 : sector size (0 = 256; 1= 512; 2 = 1024; 3 = 128)
seg000:0842                                         ; //  Bit 4 / Bit 3 : drive # (DSEL 1 - 4)
seg000:0842                                         ; //  Bit 2 / Bit 1 / Bit 0 : HEAD 0 - 7
seg000:0842                                         ;
seg000:0844                 xor     al, al          ; 0
seg000:0846                 out     65h, al         ; CYLINDER NUMBER HIGH
seg000:0848                 out     64h, al         ; CYLINDER NUMBER LOW
seg000:0848                                         ;
seg000:084A                 inc     al              ; 1
seg000:084C                 out     63h, al         ; (READ/WRITE) SECTOR NUMBER 0-255
seg000:084C                                         ;
seg000:084E                 mov     al, 76h ; 'v'   ; 01110110
seg000:0850                 out     67h, al         ; *** SEEK *** with a RATE of 3.0 ms (when WCLK @ 5 Mhz)
seg000:0850                                         ;
seg000:0852                 call    WINCH_IRQ_COMPLETE__sub_8DE ;
seg000:0852                                         ;
seg000:0855                 mov     al, 16h         ; 00010110
seg000:0857                 out     67h, al         ; *** RESTORE *** (3.0 ms RATE)
seg000:0859                 call    WINCH_IRQ_COMPLETE__sub_8DE
seg000:085C                 cmp     al, 0FFh
seg000:085E                 jz      short EXIT_WINCHESTER__loc_8D6 ; Back to menu / abort.
seg000:085E                                         ;
seg000:0860                 in      al, 67h
seg000:0862                 test    al, 21h         ; 00100001
seg000:0864                 jz      short RESTORE_OK__loc_86C ;
seg000:0864                                         ;
seg000:0866                 call    SYSLOAD_ERR__sub_956
seg000:0869                 jmp     EXIT_WINCHESTER__loc_8D6
seg000:086C ; ---------------------------------------------------------------------------
seg000:086C
seg000:086C RESTORE_OK__loc_86C:                    ; CODE XREF: sub_84+7E0j
seg000:086C                 mov     al, 1
seg000:086E                 out     62h, al         ; SECTOR COUNT. 0 = 256 sectors, 1 = one sector transfer. etc.
seg000:086E                                         ; NOT VALID FOR SINGLE SECTOR COMMANDS!
seg000:0870                 out     63h, al         ; SECTOR NUMBER
seg000:0870                                         ;
seg000:0872                 xor     al, al          ; 0 => CYL. LOW + HIGH
seg000:0874                 out     65h, al
seg000:0876                 out     64h, al         ;
seg000:0876                                         ;
seg000:0878                 mov     al, 28h ; '('   ; 00101000
seg000:087A                 out     67h, al         ; *** READ SECTOR *** Transfer 1 sector (bit 2 M =0);
seg000:087A                                         ; enable retries (bit 0 = 0); (bit 3 I = 1 'interrupt at end of command')
seg000:087C                 call    WINCH_IRQ_COMPLETE__sub_8DE
seg000:087F                 cmp     al, 0FFh
seg000:0881                 jnz     short READ_SECTOR_OK__loc_88B ;
seg000:0881                                         ;
seg000:0883                 call    SYSLOAD_ERR__sub_956
seg000:0886                 mov     al, 0FFh
seg000:0888                 jmp     EXIT_WINCHESTER__loc_8D6
seg000:088B ; ---------------------------------------------------------------------------
seg000:088B
seg000:088B READ_SECTOR_OK__loc_88B:                ; CODE XREF: sub_84+7FDj
seg000:088B                 mov     al, 1           ; SET BUFFER READY -
seg000:088D                 out     68h, al         ; (bit in Secondary Command Register 0x68)
seg000:088D                                         ;
seg000:088F                 in      al, 67h         ; WD1010 status register
seg000:0891                 test    al, 21h         ; 00100001 mask WRITE_FAULT (bit 5) and ERROR (bit 0)
seg000:0893                 jz      short LOAD_n_CHECK_for_NOP__loc_89B ;
seg000:0893                                         ;
seg000:0895                 call    SYSLOAD_ERR__sub_956 ; "11 SYSTEM LOAD INCOMPLETE"
seg000:0898                 jmp     EXIT_WINCHESTER__loc_8D6
seg000:089B ; ---------------------------------------------------------------------------
seg000:089B
seg000:089B LOAD_n_CHECK_for_NOP__loc_89B:          ; CODE XREF: sub_84+80Fj
seg000:089B                 mov     ax, 0
seg000:089E                 mov     es, ax
seg000:08A0                 assume es:nothing
seg000:08A0                 in      al, 60h
seg000:08A2                 cmp     al, 90h ; 'É'   ; First byte is $90 (NOP) ?
seg000:08A4                 jnz     short NON_SYSTEM__loc_8CD ;
seg000:08A4                                         ;
seg000:08A6                 mov     cx, 200h        ; 512 bytes
seg000:08A9                 mov     di, 1000h
seg000:08AC
seg000:08AC GET_BYTES__loc_8AC:                     ; CODE XREF: sub_84+82Bj
seg000:08AC                 in      al, 60h         ; WD1010 input port (8 bit data)
seg000:08AE                 stosb
seg000:08AF                 loop    GET_BYTES__loc_8AC ;
seg000:08AF                                         ;
seg000:08B1                 in      al, 67h
seg000:08B3                 mov     ax, 0EE00h
seg000:08B6                 mov     ds, ax
seg000:08B8                 assume ds:nothing
seg000:08B8                 mov     ax, sp
seg000:08BA                 sub     ax, 4
seg000:08BD                 mov     ds:1FF7h, ax
seg000:08C0                 call    far ptr loc_FFF+2
seg000:08C5                 or      dl, 4
seg000:08C8                 call    SYSLOAD_ERR__sub_956
seg000:08CB                 jz      short EXIT_WINCHESTER__loc_8D6
seg000:08CD
seg000:08CD NON_SYSTEM__loc_8CD:                    ; CODE XREF: sub_84+820j
seg000:08CD                 mov     si, 815Bh       ; $833c "23 - "
seg000:08CD                                         ; $8838 "Non-System Diskette"
seg000:08D0                 mov     dx, 84h ; 'ä'
seg000:08D3                 call    EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:08D6
seg000:08D6 EXIT_WINCHESTER__loc_8D6:               ; CODE XREF: sub_84+7B5j
seg000:08D6                                         ; sub_84+7DAj sub_84+7E5j
seg000:08D6                                         ; sub_84+804j sub_84+814j
seg000:08D6                                         ; sub_84+847j
seg000:08D6                                         ; WINCH_IRQ_COMPLETE__sub_8DE+20j
seg000:08D6                 call    DISABLE_WINCHESTER_IRQ__sub_940
seg000:08D9                 in      al, 67h
seg000:08DB                 jmp     RAINBOW100_LOGO__loc_33D
seg000:08DB ; END OF FUNCTION CHUNK FOR sub_84
seg000:08DE
seg000:08DE ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:08DE
seg000:08DE
seg000:08DE WINCH_IRQ_COMPLETE__sub_8DE proc near   ; CODE XREF: sub_84+7CEp
seg000:08DE                                         ; sub_84+7D5p sub_84+7F8p
seg000:08DE                 mov     ax, 0
seg000:08E1                 mov     ds, ax
seg000:08E3                 assume ds:nothing
seg000:08E3                 mov     cx, 0B654h
seg000:08E6
seg000:08E6 LOOP__loc_8E6:                          ; CODE XREF: WINCH_IRQ_COMPLETE__sub_8DE+11j
seg000:08E6                 aam
seg000:08E8                 aam
seg000:08EA                 cmp     byte ptr ds:loc_514, 0 ; wait for zero page $514
seg000:08EF                 loope   LOOP__loc_8E6
seg000:08F1                 cmp     byte ptr ds:loc_514, 0FFh ; wait for complete (0xff ?)
seg000:08F6                 jz      short OK_loc_900 ;
seg000:08F6                                         ;
seg000:08F8                 pop     ax
seg000:08F9                 call    SYSLOAD_ERR__sub_956 ; "11 SYSTEM LOAD INCOMPLETE"
seg000:08FC                 mov     al, 0FFh
seg000:08FE                 jmp     short EXIT_WINCHESTER__loc_8D6
seg000:0900 ; ---------------------------------------------------------------------------
seg000:0900
seg000:0900 OK_loc_900:                             ; CODE XREF: WINCH_IRQ_COMPLETE__sub_8DE+18j
seg000:0900                 mov     byte ptr ds:loc_514, 0
seg000:0905                 xor     al, al
seg000:0907                 retn
seg000:0907 WINCH_IRQ_COMPLETE__sub_8DE endp
seg000:0907
seg000:0908 ; ---------------------------------------------------------------------------
seg000:0908                 push    ax              ; WINCHESTER INTERRUPT ?
seg000:0909                 push    ds
seg000:090A                 mov     ax, 0
seg000:090D                 mov     ds, ax
seg000:090F                 mov     byte ptr ds:loc_514, 0FFh ; set complete (0xff ?) flag
seg000:0914                 in      al, 67h
seg000:0916                 pop     ds
seg000:0917                 pop     ax
seg000:0918                 iret
seg000:0919
seg000:0919 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0919
seg000:0919
seg000:0919 ENABLE_WINCHESTER_IRQ__sub_919 proc near ; CODE XREF: sub_84+794p
seg000:0919                 xor     ax, ax
seg000:091B                 mov     es, ax
seg000:091D                 mov     ax, 0
seg000:0920                 mov     ds, ax
seg000:0922                 mov     ax, word ptr es:loc_93+1 ; save WORD from zero page $94
seg000:0926                 mov     word ptr ds:loc_50F+1, ax ; ...to zero page $510
seg000:0929                 mov     ax, word ptr es:loc_93+3 ; save WORD from zero page $96
seg000:092D                 mov     word ptr ds:loc_511+1, ax ; ...to zero page $512
seg000:0930                 cli
seg000:0931                 mov     word ptr es:loc_93+1, 908h ; set IRQ location to offset 908 (see above)
seg000:0938                 mov     ax, cs
seg000:093A                 mov     word ptr es:loc_93+3, ax ; set IRQ location (CS)
seg000:093E                 sti
seg000:093F                 retn
seg000:093F ENABLE_WINCHESTER_IRQ__sub_919 endp
seg000:093F
seg000:0940
seg000:0940 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0940
seg000:0940
seg000:0940 DISABLE_WINCHESTER_IRQ__sub_940 proc near
seg000:0940                                         ; CODE XREF: sub_84:EXIT_WINCHESTER__loc_8D6p
seg000:0940                 mov     ax, 0
seg000:0943                 mov     ds, ax
seg000:0945                 cli
seg000:0946                 mov     ax, word ptr ds:loc_50F+1
seg000:0949                 mov     word ptr es:loc_93+1, ax ; restore old value (saved before)
seg000:094D                 mov     ax, word ptr ds:loc_511+1
seg000:0950                 mov     word ptr es:loc_93+3, ax
seg000:0954                 sti
seg000:0955                 retn
seg000:0955 DISABLE_WINCHESTER_IRQ__sub_940 endp
seg000:0955
seg000:0956
seg000:0956 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0956
seg000:0956
seg000:0956 SYSLOAD_ERR__sub_956 proc near          ; CODE XREF: sub_84+7E2p
seg000:0956                                         ; sub_84+7FFp sub_84+811p
seg000:0956                                         ; sub_84+844p
seg000:0956                                         ; WINCH_IRQ_COMPLETE__sub_8DE+1Bp
seg000:0956                 mov     si, 8156h       ; "11 - System Load Incomplete"
seg000:0959                 mov     dx, 84h ; 'ä'
seg000:095C                 call    EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215
seg000:095F                 retn
seg000:095F SYSLOAD_ERR__sub_956 endp
seg000:095F
seg000:0960 ; ---------------------------------------------------------------------------
seg000:0960 ; START OF FUNCTION CHUNK FOR sub_84
seg000:0960
seg000:0960 loc_960:                                ; CODE XREF: seg000:0193j
seg000:0960                                         ; sub_84+2B2j
seg000:0960                 out     27h, al         ; [27] Extended Communications option:
seg000:0960                                         ;      a write to 8088 port 27H will reset
seg000:0960                                         ;      the option. [PAGE 40 of PC 100 SPEC]
seg000:0962                 in      al, 50h
seg000:0964                 and     al, 0FEh        ; [50] The graphics option is reset
seg000:0964                                         ;      by toggling bit of 8088 port 50
seg000:0964                                         ;      hex from high to low to high.
seg000:0964                                         ;
seg000:0964                                         ;      [PAGE 85 of PC 100 SPEC]
seg000:0966                 out     50h, al
seg000:0968                 or      al, 1
seg000:096A                 out     50h, al
seg000:096C                 mov     al, 6Fh ; 'o'   ; LSB : 1111 - MSB : 0110 / LEDs D4 + D6 _OFF_
seg000:096C                                         ; = "10 Main Board  [video vfr] / FATAL" (Positions 7 + 5 lit on back)
seg000:096C                                         ;
seg000:096C                                         ;
seg000:096E                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:096E                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:096E                                         ;         Used to set / write MODEM (SERIAL) + DIAGNOSTIC LEDs
seg000:0970                 mov     ax, 0EE00h
seg000:0973                 mov     ds, ax
seg000:0975                 assume ds:nothing
seg000:0975                 xor     bx, bx
seg000:0977                 mov     [bx], bx
seg000:0979                 mov     al, 3Fh ; '?'   ; LSB : 1111 - MSB : 0011 / LEDs D3 + D6 _OFF_
seg000:0979                                         ;
seg000:097B                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:097B                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:097B                                         ;
seg000:097D                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:097D                                         ;      See TABLE 4-29 and 4-15
seg000:097D                                         ; #       VALUE
seg000:097D                                         ; 0       1       ZRESET L (represents the state of bit 0 of the 8088 diagnostic write register)
seg000:097D                                         ; 1-3     -       state of W13, W14 and W15 MANUFACTURING TEST JUMPERS (normally high = 1)
seg000:097D                                         ;
seg000:097F                 test    al, 4           ; W14 MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:097F                                         ;
seg000:0981                 jz      short loc_988
seg000:0983                 test    dl, 81h
seg000:0986                 jz      short loc_998   ;  set and reset Z80
seg000:0988
seg000:0988 loc_988:                                ; CODE XREF: sub_84+8FDj
seg000:0988                 cli
seg000:0989                 mov     ax, ds
seg000:098B                 mov     di, 1FFFh
seg000:098E                 mov     bp, 994h        ; TEST  [ EE000 -> EFFFF ] / JUMP to 994 afterwards.
seg000:0991                 jmp     BITTEST_AX_n_jump_BP__loc_FA8
seg000:0991 ; END OF FUNCTION CHUNK FOR sub_84
seg000:0994 ; ---------------------------------------------------------------------------
seg000:0994                 jz      short loc_998
seg000:0996
seg000:0996 loc_996:                                ; CODE XREF: seg000:loc_996j
seg000:0996                 jmp     short loc_996   ; Video ram test unsuccessful => LOCK UP MACHINE.
seg000:0998 ; ---------------------------------------------------------------------------
seg000:0998 ; START OF FUNCTION CHUNK FOR sub_84
seg000:0998
seg000:0998 loc_998:                                ; CODE XREF: sub_84+902j
seg000:0998                                         ; seg000:0994j
seg000:0998                 call    SET_and_RESET_Z80__sub_13F4
seg000:099B                 xor     cx, cx
seg000:099D                 mov     ds, cx
seg000:099F                 assume ds:nothing
seg000:099F                 mov     ds:0A000h, cx
seg000:09A3
seg000:09A3 loc_9A3:                                ; CODE XREF: sub_84+927j
seg000:09A3                 mov     ax, ds:0A000h
seg000:09A6                 cmp     ax, 523Ch
seg000:09A9                 jz      short Z80_CRC_OK__loc_9BA ;
seg000:09A9                                         ;
seg000:09AB                 loop    loc_9A3
seg000:09AD                 mov     al, 0CFh ; '-'  ; LSB: 1111 - MSB: 1100 - LED D4 + D5 OFF [MAIN BOARD - Z80 CRC - ERROR 18]
seg000:09AD                                         ;
seg000:09AF                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:09AF                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:09AF                                         ;
seg000:09B1                 mov     si, 8179h       ; [RBHIGH.16K]
seg000:09B1                                         ; 8179: 02 1e 83 42 8a
seg000:09B1                                         ;         831e "18 - "
seg000:09B1                                         ;         8a42  "Main Board"
seg000:09B1                                         ;         [MAIN BOARD - Z80 CRC - ERROR 18]  - FATAL
seg000:09B4                 or      dl, 2
seg000:09B7                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9 ; Emit SYSTEM MESSAGE (will hang in sit n wait loop if DL = 2)!
seg000:09BA
seg000:09BA Z80_CRC_OK__loc_9BA:                    ; CODE XREF: sub_84+925j
seg000:09BA                 xor     ax, ax
seg000:09BC                 mov     ds, ax
seg000:09BE                 mov     byte ptr ds:0B000h, 0FFh ;
seg000:09BE                                         ;
seg000:09C3                 mov     al, 4Fh ; 'O'   ; LSB: 1111 - MSB: 0100 - LED D4 OFF
seg000:09C3                                         ;
seg000:09C5                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:09C5                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:09C5                                         ;
seg000:09C7                 mov     si, 80CAh       ; [RBHIGH.16K]
seg000:09C7                                         ; 80ca : 03 65 82 96 86 6e 82
seg000:09C7                                         ;
seg000:09C7                                         ;         8265 : ESC[1;5;7m
seg000:09C7                                         ;         8696 : TESTING...
seg000:09C7                                         ;         826e : ESC[0m
seg000:09CA                 mov     cx, 0F400h
seg000:09CD                 or      dl, 2
seg000:09D0                 call    EMIT_SETUP_STRING__sub_19F
seg000:09D3                 and     dl, 0DDh
seg000:09D6                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:09D8                 test    dl, 81h         ;
seg000:09D8                                         ;
seg000:09DB                 jnz     short loc_9DF   ;
seg000:09DB                                         ;
seg000:09DD                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:09DD                                         ;
seg000:09DF
seg000:09DF loc_9DF:                                ; CODE XREF: sub_84+957j
seg000:09DF                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:09DF                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:09DF                                         ;
seg000:09E1                 call    W18_EXTRA_TEST_20000_DFFFF__sub_10A5 ; Display ON. Set keyboard. Set 4800bps  &  HIGH RAM ($20000 ff.) tests (depends on W18)
seg000:09E4                 cli
seg000:09E5                 xor     ax, ax
seg000:09E7                 mov     di, 0FFFFh
seg000:09EA                 mov     bp, 9F0h        ; ZERO PAGE TESTS (0 - 64K) /
seg000:09EA                                         ; JUMP to 9f0 afterwards.
seg000:09ED                 jmp     BITTEST_AX_n_jump_BP__loc_FA8
seg000:09ED ; END OF FUNCTION CHUNK FOR sub_84
seg000:09F0 ; ---------------------------------------------------------------------------
seg000:09F0                 jnz     short ERROR_RAM64K__loc_A03 ;
seg000:09F0                                         ; ==============================================================
seg000:09F0                                         ; => execution continues at JNZ (9f0) after BITTEST_AX_n_jump <=
seg000:09F0                                         ; => ERROR 19 if 0-64K test was unsuccessful.                 <=
seg000:09F0                                         ; ==============================================================
seg000:09F0                                         ;
seg000:09F2                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:09F2                                         ;
seg000:09F4                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:09F4                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:09F6                 mov     ax, 1000h
seg000:09F9                 mov     ds, ax
seg000:09FB                 assume ds:nothing
seg000:09FB                 mov     bp, 0A01h       ; 64K - 128K TESTS ($10000 on / still 64K) /
seg000:09FB                                         ; JUMP to a01 afterwards.
seg000:09FE                 jmp     BITTEST_AX_n_jump_BP__loc_FA8
seg000:0A01 ; ---------------------------------------------------------------------------
seg000:0A01                 jz      short loc_A0C
seg000:0A03
seg000:0A03 ERROR_RAM64K__loc_A03:                  ; CODE XREF: seg000:09F0j
seg000:0A03                 mov     si, 8188h       ; 02 24 83 42-8A
seg000:0A03                                         ;         8324 "19 - "
seg000:0A03                                         ;         8a42 "Main Board [ram 0-64K]" [FATAL]
seg000:0A06                 or      dl, 2
seg000:0A09                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:0A0C
seg000:0A0C loc_A0C:                                ; CODE XREF: seg000:0A01j
seg000:0A0C                 xor     ax, ax
seg000:0A0E                 mov     ds, ax
seg000:0A10                 assume ds:nothing
seg000:0A10                 mov     byte ptr ds:0B000h, 0FFh ; Z80 LED + ZFLIP CONTROL
seg000:0A10                                         ; Bits 0-3 set Z80 diagnostic register bits 4-7.
seg000:0A10                                         ; - see PAGE 157 / 158 of manual -
seg000:0A10                                         ;
seg000:0A15                 call    SET_and_RESET_Z80__sub_13F4 ;
seg000:0A15                                         ;
seg000:0A18                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:0A18                                         ;      See TABLE 4-29 and 4-15
seg000:0A18                                         ;
seg000:0A1A                 test    al, 4           ; W14  MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:0A1C                 jz      short Z80_MAGIC__loc_A30 ;
seg000:0A1C                                         ;
seg000:0A1E                 test    dl, 81h
seg000:0A21                 jnz     short Z80_MAGIC__loc_A30 ;
seg000:0A21                                         ;
seg000:0A23                 mov     ax, 0
seg000:0A26                 mov     ds, ax
seg000:0A28                 xor     al, al
seg000:0A2A                 mov     byte ptr ds:sub_503, al
seg000:0A2D                 jmp     loc_15F3
seg000:0A30 ; ---------------------------------------------------------------------------
seg000:0A30
seg000:0A30 Z80_MAGIC__loc_A30:                     ; CODE XREF: seg000:0A1Cj
seg000:0A30                                         ; seg000:0A21j
seg000:0A30                 cli
seg000:0A31
seg000:0A31 loc_A31:                                ;
seg000:0A31                 jmp     $+3             ; keep AX
seg000:0A34                 mov     ax, 6Fh ; 'o'
seg000:0A37                 call    SET_DIAG_LEDs__sub_B9A ; OUTPUT 6f => LEDs (1101111)
seg000:0A37                                         ; = ERROR ???
seg000:0A3A                 cli
seg000:0A3B                 cld
seg000:0A3C                 call    ES_ee00__DS_0__sub_AA6 ; ES = EE00   DS = 0000
seg000:0A3F                 mov     ax, sp
seg000:0A41                 mov     word ptr ds:loc_1004+2, ax
seg000:0A44                 mov     byte ptr ds:loc_1004+1, dl
seg000:0A48                 call    sub_D72
seg000:0A4B                 call    SetKBD_set4800_Z80Reset_BLANK_READ_NVM__sub_AB1 ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:0A4B                                         ; and read
seg000:0A4B                                         ; 8088 REGISTER [0] => AL
seg000:0A4B                                         ;
seg000:0A4E                 mov     word ptr ds:unk_302A, 0Fh
seg000:0A54                 mov     bl, 84h ; 'ä'
seg000:0A56                 call    NORMAL_SCRN_80_132SWITCH__sub_ABC ;
seg000:0A56                                         ;
seg000:0A59                 call    ES_ee00__DS_0__sub_AA6 ; ES = EE00   DS = 0000
seg000:0A5C                 xor     dh, dh          ; DH = 0       *****************************
seg000:0A5E                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00 => IRQ TABLE 2 => COLD BOOT ?)
seg000:0A5E                                         ;              *****************************
seg000:0A61                 call    SetKBD_set4800_Z80Reset_BLANK_READ_NVM__sub_AB1 ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:0A61                                         ;    and read
seg000:0A61                                         ; 8088 REGISTER [0] => AL
seg000:0A61                                         ;
seg000:0A64                 call    INIT_132cols_60Hz_NI__sub_AE2 ; Set 132 columns, 60 Hz. NON INTERLACED
seg000:0A67                 call    SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C
seg000:0A6A                 call    VIDEORAM_EE000__loc_BD2 ; does something in video ram EE000
seg000:0A6D                 call    PRN_CONTROL_7201
seg000:0A70                 mov     ax, 16Fh
seg000:0A73                 call    SET_DIAG_LEDs__sub_B9A ; OUTPUT 16f -> LEDs (1101111)
seg000:0A73                                         ; = ERROR ???
seg000:0A73                                         ;
seg000:0A76                 call    sub_C06         ; MOST LIKELY A DIAGNOSTIC ROUTINE (DIAG + PORT LOOPBACK TESTS)
seg000:0A79                 call    SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C
seg000:0A7C                 call    sub_C6D
seg000:0A7F                 call    SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C ;
seg000:0A7F                                         ;
seg000:0A82                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:0A82                                         ;      See TABLE 4-29 and 4-15
seg000:0A84                 and     al, 6
seg000:0A86                 test    al, 6
seg000:0A88                 jnz     short NO_EEE__loc_A9D ; Jump if W13 + W14 test jumpers are NOT BRIDGED.
seg000:0A88                                         ;
seg000:0A8A                 mov     ax, word ptr ds:loc_1004+2 ; W13 + W14 SET : SCREEN ALIGNMENT TEST (fill screen with EEE...)
seg000:0A8D                 mov     sp, ax
seg000:0A8F                 mov     cx, 0F400h
seg000:0A92                 mov     si, 8227h       ; *****************************************************************
seg000:0A92                                         ; 825a : "ESC#8" (screen alignment display / fill screen with "Es")
seg000:0A92                                         ; *****************************************************************
seg000:0A95                 call    EMIT_SETUP_STRING__sub_19F
seg000:0A98                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0A98                                         ;
seg000:0A9A                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:0A9A                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:0A9C                 hlt                     ; HALT CPU.
seg000:0A9D
seg000:0A9D NO_EEE__loc_A9D:                        ; CODE XREF: seg000:0A88j
seg000:0A9D                 call    ES_ee00__DS_0__sub_AA6 ; ES = EE00   DS = 0000
seg000:0AA0                 call    sub_D87
seg000:0AA3                 jmp     loc_D99         ; TEST HIREM, NVM READ & CHECK.
seg000:0AA6
seg000:0AA6 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0AA6
seg000:0AA6
seg000:0AA6 ES_ee00__DS_0__sub_AA6 proc near        ; CODE XREF: seg000:0A3Cp
seg000:0AA6                                         ; seg000:0A59p
seg000:0AA6                                         ; seg000:NO_EEE__loc_A9Dp
seg000:0AA6                                         ; INIT_132cols_60Hz_NI__sub_AE2+3p
seg000:0AA6                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4Cp
seg000:0AA6                                         ; seg000:VIDEORAM_EE000__loc_BD2p
seg000:0AA6                                         ; sub_C06p sub_C6Dp
seg000:0AA6                                         ; sub_CC2p
seg000:0AA6                 mov     ax, 0EE00h
seg000:0AA9                 mov     es, ax
seg000:0AAB                 assume es:nothing
seg000:0AAB                 mov     ax, 0
seg000:0AAE                 mov     ds, ax
seg000:0AB0                 retn
seg000:0AB0 ES_ee00__DS_0__sub_AA6 endp
seg000:0AB0
seg000:0AB1
seg000:0AB1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0AB1
seg000:0AB1
seg000:0AB1 SetKBD_set4800_Z80Reset_BLANK_READ_NVM__sub_AB1 proc near
seg000:0AB1                                         ; CODE XREF: seg000:0A4Bp
seg000:0AB1                                         ; seg000:0A61p sub_C06+63p
seg000:0AB1                 cli
seg000:0AB2                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:0AB5                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:0AB5                                         ;
seg000:0AB7                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:0AB7                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:0AB9                 in      al, 0
seg000:0ABB                 retn
seg000:0ABB SetKBD_set4800_Z80Reset_BLANK_READ_NVM__sub_AB1 endp
seg000:0ABB
seg000:0ABC
seg000:0ABC ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0ABC
seg000:0ABC
seg000:0ABC NORMAL_SCRN_80_132SWITCH__sub_ABC proc near ; CODE XREF: seg000:0A56p
seg000:0ABC                 call    sub_D72         ; PARAMETER : bl ($50 or $84)
seg000:0ABF                 cmp     bl, 50h ; 'P'
seg000:0AC2                 jz      short COLS80__loc_ADD ;
seg000:0AC2                                         ;
seg000:0AC4                 mov     si, 821Eh       ; 821e => 8249 ESC[?3h  (132 column)
seg000:0AC7
seg000:0AC7 loc_AC7:                                ; CODE XREF: NORMAL_SCRN_80_132SWITCH__sub_ABC+24j
seg000:0AC7                 mov     cx, 0F400h
seg000:0ACA                 call    EMIT_SETUP_STRING__sub_19F
seg000:0ACD                 mov     si, 8221h       ; 8221 => 824f  ESC[?5l : selects normal screen, a black screen background with white characters
seg000:0AD0                 call    EMIT_SETUP_STRING__sub_19F
seg000:0AD3                 mov     si, 8224h       ; 8224 => 8255 ESC [2B
seg000:0AD6                 call    EMIT_SETUP_STRING__sub_19F
seg000:0AD9                 call    sub_D87
seg000:0ADC                 retn
seg000:0ADD ; ---------------------------------------------------------------------------
seg000:0ADD
seg000:0ADD COLS80__loc_ADD:                        ; CODE XREF: NORMAL_SCRN_80_132SWITCH__sub_ABC+6j
seg000:0ADD                 mov     si, 821Bh       ; 821b => 8243  [?3l sets the Rainbow to 80 column mode.
seg000:0AE0                 jmp     short loc_AC7
seg000:0AE0 NORMAL_SCRN_80_132SWITCH__sub_ABC endp
seg000:0AE0
seg000:0AE2
seg000:0AE2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0AE2
seg000:0AE2
seg000:0AE2 INIT_132cols_60Hz_NI__sub_AE2 proc near ; CODE XREF: seg000:0A64p
seg000:0AE2                 mov     bx, 15h
seg000:0AE5                 call    ES_ee00__DS_0__sub_AA6
seg000:0AE8                 mov     cx, 800h
seg000:0AEB                 mov     al, 10h
seg000:0AED                 out     4, al           ; $10 => DC011 - PORT 4 // 132 column mode
seg000:0AEF                 mov     al, 20h ; ' '
seg000:0AF1                 out     4, al           ; $20 => DC011 - PORT 4 // 60 Hz mode NON INTERLACED
seg000:0AF3                 mov     dx, 10Ch
seg000:0AF6                 mov     al, 9
seg000:0AF8                 out     dx, al          ; 09 => PORT 10c // Clear vertical frequency interrupt
seg000:0AF9                 call    sub_B2C
seg000:0AFC                 mov     cx, bx
seg000:0AFE                 call    sub_B2C
seg000:0B01                 cmp     word ptr ds:unk_3031, 0
seg000:0B06                 jnz     short VIDEO_VFR_ERROR10__loc_B17
seg000:0B08                 add     cx, 5
seg000:0B0B                 call    sub_B2C
seg000:0B0E                 cmp     word ptr ds:unk_3031, 0
seg000:0B13                 jz      short VIDEO_VFR_ERROR10__loc_B17
seg000:0B15                 jmp     short loc_B25
seg000:0B17 ; ---------------------------------------------------------------------------
seg000:0B17
seg000:0B17 VIDEO_VFR_ERROR10__loc_B17:             ; CODE XREF: INIT_132cols_60Hz_NI__sub_AE2+24j
seg000:0B17                                         ; INIT_132cols_60Hz_NI__sub_AE2+31j
seg000:0B17                 mov     word ptr ds:unk_302A, 6Fh ; 'o'
seg000:0B1D                 mov     word ptr ds:loc_1002+1, 818Dh ; 818d : 82f4 "10 - "
seg000:0B1D                                         ;               8a42 "Main Board" (video, vfr) FATAL
seg000:0B23                 jmp     short locret_B2B ; retn
seg000:0B25 ; ---------------------------------------------------------------------------
seg000:0B25
seg000:0B25 loc_B25:                                ; CODE XREF: INIT_132cols_60Hz_NI__sub_AE2+33j
seg000:0B25                 and     word ptr ds:unk_302A, 0Fh
seg000:0B2B
seg000:0B2B locret_B2B:                             ; CODE XREF: INIT_132cols_60Hz_NI__sub_AE2+41j
seg000:0B2B                 retn
seg000:0B2B INIT_132cols_60Hz_NI__sub_AE2 endp
seg000:0B2B
seg000:0B2C
seg000:0B2C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0B2C
seg000:0B2C
seg000:0B2C sub_B2C         proc near               ; CODE XREF: INIT_132cols_60Hz_NI__sub_AE2+17p
seg000:0B2C                                         ; INIT_132cols_60Hz_NI__sub_AE2+1Cp
seg000:0B2C                                         ; INIT_132cols_60Hz_NI__sub_AE2+29p
seg000:0B2C                 push    cx
seg000:0B2D                 mov     word ptr ds:unk_3031, 0
seg000:0B33                 sti
seg000:0B34
seg000:0B34 loc_B34:                                ; CODE XREF: sub_B2C+18j
seg000:0B34                 push    cx
seg000:0B35                 mov     cx, 14h         ; HARD CODED DELAY VALUE (suitable for 8088 CPU).  Change to 00020 for NEC_V20.
seg000:0B38
seg000:0B38 loc_B38:                                ; CODE XREF: sub_B2C+15j
seg000:0B38                 cmp     word ptr ds:unk_3031, 0
seg000:0B3D                 jnz     short loc_B49
seg000:0B3F                 mul     ax
seg000:0B41                 loop    loc_B38
seg000:0B43                 pop     cx
seg000:0B44                 loop    loc_B34
seg000:0B46
seg000:0B46 loc_B46:                                ; CODE XREF: sub_B2C+1Ej
seg000:0B46                 cli
seg000:0B47                 pop     cx
seg000:0B48                 retn
seg000:0B49 ; ---------------------------------------------------------------------------
seg000:0B49
seg000:0B49 loc_B49:                                ; CODE XREF: sub_B2C+11j
seg000:0B49                 pop     cx
seg000:0B4A                 jmp     short loc_B46
seg000:0B4A sub_B2C         endp
seg000:0B4A
seg000:0B4C
seg000:0B4C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0B4C
seg000:0B4C
seg000:0B4C SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C proc near ; CODE XREF: seg000:0A67p
seg000:0B4C                                         ; seg000:0A79p
seg000:0B4C                                         ; seg000:0A7Fp
seg000:0B4C                 call    ES_ee00__DS_0__sub_AA6
seg000:0B4F                 mov     byte ptr ds:sub_503, 0
seg000:0B54                 mov     ax, word ptr ds:unk_302A
seg000:0B57                 call    SET_DIAG_LEDs__sub_B9A ; (sub_C) : Controls 7 LEDs at back of computer.
seg000:0B5A                 cmp     ax, 0Fh
seg000:0B5D                 jz      short LUCKY_RET__locret_B99 ; retn
seg000:0B5D                                         ;
seg000:0B5D                                         ;
seg000:0B5F                 cmp     ax, 16Fh        ; This routine will, under certain conditions
seg000:0B5F                                         ; hang the computer in SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:0B62                 jz      short loc_B66   ;
seg000:0B62                                         ;
seg000:0B64                 jmp     short SIT_n_WAIT__loc_B86
seg000:0B66 ; ---------------------------------------------------------------------------
seg000:0B66
seg000:0B66 loc_B66:                                ; CODE XREF: SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+16j
seg000:0B66                 mov     dl, byte ptr ds:loc_1004+1
seg000:0B6A                 call    sub_D72
seg000:0B6D                 push    ds
seg000:0B6E                 call    TEST_PRN__sub_1718
seg000:0B71                 pop     ds
seg000:0B72                 mov     byte ptr ds:loc_1004+1, dl
seg000:0B76                 call    sub_D87
seg000:0B79                 test    byte ptr ds:sub_503, 2
seg000:0B7E                 jnz     short LUCKY_RET__locret_B99 ;
seg000:0B7E                                         ;
seg000:0B80                 mov     ax, 16Fh
seg000:0B83                 call    SET_DIAG_LEDs__sub_B9A ; (sub_C) : Controls 7 LEDs at back of computer.
seg000:0B86
seg000:0B86 SIT_n_WAIT__loc_B86:                    ; CODE XREF: SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+18j
seg000:0B86                 mov     ax, word ptr ds:loc_1004+2
seg000:0B89                 mov     sp, ax
seg000:0B8B                 mov     si, word ptr ds:loc_1002+1
seg000:0B8F                 or      dl, 2
seg000:0B92                 and     dl, 0DFh        ; 11011111
seg000:0B95                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:0B98                 hlt
seg000:0B99
seg000:0B99 LUCKY_RET__locret_B99:                  ; CODE XREF: SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+11j
seg000:0B99                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+32j
seg000:0B99                 retn
seg000:0B99 SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C endp
seg000:0B99
seg000:0B9A
seg000:0B9A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0B9A
seg000:0B9A
seg000:0B9A SET_DIAG_LEDs__sub_B9A proc near        ; CODE XREF: j_CONTROL_ALL_LEDs__sub_B9Aj
seg000:0B9A                                         ; seg000:0A37p
seg000:0B9A                                         ; seg000:0A73p
seg000:0B9A                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+Bp
seg000:0B9A                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+37p
seg000:0B9A                 push    ax              ; Controls 7 LEDs at back of computer.
seg000:0B9A                                         ;
seg000:0B9A                                         ; SUBROUTINE (sub_C) :
seg000:0B9B                 push    ds
seg000:0B9C                 push    bx
seg000:0B9D                 xor     bx, bx
seg000:0B9F                 mov     ds, bx
seg000:0BA1                 or      al, 0Fh         ; set the 4 least significant bits to '1'
seg000:0BA1                                         ;
seg000:0BA3                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:0BA3                                         ;
seg000:0BA5                 mov     ds:0B000h, ah   ; set Z80 control bits
seg000:0BA9                 pop     bx
seg000:0BAA                 pop     ds
seg000:0BAB                 pop     ax
seg000:0BAC                 retn
seg000:0BAC SET_DIAG_LEDs__sub_B9A endp
seg000:0BAC
seg000:0BAD
seg000:0BAD ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0BAD
seg000:0BAD
seg000:0BAD PRN_CONTROL_7201 proc near              ; CODE XREF: seg000:0A6Dp
seg000:0BAD                 push    ds              ;
seg000:0BAD                                         ; NOTHING 'BAD' HERE -
seg000:0BAD                                         ;
seg000:0BAE                 mov     ax, 0F400h
seg000:0BB1                 mov     ds, ax
seg000:0BB3                 assume ds:nothing
seg000:0BB3                 xor     ax, 1
seg000:0BB6                 mov     si, 0BC3h
seg000:0BB9                 mov     cx, 0Eh
seg000:0BBC
seg000:0BBC loc_BBC:                                ; CODE XREF: PRN_CONTROL_7201+12j
seg000:0BBC                 lodsb
seg000:0BBD                 out     43h, al         ; Printer Control/ Status Reg. (7201) RO/WO
seg000:0BBF                 loopne  loc_BBC
seg000:0BC1                 pop     ds
seg000:0BC2                 assume ds:nothing
seg000:0BC2                 retn
seg000:0BC2 PRN_CONTROL_7201 endp
seg000:0BC2
seg000:0BC2 ; ---------------------------------------------------------------------------
seg000:0BC3                 db    4                 ; 14 bytes used above.
seg000:0BC4                 db  10h
seg000:0BC5                 db    1
seg000:0BC6                 db  18h
seg000:0BC7                 db    2
seg000:0BC8                 db    0
seg000:0BC9                 db    3
seg000:0BCA                 db 0C0h ; +
seg000:0BCB                 db    5
seg000:0BCC                 db    0
seg000:0BCD                 db    6
seg000:0BCE                 db 0CFh ; -
seg000:0BCF                 db    7
seg000:0BD0                 db 0F3h ; =
seg000:0BD1                 db    0
seg000:0BD2 ; ---------------------------------------------------------------------------
seg000:0BD2
seg000:0BD2 VIDEORAM_EE000__loc_BD2:                ; CODE XREF: seg000:0A6Ap
seg000:0BD2                 call    ES_ee00__DS_0__sub_AA6 ; ES = EE00
seg000:0BD5                 mov     di, 12h
seg000:0BD8                 xor     bx, bx
seg000:0BDA                 xor     ax, 1
seg000:0BDD                 mov     al, 7Fh ; ''
seg000:0BDF                 stosb
seg000:0BE0                 mov     cx, 0FDh ; '²'
seg000:0BE3                 mov     al, 0
seg000:0BE5
seg000:0BE5 loc_BE5:                                ; CODE XREF: seg000:0BF2j
seg000:0BE5                                         ; seg000:0C04j
seg000:0BE5                 cmp     byte ptr es:[di], 0FFh
seg000:0BE9                 jz      short loc_BFC
seg000:0BEB                 stosb
seg000:0BEC
seg000:0BEC loc_BEC:                                ; CODE XREF: seg000:0BF0j
seg000:0BEC                 inc     al
seg000:0BEE                 cmp     al, 7Fh ; ''
seg000:0BF0                 jz      short loc_BEC
seg000:0BF2                 loopne  loc_BE5
seg000:0BF4                 mov     al, 0FFh
seg000:0BF6                 stosb
seg000:0BF7                 mov     ax, 6
seg000:0BFA                 stosw
seg000:0BFB                 retn
seg000:0BFC ; ---------------------------------------------------------------------------
seg000:0BFC
seg000:0BFC loc_BFC:                                ; CODE XREF: seg000:0BE9j
seg000:0BFC                 push    ax
seg000:0BFD                 inc     di
seg000:0BFE                 mov     ax, es:[di]
seg000:0C01                 mov     di, ax
seg000:0C03                 pop     ax
seg000:0C04                 jmp     short loc_BE5
seg000:0C06
seg000:0C06 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0C06
seg000:0C06
seg000:0C06 sub_C06         proc near               ; CODE XREF: seg000:0A76p
seg000:0C06                 call    ES_ee00__DS_0__sub_AA6 ;
seg000:0C06                                         ; MOST LIKELY A DIAGNOSTIC ROUTINE (DIAG + PORT LOOPBACK TESTS)
seg000:0C09                 mov     es, ax
seg000:0C0B                 assume es:nothing
seg000:0C0B                 mov     cx, 1FFFh
seg000:0C0E                 mov     di, 1008h
seg000:0C11                 mov     ax, 0
seg000:0C14                 mov     es, ax
seg000:0C16                 xor     al, al
seg000:0C18                 and     ah, 1
seg000:0C1B                 rep stosb
seg000:0C1D                 mov     cx, 1FFFh
seg000:0C20                 mov     di, 1008h
seg000:0C23                 cli
seg000:0C24                 mov     word ptr ds:unk_3031, 0 ;
seg000:0C24                                         ;
seg000:0C2A                 mov     dx, 10Ch
seg000:0C2D                 mov     al, 9
seg000:0C2F                 out     dx, al          ; 09 => PORT 10c // Clear vertical frequency interrupt
seg000:0C2F                                         ;
seg000:0C30                 mov     al, 0B1h ; '¦'  ; 10110001 : ZRESET / DIAG LOOPBACK / PORT LOOPBACK / READ-RECALL NVM
seg000:0C30                                         ;
seg000:0C32                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:0C32                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:0C34                 in      al, 0           ; ?
seg000:0C36                 mov     al, 3
seg000:0C38                 out     43h, al         ; $03 => PRINTER - PORT 43
seg000:0C3A                 mov     al, 0C1h ; '-'
seg000:0C3C                 out     43h, al         ; $c1 => PRINTER - PORT 43
seg000:0C3E                 mov     al, 0E8h ; 'F'
seg000:0C40                 out     43h, al         ; $e8 => PRINTER - PORT 43
seg000:0C42                 mov     al, 10h
seg000:0C44                 out     43h, al         ; $10 => PRINTER - PORT 43
seg000:0C46                 mov     al, 30h ; '0'
seg000:0C48                 out     43h, al         ; $30 => PRINTER - PORT 43
seg000:0C48                                         ;
seg000:0C4A                 mov     al, 10h
seg000:0C4C                 out     4, al           ; $10 => DC011 - PORT 4 // 132 column mode
seg000:0C4E                 mov     al, 20h ; ' '
seg000:0C50                 out     4, al           ; $20 => DC011 - PORT 4 // 60 Hz mode NON INTERLACED
seg000:0C52                 sti
seg000:0C53
seg000:0C53 loc_C53:                                ; CODE XREF: sub_C06+52j
seg000:0C53                 cmp     word ptr ds:unk_3031, 0
seg000:0C58                 jz      short loc_C53
seg000:0C5A                 cli
seg000:0C5B                 wait
seg000:0C5C                 mov     al, 10h
seg000:0C5E                 out     43h, al
seg000:0C60                 xor     ax, 1
seg000:0C63
seg000:0C63 loc_C63:                                ; CODE XREF: sub_C06+61j
seg000:0C63                 wait
seg000:0C64                 in      al, 41h
seg000:0C66                 stosb
seg000:0C67                 loopne  loc_C63
seg000:0C69                 call    SetKBD_set4800_Z80Reset_BLANK_READ_NVM__sub_AB1
seg000:0C6C                 retn
seg000:0C6C sub_C06         endp
seg000:0C6C
seg000:0C6D
seg000:0C6D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0C6D
seg000:0C6D
seg000:0C6D sub_C6D         proc near               ; CODE XREF: seg000:0A7Cp
seg000:0C6D                 call    ES_ee00__DS_0__sub_AA6 ; ES = EE00   DS = 0000
seg000:0C70                 mov     es, ax
seg000:0C72                 mov     di, 3022h
seg000:0C75                 mov     si, 1303h
seg000:0C78                 mov     cx, 4
seg000:0C7B
seg000:0C7B loc_C7B:                                ; CODE XREF: sub_C6D+26j
seg000:0C7B                 mov     ax, [si]
seg000:0C7D                 stosw
seg000:0C7E                 xchg    di, si
seg000:0C80                 xor     ax, ax
seg000:0C82                 xor     ax, 1
seg000:0C85                 mov     ax, 0
seg000:0C88                 stosw
seg000:0C89                 stosb
seg000:0C8A                 dec     di
seg000:0C8B                 dec     di
seg000:0C8C                 dec     di
seg000:0C8D                 xchg    di, si
seg000:0C8F                 add     si, 2FDh
seg000:0C93                 loopne  loc_C7B
seg000:0C95                 mov     dl, 40h ; '@'
seg000:0C97                 mov     bx, 1008h
seg000:0C9A                 mov     bp, 3007h
seg000:0C9D                 jmp     CRC_CHECK0__loc_2A1 ; CRC check
seg000:0C9D sub_C6D         endp
seg000:0C9D
seg000:0CA0 ; ---------------------------------------------------------------------------
seg000:0CA0 ; START OF FUNCTION CHUNK FOR sub_84
seg000:0CA0
seg000:0CA0 MainBoard_VIDEO_FATAL__loc_CA0:         ; CODE XREF: sub_84:VIDEO_FATAL__loc_339j
seg000:0CA0                 call    sub_CC2
seg000:0CA3                 mov     cx, 4
seg000:0CA6                 mov     si, 3022h
seg000:0CA9                 mov     di, 301Ah
seg000:0CAC                 xor     ax, ax
seg000:0CAE                 xor     ax, 1
seg000:0CB1                 repe cmpsw
seg000:0CB3                 jcxz    short locret_CC1
seg000:0CB5                 mov     ax, 8147h       ; [RBHIGH.16K] :
seg000:0CB5                                         ; 8147: 02 c7 82 42 8a
seg000:0CB5                                         ;
seg000:0CB5                                         ;         82c7 "1 - "
seg000:0CB5                                         ;         8a42 "Main Board [video]" [FATAL]
seg000:0CB5                                         ;
seg000:0CB8                 mov     word ptr ds:loc_1002+1, ax
seg000:0CBB                 mov     word ptr ds:unk_302A, 16Fh
seg000:0CC1
seg000:0CC1 locret_CC1:                             ; CODE XREF: sub_84+C2Fj
seg000:0CC1                 retn
seg000:0CC1 ; END OF FUNCTION CHUNK FOR sub_84
seg000:0CC2
seg000:0CC2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0CC2
seg000:0CC2
seg000:0CC2 sub_CC2         proc near               ; CODE XREF: sub_84:MainBoard_VIDEO_FATAL__loc_CA0p
seg000:0CC2                 call    ES_ee00__DS_0__sub_AA6
seg000:0CC5                 mov     es, ax
seg000:0CC7                 mov     ds:word_3008, dx
seg000:0CCB                 mov     si, 3008h
seg000:0CCE                 mov     di, 300Ah
seg000:0CD1                 and     byte ptr ds:unk_302C, 0
seg000:0CD6                 mov     cl, 4
seg000:0CD8                 call    sub_D48
seg000:0CDB                 xor     ax, ax
seg000:0CDD                 mov     di, 300Eh
seg000:0CE0                 stosw
seg000:0CE1                 stosw
seg000:0CE2                 mov     si, 300Ah
seg000:0CE5                 mov     di, 300Eh
seg000:0CE8                 mov     cl, 2
seg000:0CEA                 mov     ax, 8000h
seg000:0CED
seg000:0CED loc_CED:                                ; CODE XREF: sub_CC2+4Dj
seg000:0CED                 mov     ch, 10h
seg000:0CEF
seg000:0CEF loc_CEF:                                ; CODE XREF: sub_CC2+45j
seg000:0CEF                 test    [si], ax
seg000:0CF1                 jnz     short loc_CF9
seg000:0CF3                 dec     ch
seg000:0CF5                 ror     ax, 1
seg000:0CF7                 jmp     short loc_D03
seg000:0CF9 ; ---------------------------------------------------------------------------
seg000:0CF9
seg000:0CF9 loc_CF9:                                ; CODE XREF: sub_CC2+2Fj
seg000:0CF9                 or      [di], ax
seg000:0CFB                 ror     ax, 1
seg000:0CFD                 dec     ch
seg000:0CFF                 jz      short loc_D09
seg000:0D01                 or      [di], ax
seg000:0D03
seg000:0D03 loc_D03:                                ; CODE XREF: sub_CC2+35j
seg000:0D03                 ror     ax, 1
seg000:0D05                 dec     ch
seg000:0D07                 jnz     short loc_CEF
seg000:0D09
seg000:0D09 loc_D09:                                ; CODE XREF: sub_CC2+3Dj
seg000:0D09                 inc     di
seg000:0D0A                 inc     di
seg000:0D0B                 inc     si
seg000:0D0C                 inc     si
seg000:0D0D                 dec     cl
seg000:0D0F                 jnz     short loc_CED
seg000:0D11                 mov     si, 300Eh
seg000:0D14                 mov     di, 3012h
seg000:0D17                 mov     cl, 4
seg000:0D19                 mov     byte ptr ds:unk_302C, 1
seg000:0D1E                 call    sub_D48
seg000:0D21
seg000:0D21 loc_D21:                                ; DATA XREF: seg000:10CFr
seg000:0D21                 mov     si, 3012h
seg000:0D24                 mov     di, 301Ah
seg000:0D27                 mov     ch, 8
seg000:0D29                 mov     cl, 8
seg000:0D2B
seg000:0D2B loc_D2B:                                ; CODE XREF: sub_CC2+83j
seg000:0D2B                 lodsb
seg000:0D2C                 mov     dl, al
seg000:0D2E                 xor     bl, bl
seg000:0D30
seg000:0D30 loc_D30:                                ; CODE XREF: sub_CC2+7Aj
seg000:0D30                 mov     al, dl
seg000:0D32                 and     al, 80h
seg000:0D34                 or      bl, al
seg000:0D36                 ror     bl, 1
seg000:0D38                 rol     dl, 1
seg000:0D3A                 dec     ch
seg000:0D3C                 jnz     short loc_D30
seg000:0D3E                 rol     bl, 1
seg000:0D40                 mov     al, bl
seg000:0D42                 stosb
seg000:0D43                 dec     cl
seg000:0D45                 jnz     short loc_D2B
seg000:0D47                 retn
seg000:0D47 sub_CC2         endp
seg000:0D47
seg000:0D48
seg000:0D48 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0D48
seg000:0D48
seg000:0D48 sub_D48         proc near               ; CODE XREF: sub_CC2+16p
seg000:0D48                                         ; sub_CC2+5Cp sub_D48+27j
seg000:0D48                 xor     ax, ax
seg000:0D4A                 xor     bx, bx
seg000:0D4C                 mov     ch, 8
seg000:0D4E                 lodsb
seg000:0D4F                 mov     dl, al
seg000:0D51
seg000:0D51 loc_D51:                                ; CODE XREF: sub_D48+20j
seg000:0D51                 mov     al, dl
seg000:0D53                 and     al, 80h
seg000:0D55                 or      bx, ax
seg000:0D57                 rol     bx, 1
seg000:0D59                 test    byte ptr ds:unk_302C, 1
seg000:0D5E                 jz      short loc_D62
seg000:0D60                 or      bx, ax
seg000:0D62
seg000:0D62 loc_D62:                                ; CODE XREF: sub_D48+16j
seg000:0D62                 rol     bx, 1
seg000:0D64                 rol     dl, 1
seg000:0D66                 dec     ch
seg000:0D68                 jnz     short loc_D51
seg000:0D6A                 mov     ax, bx
seg000:0D6C                 stosw
seg000:0D6D                 dec     cl
seg000:0D6F                 jnz     short sub_D48
seg000:0D71                 retn
seg000:0D71 sub_D48         endp
seg000:0D71
seg000:0D72
seg000:0D72 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0D72
seg000:0D72 ; Attributes: bp-based frame
seg000:0D72
seg000:0D72 sub_D72         proc near               ; CODE XREF: EMIT_SETUP_STRING__sub_19F+Ap
seg000:0D72                                         ; EMIT_SETUP_STRING__sub_19F+4Cp
seg000:0D72                                         ; sub_503+29p sub_503+A0p
seg000:0D72                                         ; EMIT_STRING__sub_6EC+6p
seg000:0D72                                         ; seg000:0A48p
seg000:0D72                                         ; NORMAL_SCRN_80_132SWITCH__sub_ABCp
seg000:0D72                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+1Ep
seg000:0D72
seg000:0D72 arg_0           = word ptr  16h
seg000:0D72
seg000:0D72                 push    di
seg000:0D73                 push    si
seg000:0D74                 push    ax
seg000:0D75                 push    bx
seg000:0D76                 push    cx
seg000:0D77                 push    dx
seg000:0D78                 push    ds
seg000:0D79                 push    es
seg000:0D7A                 push    ss
seg000:0D7B                 push    bp
seg000:0D7C                 pushf
seg000:0D7D                 mov     bp, sp
seg000:0D7F                 mov     ax, [bp+arg_0]
seg000:0D82                 push    ax
seg000:0D83                 mov     ax, [bp+10h]
seg000:0D86                 retn
seg000:0D86 sub_D72         endp ; sp = -18h
seg000:0D86
seg000:0D87
seg000:0D87 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:0D87
seg000:0D87 ; Attributes: bp-based frame
seg000:0D87
seg000:0D87 sub_D87         proc near               ; CODE XREF: EMIT_SETUP_STRING__sub_19F+1Fp
seg000:0D87                                         ; EMIT_SETUP_STRING__sub_19F+63p
seg000:0D87                                         ; sub_503+63p sub_503+DDp
seg000:0D87                                         ; EMIT_STRING__sub_6EC+11p
seg000:0D87                                         ; seg000:0AA0p
seg000:0D87                                         ; NORMAL_SCRN_80_132SWITCH__sub_ABC+1Dp
seg000:0D87                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+2Ap
seg000:0D87
seg000:0D87 arg_14          = word ptr  16h
seg000:0D87
seg000:0D87                 pop     ax
seg000:0D88                 mov     bp, sp
seg000:0D8A                 mov     [bp+arg_14], ax
seg000:0D8D                 popf
seg000:0D8E                 pop     bp
seg000:0D8F                 pop     ss
seg000:0D90                 assume ss:nothing
seg000:0D90                 pop     es
seg000:0D91                 pop     ds
seg000:0D92                 pop     dx
seg000:0D93                 pop     cx
seg000:0D94                 pop     bx
seg000:0D95                 pop     ax
seg000:0D96                 pop     si
seg000:0D97                 pop     di
seg000:0D98                 retn
seg000:0D98 sub_D87         endp ; sp =  18h
seg000:0D98
seg000:0D99 ; ---------------------------------------------------------------------------
seg000:0D99
seg000:0D99 loc_D99:                                ; CODE XREF: seg000:0AA3j
seg000:0D99                 mov     dl, byte ptr ds:loc_1004+1
seg000:0D9D                 call    sub_69D         ; "TESTING..." or "INTERRUPTS OFF" (see MHFU flag)
seg000:0D9D                                         ;
seg000:0DA0                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0DA0                                         ;
seg000:0DA2                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:0DA2                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:0DA2                                         ;
seg000:0DA4                 call    ES_ed00__DS_ee00__sub_744 ; ES = ED00  DS = EE00
seg000:0DA7                 call    j_NVM_READ_n_CHECK__sub_3D62 ; NVM
seg000:0DAA                 jnb     short TEST_HIRAM_20000__loc_DE4 ;
seg000:0DAA                                         ;
seg000:0DAC                 call    j_NVM_WRITABLE__loc_3E10 ; make NVM writable / write to NVM (?)
seg000:0DAF                 mov     cx, 0F400h
seg000:0DB2                 mov     si, 81EFh       ; 8234 : "ESC[1;5;7m"
seg000:0DB5                 call    EMIT_SETUP_STRING__sub_19F
seg000:0DB8                 mov     si, 81ECh       ; 89e7 : "See Owners Manual"
seg000:0DBB                 call    EMIT_SETUP_STRING__sub_19F
seg000:0DBE                 mov     si, 80C5h       ; 02 48 83-86 8A
seg000:0DBE                                         ;     8348 : "25 - "
seg000:0DBE                                         ;     8a86 : "Set-Up Defaults Stored" / CAN CONTINUE
seg000:0DBE                                         ;
seg000:0DC1                 call    EMIT_SETUP_STRING__sub_19F
seg000:0DC4                 mov     si, 81F2h       ; 8275 : "ESC[0m"
seg000:0DC7                 call    EMIT_SETUP_STRING__sub_19F
seg000:0DCA                 or      dl, 4
seg000:0DCD                 call    j_NVM_READ_n_CHECK__sub_3D62
seg000:0DD0                 jnb     short TEST_HIRAM_20000__loc_DE4 ;
seg000:0DD0                                         ;
seg000:0DD2                 mov     ax, 8Fh ; 'Å'   ; OUTPUT 8f TO => LEDs (10001111); LED D5 * off *,
seg000:0DD2                                         ; - this corresponds to ERROR 14 (all Z80 LEDs are ON)
seg000:0DD5                 call    j_CONTROL_ALL_LEDs__sub_B9A
seg000:0DD8                 mov     si, 8151h       ; 02 0C 83-42 8A
seg000:0DD8                                         ;    830c : "14 - "
seg000:0DD8                                         ;    8a42 : "Main Board [nvm data]" / CAN CONTINUE
seg000:0DD8                                         ;
seg000:0DD8                                         ; "Enter Set-Up and recall default settings by pressing SHIFT/I.
seg000:0DD8                                         ; Save these settings by pressing SHIFT/S. Cycle power.
seg000:0DD8                                         ; If error persists, replace system module."
seg000:0DD8                                         ;
seg000:0DDB                 or      dl, 4
seg000:0DDE                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:0DE1
seg000:0DE1 loc_DE1:                                ; CODE XREF: seg000:0DF1j
seg000:0DE1                 jmp     CHECK_ARBITRATION__loc_F11
seg000:0DE4 ; ---------------------------------------------------------------------------
seg000:0DE4
seg000:0DE4 TEST_HIRAM_20000__loc_DE4:              ; CODE XREF: seg000:0DAAj
seg000:0DE4                                         ; seg000:0DD0j
seg000:0DE4                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:0DE7                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** ).      See TABLE 4-29 and 4-15
seg000:0DE7                                         ;
seg000:0DE9                 test    al, 4           ; W14  MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:0DEB                 jnz     short loc_DF3   ;
seg000:0DEB                                         ;
seg000:0DED                 in      al, 11h         ; STATUS READ REGISTER OF 8251A (on port $11):
seg000:0DED                                         ; * Bit 7 (DSR) - see PAGE 16/17 of PC 100 SYSTEM SPECIFICATION
seg000:0DED                                         ;
seg000:0DEF                 test    al, 80h         ; W18 jumper / DSR (bit 7)
seg000:0DF1                 jnz     short loc_DE1
seg000:0DF3
seg000:0DF3 loc_DF3:                                ; CODE XREF: seg000:0DEBj
seg000:0DF3                 xor     cx, cx
seg000:0DF5                 xor     di, di          ; SET RAM size (DI register) to ZERO
seg000:0DF7                 mov     si, 2000h       ; test location $2000 and up
seg000:0DFA
seg000:0DFA loc_DFA:                                ; CODE XREF: seg000:0E1Aj
seg000:0DFA                 xor     bx, bx
seg000:0DFC                 mov     ds, si
seg000:0DFE                 assume ds:nothing
seg000:0DFE
seg000:0DFE loc_DFE:                                ; CODE XREF: seg000:0E13j
seg000:0DFE                 mov     cl, 1Fh
seg000:0E00
seg000:0E00 HIRAM_TEST_LOOP__loc_E00:               ; CODE XREF: seg000:0E09j
seg000:0E00                 mov     [bx], bl
seg000:0E02                 mov     al, [bx]
seg000:0E04                 cmp     al, bl
seg000:0E06                 jnz     short loc_E1C   ; No RAM present?  Then exit test loop...
seg000:0E08                 inc     bx
seg000:0E09                 loop    HIRAM_TEST_LOOP__loc_E00
seg000:0E0B                 cmp     bx, 0FFFFh
seg000:0E0E                 jz      short TEST_NEXT_64K__loc_E15
seg000:0E10                 mov     bx, 0FFE0h
seg000:0E13                 jmp     short loc_DFE
seg000:0E15 ; ---------------------------------------------------------------------------
seg000:0E15
seg000:0E15 TEST_NEXT_64K__loc_E15:                 ; CODE XREF: seg000:0E0Ej
seg000:0E15                 inc     di
seg000:0E16                 add     si, 1000h
seg000:0E1A                 jmp     short loc_DFA
seg000:0E1C ; ---------------------------------------------------------------------------
seg000:0E1C
seg000:0E1C loc_E1C:                                ; CODE XREF: seg000:0E06j
seg000:0E1C                 mov     ax, 0ED00h
seg000:0E1F                 mov     es, ax
seg000:0E21                 assume es:nothing
seg000:0E21                 xor     ax, ax
seg000:0E23                 mov     al, es:0DBh     ; NOTE: a value of 00 means "128 K" on DEC-100-B.
seg000:0E27                 and     ax, 0Fh
seg000:0E2A                 cmp     ax, di
seg000:0E2C                 jz      short loc_E6F   ; actual RAM size (DI) matches NVM (AX)
seg000:0E2E                 mov     ax, di
seg000:0E30                 push    di
seg000:0E31                 push    ax
seg000:0E32                 mov     es:0DBh, al     ; write actual RAM size to ED0DB
seg000:0E36                 call    j_NVM_WRITABLE__loc_3E10
seg000:0E39                 pop     ax
seg000:0E3A                 mov     cx, 0F400h
seg000:0E3D                 mov     si, 81EFh       ; 8234 : "ESC[1;5;7m"
seg000:0E40                 call    EMIT_SETUP_STRING__sub_19F
seg000:0E43                 mov     si, 81ECh       ; 89e7 : "See Owners Manual"
seg000:0E46                 call    EMIT_SETUP_STRING__sub_19F
seg000:0E49                 mov     si, 8213h       ; 02-42 83 38 8B
seg000:0E49                                         ;    8342 : "24 - "
seg000:0E49                                         ;    8b38 : "New Memory Size = "
seg000:0E49                                         ;
seg000:0E49                                         ;
seg000:0E4C                 call    EMIT_SETUP_STRING__sub_19F
seg000:0E4F                 or      dl, 4
seg000:0E52                 pop     di
seg000:0E53                 mov     ax, di          ; actual RAM size => AX
seg000:0E55                 mov     bl, 5
seg000:0E57                 mul     bl
seg000:0E59                 mov     si, 827Ch       ; [RBHIGH.16K] OFFSET 027C - text strings from "0K" to "896 K"
seg000:0E5C                 add     si, ax          ; add AX to offset of string "0K"
seg000:0E5E                 mov     ax, 0F400h
seg000:0E61                 mov     ds, ax
seg000:0E63                 assume ds:nothing
seg000:0E63                 add     si, 0Ah         ; Defaults to the string value "128 K" (suitable for 100-B model)
seg000:0E66                 call    EMIT_STRING__sub_6EC
seg000:0E69                 mov     si, 838Ah       ; [RBHIGH.16K] $038a = "ESC [ 0 m"  - turn off all character attributes.
seg000:0E6C                 call    EMIT_STRING__sub_6EC
seg000:0E6F
seg000:0E6F loc_E6F:                                ; CODE XREF: seg000:0E2Cj
seg000:0E6F                 test    dl, 1
seg000:0E72                 jnz     short loc_E77
seg000:0E74                 jmp     CHECK_ARBITRATION__loc_F11
seg000:0E77 ; ---------------------------------------------------------------------------
seg000:0E77
seg000:0E77 loc_E77:                                ; CODE XREF: seg000:0E72j
seg000:0E77                 mov     al, 5Fh ; '_'   ; D3 + D4 LEDs OFF
seg000:0E79                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:0E79                                         ;      Shown in paragraphs 4-31 / bits in 4-17 (page 155).
seg000:0E79                                         ;
seg000:0E7B                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0E7D                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0E7D                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0E7F                 mov     ax, 0ED00h
seg000:0E82                 mov     es, ax
seg000:0E84                 mov     cl, es:0DBh
seg000:0E89                 and     cx, 0Fh
seg000:0E8D                 xor     bx, bx
seg000:0E8F                 mov     ds, bx
seg000:0E91                 assume ds:nothing
seg000:0E91                 mov     word ptr ds:j_S_ELFTEST__loc_152+2, 1092h ; alternate interrupt routine.  (CPU memory location 08)
seg000:0E97                 mov     bx, cs
seg000:0E99                 mov     word ptr ds:SYS_MESSAGE_SIT_n_WAIT__sub_9+1, bx
seg000:0E9D                 mov     si, 1000h
seg000:0EA0
seg000:0EA0 loc_EA0:                                ; CODE XREF: seg000:0EEEj
seg000:0EA0                 add     si, 1000h
seg000:0EA4                 cmp     cl, 0
seg000:0EA7                 jnz     short TEST_SI_64Kchunk__loc_EAC ;
seg000:0EA7                                         ;
seg000:0EA9                 jmp     OPTION_RAM__loc_F06 ; Set interrupt vector to 0F02 (RAM BOARD)
seg000:0EAC ; ---------------------------------------------------------------------------
seg000:0EAC
seg000:0EAC TEST_SI_64Kchunk__loc_EAC:              ; CODE XREF: seg000:0EA7j
seg000:0EAC                 dec     cl
seg000:0EAE                 push    cx
seg000:0EAF                 push    dx
seg000:0EB0                 push    si
seg000:0EB1                 mov     di, 0FFFFh      ; test 64 K chunks
seg000:0EB4                 mov     bp, 0EC0h       ; - jump to ec0 afterwards.
seg000:0EB7                 xor     ax, ax
seg000:0EB9                 mov     es, ax
seg000:0EBB                 assume es:nothing
seg000:0EBB                 mov     ax, si
seg000:0EBD                 jmp     BITTEST_AX_n_jump_BP__loc_FA8
seg000:0EC0 ; ---------------------------------------------------------------------------
seg000:0EC0                 pop     si
seg000:0EC1                 pop     dx
seg000:0EC2                 jnz     short loc_EF0
seg000:0EC4
seg000:0EC4 loc_EC4:                                ; DATA XREF: INIT_VIDEO_HW__sub_1AF0+5Ew
seg000:0EC4                                         ; seg000:loc_374Bw
seg000:0EC4                                         ; REVERSE_FIELD__sub_3752:loc_3777w
seg000:0EC4                 mov     ax, es
seg000:0EC6                 and     ax, ax
seg000:0EC8                 jnz     short loc_EF0
seg000:0ECA
seg000:0ECA loc_ECA:                                ; DATA XREF: INIT_VIDEO_HW__sub_1AF0+58w
seg000:0ECA                                         ; KBD_HOP__sub_368F:loc_36C4w
seg000:0ECA                                         ; TOGGLE_BLINK_FLIP_FLOP__3788+4w
seg000:0ECA                 mov     al, 89h ; 'ë'   ; ZRESET / PARITY TEST / READ-RECALL NVM
seg000:0ECC
seg000:0ECC loc_ECC:                                ; DATA XREF: sub_3AB5-318w
seg000:0ECC                                         ; sub_3AB5+15Fw
seg000:0ECC                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:0ECC                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:0ECE                 xor     ax, ax
seg000:0ED0
seg000:0ED0 loc_ED0:                                ; DATA XREF: sub_84:loc_3846r
seg000:0ED0                                         ; sub_84+37CCw sub_391E+1w
seg000:0ED0                 mov     bx, ax
seg000:0ED2
seg000:0ED2 loc_ED2:                                ; DATA XREF: sub_2E52+103w
seg000:0ED2                 mov     es, ax
seg000:0ED4
seg000:0ED4 loc_ED4:                                ; DATA XREF: INIT_VIDEO_HW__sub_1AF0+64w
seg000:0ED4                                         ; seg000:3707w
seg000:0ED4                                         ; REVERSE_FIELD__sub_3752+2Bw
seg000:0ED4                                         ; sub_28C9:loc_25C4w
seg000:0ED4                                         ; sub_28C9-2F1w
seg000:0ED4                                         ; KEYB_IN_AL__sub_38B1+1Cw
seg000:0ED4                                         ; SCREEN_TO_PRN__sub_39FD+Cr
seg000:0ED4                 mov     cx, 100h
seg000:0ED7
seg000:0ED7 loc_ED7:                                ; CODE XREF: seg000:0EE7j
seg000:0ED7                                         ; DATA XREF: ROM_EnableCursor__3950:loc_39A1w
seg000:0ED7                                         ; ROM_EnableCursor__3950+5Cw
seg000:0ED7                                         ; sub_1C72+11w
seg000:0ED7                                         ; ROM_DisableCursor__3927+14r
seg000:0ED7                                         ; ROM_EnableCursor__3950+10w
seg000:0ED7                                         ; ROM_EnableCursor__3950+37r
seg000:0ED7                                         ; sub_39D0+8r
seg000:0ED7                                         ; VIDEORAM__sub_3C53+Bw
seg000:0ED7                                         ; seg000:3CF8w
seg000:0ED7                 mov     [bx], bl
seg000:0ED9
seg000:0ED9 loc_ED9:                                ; DATA XREF: sub_1C72+Cw
seg000:0ED9                                         ; ROM_DisableCursor__3927+18r
seg000:0ED9                                         ; ROM_EnableCursor__3950+3Fw
seg000:0ED9                 mov     al, [bx]
seg000:0EDB                 nop
seg000:0EDC                 mov     ax, es
seg000:0EDE
seg000:0EDE loc_EDE:                                ; DATA XREF: seg000:2220r
seg000:0EDE                                         ; sub_224Fw sub_224F+8r
seg000:0EDE                                         ; sub_2B4E+4r seg000:2C39r
seg000:0EDE                                         ; seg000:2C73r
seg000:0EDE                                         ; seg000:2CADr
seg000:0EDE                                         ; seg000:2CEFr
seg000:0EDE                                         ; seg000:2D56r sub_2B4Er
seg000:0EDE                                         ; sub_2B4E+12w
seg000:0EDE                 and     ax, ax
seg000:0EE0                 jz      short loc_EF0
seg000:0EE2                 xor     ax, ax
seg000:0EE4                 mov     es, ax
seg000:0EE6                 inc     bx
seg000:0EE7                 loop    loc_ED7
seg000:0EE9                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0EEB                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0EEB                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0EED                 pop     cx
seg000:0EEE                 jmp     short loc_EA0
seg000:0EF0 ; ---------------------------------------------------------------------------
seg000:0EF0
seg000:0EF0 loc_EF0:                                ; CODE XREF: seg000:0EC2j
seg000:0EF0                                         ; seg000:0EC8j
seg000:0EF0                                         ; seg000:0EE0j
seg000:0EF0                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0EF2                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0EF2                                         ;
seg000:0EF4                 call    ENABLE_RAM_BOARD_DETECTION__sub_109A
seg000:0EF7
seg000:0EF7 OPTION_RAM__loc_EF7:                    ; CODE XREF: seg000:0F04j
seg000:0EF7                 mov     si, 8183h       ; "27 - Memory Board (RAM option)"  - CAN CONTINUE.
seg000:0EF7                                         ; HINT: ram size incorrect OR other reasons
seg000:0EF7                                         ; SEE TABLE B-1 OF TECH.MANUAL.
seg000:0EFA                 or      dl, 4
seg000:0EFD                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9 ; emit system message
seg000:0F00                 jmp     short OPTION_RAM__loc_F0E
seg000:0F02 ; ---------------------------------------------------------------------------
seg000:0F02                 mov     dl, 2           ; <----- $f400-0f02 is invoked when memory board is present.
seg000:0F04                 jmp     short OPTION_RAM__loc_EF7
seg000:0F06 ; ---------------------------------------------------------------------------
seg000:0F06
seg000:0F06 OPTION_RAM__loc_F06:                    ; CODE XREF: seg000:0EA9j
seg000:0F06                 call    ENABLE_RAM_BOARD_DETECTION__sub_109A
seg000:0F09                 mov     byte ptr ds:0B000h, 0FFh ; Z80 LED + ZFLIP CONTROL
seg000:0F09                                         ; Bits 0-3 set Z80 diagnostic register bits 4-7.
seg000:0F09                                         ; - see PAGE 157 / 158 of manual -
seg000:0F09                                         ;
seg000:0F0E
seg000:0F0E OPTION_RAM__loc_F0E:                    ; CODE XREF: seg000:0F00j
seg000:0F0E                 call    W18_EXTRA_TEST_20000_DFFFF__sub_10A5 ; Display ON. Set keyboard. Set 4800bps  &  HIGH RAM ($20000 ff.) tests (depends on W18)
seg000:0F11
seg000:0F11 CHECK_ARBITRATION__loc_F11:             ; CODE XREF: seg000:loc_DE1j
seg000:0F11                                         ; seg000:0E74j
seg000:0F11                 mov     al, 7Fh ; ''   ; LEDs  D3 + D4 + D6  OFF
seg000:0F13                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:0F13                                         ;      Shown in paragraphs 4-31 / bits in 4-17 (page 155).
seg000:0F13                                         ;
seg000:0F15                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:0F15                                         ;
seg000:0F17                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0F17                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0F19                 push    ds
seg000:0F1A                 push    es
seg000:0F1B                 xor     ax, ax
seg000:0F1D                 mov     es, ax
seg000:0F1F                 mov     ax, cs
seg000:0F21                 mov     ds, ax
seg000:0F23                 mov     cx, 0Dh
seg000:0F26
seg000:0F26 loc_F26:                                ; DATA XREF: INIT_VIDEO_HW__sub_1AF0:loc_1B40w
seg000:0F26                                         ; seg000:1D03r
seg000:0F26                                         ; seg000:203Br
seg000:0F26                                         ; seg000:2068r
seg000:0F26                                         ; seg000:20B6r
seg000:0F26                                         ; VIDEORAM_TABLE_v3__sub_2136+Fr
seg000:0F26                                         ; sub_2293+1Dr sub_2446+Br
seg000:0F26                                         ; sub_3AF1+Dr sub_3B7A+10r
seg000:0F26                                         ; sub_3B9E+4r sub_3BAF+Br
seg000:0F26                                         ; VIDEORAM__sub_3CA8+5r
seg000:0F26                                         ; GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37+13r
seg000:0F26                                         ; sub_1C72w
seg000:0F26                                         ; ROM_EnableCursor__3950+Cw
seg000:0F26                                         ; VIDEORAM__sub_3C53+7w
seg000:0F26                                         ; seg000:3CF4w
seg000:0F26                 mov     si, 10CCh
seg000:0F29
seg000:0F29 loc_F29:                                ; DATA XREF: ROM_DisableCursor__3927+22w
seg000:0F29                                         ; ROM_EnableCursor__3950+14r
seg000:0F29                                         ; sub_3D01+1Er
seg000:0F29                                         ; ROM_EnableCursor__3950+26r
seg000:0F29                                         ; sub_3D01+13r
seg000:0F29                                         ; ROM_DisableCursor__3927+7w
seg000:0F29                                         ; ROM_DisableCursor__3927+Br
seg000:0F29                                         ; ROM_EnableCursor__3950:loc_3981w
seg000:0F29                                         ; ROM_EnableCursor__3950+65w
seg000:0F29                                         ; sub_39D0+2w
seg000:0F29                 mov     di, 8000h
seg000:0F2C
seg000:0F2C loc_F2C:                                ; DATA XREF: sub_1D67+5w
seg000:0F2C                                         ; ROM_DisableCursor__3927+2w
seg000:0F2C                                         ; ROM_EnableCursor__3950+6Aw
seg000:0F2C                                         ; sub_1C72+26w
seg000:0F2C                                         ; sub_1C72+33w
seg000:0F2C                                         ; ROM_EnableCursor__3950:loc_39A8r
seg000:0F2C                 rep movsb
seg000:0F2E
seg000:0F2E loc_F2E:                                ; DATA XREF: sub_3AB5-312r
seg000:0F2E                                         ; sub_3AB5:loc_3C09w
seg000:0F2E                                         ; E::ROM_FastVideo(const const)r
seg000:0F2E                                         ; seg000:3745w
seg000:0F2E                                         ; REVERSE_FIELD__sub_3752r
seg000:0F2E                                         ; REVERSE_FIELD__sub_3752+30w
seg000:0F2E                                         ; SWITCH_HOLDSCREEN__sub_3C34r
seg000:0F2E                                         ; sub_3AB5-315r
seg000:0F2E                                         ; sub_3AB5:loc_37BBw
seg000:0F2E                                         ; sub_3AB5-2F3r
seg000:0F2E                                         ; sub_3AB5+158w
seg000:0F2E                 mov     cx, 100h
seg000:0F31
seg000:0F31 loc_F31:                                ; DATA XREF: sub_1D4E+15w
seg000:0F31                                         ; sub_3AF1+13r
seg000:0F31                                         ; sub_3AF1+32r
seg000:0F31                                         ; VIDEORAM_TABLE__sub_3B30r
seg000:0F31                                         ; VIDEORAM_TABLE__sub_3B30+14w
seg000:0F31                                         ; sub_3B9E+Ar sub_3BAF+7r
seg000:0F31                                         ; sub_3BAF+1Cw
seg000:0F31                 push    di
seg000:0F32                 push    cx
seg000:0F33
seg000:0F33 loc_F33:                                ; CODE XREF: seg000:0F36j
seg000:0F33                                         ; DATA XREF: sub_3A98+17w
seg000:0F33                                         ; VIDEORAM_TABLE__sub_3B30+4w
seg000:0F33                                         ; sub_3BAFr
seg000:0F33                 stosb
seg000:0F34                 inc     al
seg000:0F36                 loop    loc_F33
seg000:0F38
seg000:0F38 loc_F38:                                ; DATA XREF: ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F:loc_262Dw
seg000:0F38                                         ; seg000:loc_264Ew
seg000:0F38                                         ; sub_28C9-248w
seg000:0F38                 xor     ax, ax
seg000:0F3A
seg000:0F3A loc_F3A:                                ; DATA XREF: ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F+11w
seg000:0F3A                                         ; seg000:loc_2668w
seg000:0F3A                                         ; sub_28C9-245w
seg000:0F3A                                         ; ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F+1Cw
seg000:0F3A                                         ; seg000:2651r
seg000:0F3A                                         ; seg000:266Br
seg000:0F3A                                         ; ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F+19w
seg000:0F3A                                         ; sub_28C9-250w
seg000:0F3A                 mov     di, 2000h
seg000:0F3D
seg000:0F3D loc_F3D:                                ; DATA XREF: sub_2343w
seg000:0F3D                                         ; sub_234Cw
seg000:0F3D                                         ; ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F+16w
seg000:0F3D                                         ; sub_28C9-253w
seg000:0F3D                 mov     cx, 200h
seg000:0F40
seg000:0F40 loc_F40:                                ; DATA XREF: sub_1C72+17w
seg000:0F40                                         ; sub_247Bw sub_2481w
seg000:0F40                                         ; sub_2487w sub_248Dw
seg000:0F40                                         ; sub_2493w sub_2517+13r
seg000:0F40                                         ; sub_2517+1Bw sub_1C72+6w
seg000:0F40                                         ; seg000:1FE5w
seg000:0F40                                         ; seg000:208Er
seg000:0F40                                         ; seg000:2094w
seg000:0F40                                         ; VIDEORAM__sub_2124:loc_2131w
seg000:0F40                                         ; sub_28C9-713r
seg000:0F40                                         ; sub_28C9-70Dw
seg000:0F40                                         ; sub_28C9-6FEr
seg000:0F40                                         ; sub_28C9-6E2r
seg000:0F40                                         ; sub_28C9:loc_21F5w
seg000:0F40                                         ; sub_238D+8r sub_238D+10r
seg000:0F40                                         ; sub_23B1+4r sub_23D6+6r
seg000:0F40                                         ; seg000:24C1w
seg000:0F40                                         ; seg000:24E4r
seg000:0F40                                         ; seg000:24EAw sub_255Dr
seg000:0F40                                         ; seg000:loc_2571r
seg000:0F40                                         ; ROM_DisableCursor__3927+1Fr
seg000:0F40                                         ; ROM_EnableCursor__3950+5r
seg000:0F40                                         ; ROM_EnableCursor__3950+18r
seg000:0F40                                         ; CURSOR_OFF_ON1__sub_39C4+3w
seg000:0F40                                         ; sub_39E3+3r sub_39E3+Aw
seg000:0F40                                         ; SCROLL__sub_3A40+1Cr
seg000:0F40                                         ; sub_3A72+1Cr
seg000:0F40                                         ; VIDEORAM__sub_3C53r
seg000:0F40                                         ; seg000:3CC5r
seg000:0F40                                         ; seg000:loc_3CEDw
seg000:0F40                                         ; sub_3D01+24r
seg000:0F40                 rep stosb
seg000:0F42
seg000:0F42 loc_F42:                                ; DATA XREF: seg000:1FDCw
seg000:0F42                                         ; seg000:2085r
seg000:0F42                                         ; seg000:20B0r
seg000:0F42                                         ; sub_20FE:loc_2120w
seg000:0F42                                         ; VIDEORAM_TABLE_v3__sub_2136+1r
seg000:0F42                                         ; sub_28C9-765r
seg000:0F42                                         ; sub_28C9-73Dr
seg000:0F42                                         ; sub_28C9:loc_21ABw
seg000:0F42                                         ; sub_238D+4r sub_23B1+8r
seg000:0F42                                         ; sub_23D6+Dr sub_23D6+1Fr
seg000:0F42                                         ; sub_23D6+37r
seg000:0F42                                         ; seg000:246Dr
seg000:0F42                                         ; sub_28C9-314r
seg000:0F42                                         ; ROM_EnableCursor__3950+23r
seg000:0F42                                         ; SCREEN_TO_PRN__sub_39FD+13r
seg000:0F42                                         ; SCROLL__sub_3A40+3r
seg000:0F42                                         ; SCROLL__sub_3A40+Br
seg000:0F42                                         ; SCROLL__sub_3A40:loc_3A58w
seg000:0F42                                         ; sub_3A72+3r sub_3A72+Br
seg000:0F42                                         ; sub_3A72:loc_3A8Aw
seg000:0F42                                         ; sub_3D01+10r sub_1D67+Aw
seg000:0F42                                         ; seg000:2468w
seg000:0F42                                         ; ROM_EnableCursor__3950+1Ew
seg000:0F42                                         ; ROM_EnableCursor__3950+2Cw
seg000:0F42                                         ; sub_3AB5+1Ew
seg000:0F42                                         ; VIDEORAM__sub_3C53+Fw
seg000:0F42                                         ; seg000:3CFCw sub_3D01+9r
seg000:0F42                                         ; sub_3D01+2Fw
seg000:0F42                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0F42                                         ;
seg000:0F44
seg000:0F44 loc_F44:                                ; DATA XREF: sub_20FEr
seg000:0F44                                         ; sub_28C9:loc_223Br
seg000:0F44                                         ; RESET_DS_F44__sub_22D2w
seg000:0F44                                         ; SET_DS_F44__sub_22DAw
seg000:0F44                                         ; sub_22FEw sub_2304w
seg000:0F44                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0F44                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0F46                 pop     cx
seg000:0F47                 pop     si
seg000:0F48                 mov     di, 2100h
seg000:0F4B                 xor     ax, ax
seg000:0F4D                 mov     ds, ax
seg000:0F4F
seg000:0F4F loc_F4F:                                ; DATA XREF: seg000:24BAr
seg000:0F4F                 rep movsb
seg000:0F51                 mov     cx, 100h
seg000:0F54
seg000:0F54 loc_F54:                                ; CODE XREF: seg000:0F5Bj
seg000:0F54                                         ; DATA XREF: sub_1D67+Dw
seg000:0F54                                         ; sub_28C9:loc_25FCw
seg000:0F54                                         ; sub_28C9-2B9w sub_2DC6r
seg000:0F54                                         ; sub_2DC6:loc_2E1Cw
seg000:0F54                                         ; sub_2DC6+Cr
seg000:0F54                                         ; sub_2DC6:loc_2DEFw
seg000:0F54                                         ; sub_2DC6+5Bw
seg000:0F54                                         ; sub_2DC6+80w
seg000:0F54                                         ; INIT_VIDEO_HW__sub_1AF0+54w
seg000:0F54                                         ; seg000:208Bw
seg000:0F54                                         ; seg000:20B9w
seg000:0F54                                         ; VIDEORAM__sub_2124+3r
seg000:0F54                                         ; VIDEORAM__sub_2124+9r
seg000:0F54                                         ; VIDEORAM_TABLE_v3__sub_2136:loc_2151w
seg000:0F54                                         ; sub_28C9-717r
seg000:0F54                                         ; sub_28C9-6F6r
seg000:0F54                                         ; sub_28C9:loc_21D9r
seg000:0F54                                         ; sub_238D+Cr seg000:24E1r
seg000:0F54                                         ; seg000:loc_3CD5r
seg000:0F54                                         ; seg000:3CDBr
seg000:0F54                                         ; sub_3D01+19r
seg000:0F54                                         ; sub_1C72+1Cw
seg000:0F54                                         ; sub_20FE:loc_210Ar
seg000:0F54                                         ; sub_28C9-761r
seg000:0F54                                         ; sub_28C9-685r
seg000:0F54                                         ; sub_2293+3w sub_3A72r
seg000:0F54                                         ; sub_3A98+4r sub_3AB5r
seg000:0F54                                         ; sub_3C67+2r
seg000:0F54                 cmp     byte ptr ds:sub_20FE+1, 0FFh
seg000:0F59
seg000:0F59 loc_F59:                                ; DATA XREF: sub_1C72+21w
seg000:0F59                                         ; sub_20FE+10r
seg000:0F59                                         ; sub_28C9-739r
seg000:0F59                                         ; sub_2293+7w
seg000:0F59                                         ; SCROLL__sub_3A40r
seg000:0F59                                         ; sub_3A98r sub_3AB5+4r
seg000:0F59                                         ; sub_3C67+8r
seg000:0F59                 jz      short loc_F5F   ;
seg000:0F59                                         ;
seg000:0F5B                 loop    loc_F54
seg000:0F5D                 jmp     short ERROR_ARBITRATION__loc_F7F
seg000:0F5F ; ---------------------------------------------------------------------------
seg000:0F5F
seg000:0F5F loc_F5F:                                ; CODE XREF: seg000:loc_F59j
seg000:0F5F                 mov     si, 2000h
seg000:0F62                 mov     cx, 100h
seg000:0F65
seg000:0F65 loc_F65:                                ; DATA XREF: HOUSEKEEP_CON_TERM__sub_3177:loc_3199w
seg000:0F65                                         ; PRINTERCONTROL_STATUS__sub_3219+22w
seg000:0F65                                         ; PRINTERCONTROL_STATUS__sub_3219+2Cw
seg000:0F65                                         ; PRINTERCONTROL_STATUS__sub_3219:loc_324Aw
seg000:0F65                                         ; PRINTERCONTROL_STATUS__sub_3219+3Bw
seg000:0F65                                         ; PRN__sub_32FBr
seg000:0F65                                         ; PRN__sub_32FB:PRN__loc_3304r
seg000:0F65                 xor     bx, bx
seg000:0F67
seg000:0F67 loc_F67:                                ; CODE XREF: seg000:0F75j
seg000:0F67                 mov     ah, [si+100h]
seg000:0F6B
seg000:0F6B loc_F6B:                                ; DATA XREF: HOUSEKEEP_CON_TERM__sub_3177+27w
seg000:0F6B                                         ; PRN_CTRL_STATUS__sub_32E3r
seg000:0F6B                                         ; seg000:loc_331Fw
seg000:0F6B                                         ; seg000:333Fw
seg000:0F6B                 lodsb
seg000:0F6C                 cmp     al, bl
seg000:0F6E                 jnz     short ERROR_ARBITRATION__loc_F7F ;
seg000:0F6E                                         ;
seg000:0F70                 cmp     ah, bl
seg000:0F72                 jnz     short ERROR_ARBITRATION__loc_F7F ;
seg000:0F72                                         ;
seg000:0F74                 inc     bx
seg000:0F75                 loop    loc_F67
seg000:0F77                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:0F77                                         ;
seg000:0F79                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0F79                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0F7B                 pop     es
seg000:0F7C                 pop     ds
seg000:0F7D                 jmp     short loc_F95
seg000:0F7F ; ---------------------------------------------------------------------------
seg000:0F7F
seg000:0F7F ERROR_ARBITRATION__loc_F7F:             ; CODE XREF: seg000:0F5Dj
seg000:0F7F                                         ; seg000:0F6Ej
seg000:0F7F                                         ; seg000:0F72j
seg000:0F7F                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:0F7F                                         ;
seg000:0F81                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0F81                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0F83                 xor     ax, ax
seg000:0F85                 mov     ds, ax
seg000:0F87                 mov     ds:0B000h, al
seg000:0F8A                 pop     es
seg000:0F8B                 pop     ds
seg000:0F8C                 mov     si, 817Eh       ; "26 - Main Board" (RAM arbitration)  * FATAL *
seg000:0F8F
seg000:0F8F loc_F8F:                                ; DATA XREF: INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC+1Bw
seg000:0F8F                                         ; LED_WAIT_ON__sub_24F0+6w
seg000:0F8F                                         ; CLR_WAIT_LED__sub_24FC+6w
seg000:0F8F                                         ; WAIT_LED_ON_or_OFF__sub_30CA+10w
seg000:0F8F                                         ; WAIT_LED_ON_or_OFF__sub_30CA+1Aw
seg000:0F8F                                         ; CONTROL_STATUS__sub_31C1+5r
seg000:0F8F                                         ; PRINTERCONTROL_STATUS__sub_3219+5r
seg000:0F8F                                         ; ROM_EnableCursor__3950+42r
seg000:0F8F                 or      dl, 2
seg000:0F92
seg000:0F92 loc_F92:                                ; DATA XREF: INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC+9w
seg000:0F92                                         ; INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC+13w
seg000:0F92                                         ; INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC:loc_36EAw
seg000:0F92                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:0F95
seg000:0F95 loc_F95:                                ; CODE XREF: seg000:0F7Dj
seg000:0F95                 call    SET_and_RESET_Z80__sub_13F4 ;
seg000:0F95                                         ;
seg000:0F98                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:0F98                                         ;
seg000:0F9A                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:0F9A                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:0F9C                 mov     cx, 140h
seg000:0F9F                 call    CPU_DELAY2_n_CLI__sub_197
seg000:0FA2                 and     dl, 0EFh
seg000:0FA5                 jmp     TEST_COMM__RX50__loc_16FB
seg000:0FA8 ; ---------------------------------------------------------------------------
seg000:0FA8 ; START OF FUNCTION CHUNK FOR sub_84
seg000:0FA8
seg000:0FA8 BITTEST_AX_n_jump_BP__loc_FA8:          ; CODE XREF: sub_84+90Dj
seg000:0FA8                                         ; sub_84+969j seg000:09FEj
seg000:0FA8                                         ; seg000:0EBDj
seg000:0FA8                 mov     ds, ax          ; *********************************
seg000:0FA8                                         ;  Extensive RAM test.
seg000:0FA8                                         ;  Writes multiple bit patterns
seg000:0FA8                                         ;   (shifted / pseudo random)
seg000:0FA8                                         ;  into the segment indicated by
seg000:0FA8                                         ;  AX/DS,  afterwards it sets the
seg000:0FA8                                         ;  ZERO FLAG if test was successful
seg000:0FA8                                         ;  ... and jumps to
seg000:0FA8                                         ;  BP          (requires no stack!).
seg000:0FA8                                         ; **********************************
seg000:0FA8                                         ;
seg000:0FAA                 xor     cx, cx
seg000:0FAC
seg000:0FAC loc_FAC:                                ; CODE XREF: sub_84+F49j
seg000:0FAC                 mov     bx, 40h ; '@'
seg000:0FAF                 mov     ax, cx
seg000:0FB1                 mov     dh, cl
seg000:0FB3
seg000:0FB3 loc_FB3:                                ; CODE XREF: sub_84+F37j
seg000:0FB3                 shl     dh, 1
seg000:0FB5                 jnb     short loc_FB9
seg000:0FB7
seg000:0FB7 loc_FB7:                                ; DATA XREF: ROM_ConsoleLev1In__1E24r
seg000:0FB7                                         ; KEYB_IN_AL__sub_38B1+44r
seg000:0FB7                 xor     al, bl
seg000:0FB9
seg000:0FB9 loc_FB9:                                ; CODE XREF: sub_84+F31j
seg000:0FB9                 shr     bl, 1
seg000:0FBB                 jnz     short loc_FB3
seg000:0FBD                 mov     [bx], al
seg000:0FBF                 mov     ah, [bx]
seg000:0FC1                 xor     al, ah
seg000:0FC3                 jz      short loc_FCA
seg000:0FC5                 mov     ah, 2
seg000:0FC7                 jmp     loc_108E
seg000:0FCA ; ---------------------------------------------------------------------------
seg000:0FCA
seg000:0FCA loc_FCA:                                ; CODE XREF: sub_84+F3Fj
seg000:0FCA                 inc     cx
seg000:0FCB
seg000:0FCB loc_FCB:                                ; DATA XREF: KEYB_IN_AL__sub_38B1+4Bw
seg000:0FCB                 and     ch, ch
seg000:0FCD                 jz      short loc_FAC
seg000:0FCF
seg000:0FCF loc_FCF:                                ; DATA XREF: ROM_ConsoleLev1In__1E24+4r
seg000:0FCF                 mov     bx, 8000h
seg000:0FD2                 mov     cx, 8
seg000:0FD5
seg000:0FD5 loc_FD5:                                ; CODE XREF: sub_84+F57j
seg000:0FD5                 test    di, bx
seg000:0FD7                 jnz     short loc_FDF
seg000:0FD9                 shr     bx, 1
seg000:0FDB                 loop    loc_FD5
seg000:0FDD                 jmp     short loc_FFF
seg000:0FDF ; ---------------------------------------------------------------------------
seg000:0FDF
seg000:0FDF loc_FDF:                                ; CODE XREF: sub_84+F53j
seg000:0FDF                 mov     byte ptr [di], 0
seg000:0FE2                 mov     ah, bh
seg000:0FE4
seg000:0FE4 loc_FE4:                                ; DATA XREF: sub_2E52+13r
seg000:0FE4                                         ; sub_2E52+18w
seg000:0FE4                                         ; sub_2E52+48w
seg000:0FE4                                         ; sub_2E52+4Fw
seg000:0FE4                                         ; sub_84+377Ew
seg000:0FE4                                         ; sub_84+37A2w
seg000:0FE4                                         ; sub_84+381Cw
seg000:0FE4                 not     bx
seg000:0FE6
seg000:0FE6 loc_FE6:                                ; DATA XREF: sub_2E52:loc_2ED5r
seg000:0FE6                                         ; sub_2E52:loc_2F07w
seg000:0FE6                 and     bx, di
seg000:0FE8
seg000:0FE8 loc_FE8:                                ; CODE XREF: sub_84+F6Bj
seg000:0FE8                                         ; DATA XREF: sub_2E52+1Dw
seg000:0FE8                                         ; sub_2E52+4Cr
seg000:0FE8                                         ; sub_2E52+54w
seg000:0FE8                                         ; KEYB_IN_AL__sub_38B1+57w
seg000:0FE8                                         ; KEYB_IN_AL__sub_38B1+66w
seg000:0FE8                                         ; sub_2E52:loc_2E8Fr
seg000:0FE8                                         ; sub_2E52+FBw
seg000:0FE8                                         ; seg000:313Cw
seg000:0FE8                                         ; seg000:3142w
seg000:0FE8                 mov     byte ptr [bx], 0FFh
seg000:0FEB
seg000:0FEB loc_FEB:                                ; DATA XREF: sub_334A+25w
seg000:0FEB                                         ; sub_334A+31w
seg000:0FEB                                         ; sub_334A:loc_3383w
seg000:0FEB                                         ; COMM__sub_3474+28r
seg000:0FEB                                         ; sub_84+3764w
seg000:0FEB                                         ; sub_84+37D9r
seg000:0FEB                                         ; sub_84+37E9w
seg000:0FEB                                         ; sub_84+37F2w
seg000:0FEB                                         ; sub_2E52+68r
seg000:0FEB                                         ; sub_2E52+10Fw
seg000:0FEB                                         ; WAIT_LED_ON_or_OFF__sub_30CA+8r
seg000:0FEB                                         ; INVOKED_BY_IRQ__sub_3389r
seg000:0FEB                                         ; sub_84+37D2r
seg000:0FEB                 shr     bx, 1
seg000:0FED
seg000:0FED loc_FED:                                ; DATA XREF: KEYB_IN_AL__sub_38B1+3Aw
seg000:0FED                                         ; sub_2E52:loc_2E7Er
seg000:0FED                                         ; sub_84+3751w
seg000:0FED                                         ; sub_84:NOT_FDXC__loc_37FCr
seg000:0FED                                         ; sub_84+3783w
seg000:0FED                 or      bh, ah
seg000:0FEF                 loop    loc_FE8
seg000:0FF1                 mov     si, di
seg000:0FF3                 mov     al, [si]
seg000:0FF5                 and     al, al
seg000:0FF7                 jz      short loc_FFF
seg000:0FF9                 mov     ax, 1FFh
seg000:0FFC                 jmp     loc_108E
seg000:0FFF ; ---------------------------------------------------------------------------
seg000:0FFF
seg000:0FFF loc_FFF:                                ; CODE XREF: sub_84+F59j
seg000:0FFF                                         ; sub_84+F73j sub_84+83CP
seg000:0FFF                                         ; DATA XREF: sub_84+1603w
seg000:0FFF                                         ; sub_84+1614r
seg000:0FFF                                         ; sub_84:Z80_OK__loc_16AAr
seg000:0FFF                 test    dl, 1
seg000:0FFF ; END OF FUNCTION CHUNK FOR sub_84
seg000:1002
seg000:1002 loc_1002:                               ; DATA XREF: INIT_132cols_60Hz_NI__sub_AE2+3Bw
seg000:1002                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+3Fr
seg000:1002                                         ; sub_84+C34w
seg000:1002                 jz      short loc_1050
seg000:1004
seg000:1004 loc_1004:                               ; DATA XREF: seg000:3735r
seg000:1004                                         ; seg000:373Fw
seg000:1004                                         ; REVERSE_FIELD__sub_3752+1Bw
seg000:1004                                         ; seg000:0A44w
seg000:1004                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C:loc_B66r
seg000:1004                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+26w
seg000:1004                                         ; seg000:loc_D99r
seg000:1004                                         ; seg000:0A41w
seg000:1004                                         ; seg000:0A8Ar
seg000:1004                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C:SIT_n_WAIT__loc_B86r
seg000:1004                 mov     cx, 1
seg000:1007
seg000:1007 loc_1007:                               ; CODE XREF: seg000:104Ej
seg000:1007                 mov     ax, ds
seg000:1009                 cmp     ax, 0EE00h
seg000:100C                 jz      short loc_1012
seg000:100E                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:100E                                         ;
seg000:1010                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:1010                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:1012
seg000:1012 loc_1012:                               ; CODE XREF: seg000:100Cj
seg000:1012                 xor     bx, bx
seg000:1014
seg000:1014 loc_1014:                               ; CODE XREF: seg000:1025j
seg000:1014                 test    cx, bx
seg000:1016                 jz      short loc_101D
seg000:1018                 mov     byte ptr [bx], 0FFh
seg000:101B                 jmp     short loc_1020
seg000:101D ; ---------------------------------------------------------------------------
seg000:101D
seg000:101D loc_101D:                               ; CODE XREF: seg000:1016j
seg000:101D                 mov     byte ptr [bx], 0
seg000:1020
seg000:1020 loc_1020:                               ; CODE XREF: seg000:101Bj
seg000:1020                 cmp     bx, di
seg000:1022                 jz      short loc_1027
seg000:1024                 inc     bx
seg000:1025                 jmp     short loc_1014
seg000:1027 ; ---------------------------------------------------------------------------
seg000:1027
seg000:1027 loc_1027:                               ; CODE XREF: seg000:1022j
seg000:1027                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:1027                                         ;
seg000:1029                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:1029                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:102B                 xor     bx, bx
seg000:102D
seg000:102D loc_102D:                               ; CODE XREF: seg000:1044j
seg000:102D                 xor     ax, ax
seg000:102F                 test    cx, bx
seg000:1031                 jz      short loc_1035
seg000:1033                 not     ah
seg000:1035
seg000:1035 loc_1035:                               ; CODE XREF: seg000:1031j
seg000:1035                 mov     al, [bx]
seg000:1037                 xor     al, ah
seg000:1039                 jz      short loc_103F
seg000:103B                 mov     ah, 5
seg000:103D                 jmp     short loc_108E
seg000:103F ; ---------------------------------------------------------------------------
seg000:103F
seg000:103F loc_103F:                               ; CODE XREF: seg000:1039j
seg000:103F                 cmp     bx, di
seg000:1041                 jz      short loc_1046
seg000:1043                 inc     bx
seg000:1044                 jmp     short loc_102D
seg000:1046 ; ---------------------------------------------------------------------------
seg000:1046
seg000:1046 loc_1046:                               ; CODE XREF: seg000:1041j
seg000:1046                 shl     cx, 1
seg000:1048                 shl     cx, 1
seg000:104A                 jz      short loc_1050
seg000:104C                 test    cx, di
seg000:104E                 jnz     short loc_1007
seg000:1050
seg000:1050 loc_1050:                               ; CODE XREF: seg000:loc_1002j
seg000:1050                                         ; seg000:104Aj
seg000:1050                 mov     bx, di
seg000:1052
seg000:1052 loc_1052:                               ; CODE XREF: seg000:1069j
seg000:1052                 mov     ax, bx
seg000:1054                 mov     [bx], ah
seg000:1056                 and     bx, bx
seg000:1058                 jz      short loc_106B
seg000:105A                 dec     bx
seg000:105B                 mov     cx, 2
seg000:105E
seg000:105E loc_105E:                               ; CODE XREF: seg000:1067j
seg000:105E                 mov     ax, bx
seg000:1060                 mov     [bx], al        ; fills SCREEN ($EE000 and up) with arbitrary (?) values.  SOME SORT OF TESTING?
seg000:1062                 and     bx, bx
seg000:1064                 jz      short loc_106B
seg000:1066                 dec     bx
seg000:1067                 loop    loc_105E
seg000:1069                 jmp     short loc_1052
seg000:106B ; ---------------------------------------------------------------------------
seg000:106B
seg000:106B loc_106B:                               ; CODE XREF: seg000:1058j
seg000:106B                                         ; seg000:1064j
seg000:106B                 mov     bx, di
seg000:106D
seg000:106D loc_106D:                               ; CODE XREF: seg000:108Aj
seg000:106D                 mov     al, [bx]
seg000:106F                 xor     al, bh
seg000:1071                 jnz     short loc_108C
seg000:1073                 and     bx, bx
seg000:1075                 jz      short loc_1085
seg000:1077                 dec     bx
seg000:1078                 mov     cx, 2
seg000:107B
seg000:107B loc_107B:                               ; CODE XREF: seg000:1088j
seg000:107B                 mov     al, [bx]
seg000:107D                 xor     al, bl
seg000:107F                 jnz     short loc_108C
seg000:1081                 and     bx, bx
seg000:1083                 jnz     short loc_1087
seg000:1085
seg000:1085 loc_1085:                               ; CODE XREF: seg000:1075j
seg000:1085                 jmp     bp
seg000:1087 ; ---------------------------------------------------------------------------
seg000:1087
seg000:1087 loc_1087:                               ; CODE XREF: seg000:1083j
seg000:1087                 dec     bx
seg000:1088                 loop    loc_107B
seg000:108A                 jmp     short loc_106D
seg000:108C ; ---------------------------------------------------------------------------
seg000:108C
seg000:108C loc_108C:                               ; CODE XREF: seg000:1071j
seg000:108C                                         ; seg000:107Fj
seg000:108C                 mov     ah, 4
seg000:108E ; START OF FUNCTION CHUNK FOR sub_84
seg000:108E
seg000:108E loc_108E:                               ; CODE XREF: sub_84+F43j
seg000:108E                                         ; sub_84+F78j seg000:103Dj
seg000:108E                 and     ah, ah
seg000:1090                 jmp     bp
seg000:1090 ; END OF FUNCTION CHUNK FOR sub_84
seg000:1092 ; ---------------------------------------------------------------------------
seg000:1092                 push    ax              ; Alternate interrupt routine (set @ seg000:0E91)
seg000:1092                                         ; See also ENABLE_RAM_BOARD_DETECTION__sub_109A
seg000:1093                 mov     ax, 0FFh
seg000:1096                 mov     es, ax
seg000:1098                 assume es:nothing
seg000:1098                 pop     ax
seg000:1099                 iret
seg000:109A
seg000:109A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:109A
seg000:109A
seg000:109A ENABLE_RAM_BOARD_DETECTION__sub_109A proc near ; CODE XREF: seg000:0EF4p
seg000:109A                                         ; seg000:OPTION_RAM__loc_F06p
seg000:109A                 xor     ax, ax
seg000:109C                 mov     ds, ax
seg000:109E                 mov     word ptr ds:j_S_ELFTEST__loc_152+2, 0F02h ; set interrupt vector to 0F02  (CPU memory location 08)
seg000:109E                                         ;
seg000:10A4                 retn
seg000:10A4 ENABLE_RAM_BOARD_DETECTION__sub_109A endp
seg000:10A4
seg000:10A5
seg000:10A5 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:10A5
seg000:10A5
seg000:10A5 W18_EXTRA_TEST_20000_DFFFF__sub_10A5 proc near ; CODE XREF: sub_84+95Dp
seg000:10A5                                         ; seg000:OPTION_RAM__loc_F0Ep
seg000:10A5                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:10A8                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:10A8                                         ;      See TABLE 4-29 and 4-15
seg000:10A8                                         ;
seg000:10AA                 test    al, 4           ; W14  MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:10AC                 jnz     short W14_HOP__loc_10B4 ;
seg000:10AC                                         ;
seg000:10AE                 in      al, 11h
seg000:10B0                 test    al, 80h         ; test W18 (DSR=1) and ...
seg000:10B2                 jnz     short W18_HOP__locret_10CB ; _exit_ code if jumper W18 isn't set right.
seg000:10B4
seg000:10B4 W14_HOP__loc_10B4:                      ; CODE XREF: W18_EXTRA_TEST_20000_DFFFF__sub_10A5+7j
seg000:10B4                 mov     si, 1000h       ; Writes to [$20000 - $Dffff].  High / extended RAM / OPTION BOARD ?
seg000:10B7
seg000:10B7 loc_10B7:                               ; CODE XREF: W18_EXTRA_TEST_20000_DFFFF__sub_10A5+24j
seg000:10B7                 add     si, 1000h
seg000:10BB                 mov     es, si
seg000:10BD                 assume es:nothing
seg000:10BD                 xor     di, di
seg000:10BF                 mov     cx, 8000h
seg000:10C2                 cld
seg000:10C3                 rep stosw
seg000:10C5                 cmp     si, 0D000h
seg000:10C9                 jnz     short loc_10B7
seg000:10CB
seg000:10CB W18_HOP__locret_10CB:                   ; CODE XREF: W18_EXTRA_TEST_20000_DFFFF__sub_10A5+Dj
seg000:10CB                 retn
seg000:10CB W18_EXTRA_TEST_20000_DFFFF__sub_10A5 endp
seg000:10CB
seg000:10CC ; ---------------------------------------------------------------------------
seg000:10CC                 rep adc [bx+si], ax
seg000:10CF                 mov     al, byte ptr ds:loc_D21
seg000:10D2                 add     [bx+di], al
seg000:10D4                 add     [bx+di], al
seg000:10D6                 in      ax, dx
seg000:10D7                 mov     al, 76h ; 'v'
seg000:10D9
seg000:10D9 RX_50_CONTROLLER___loc_10D9:            ; CODE XREF: seg000:1715j
seg000:10D9                 mov     cx, 1000h
seg000:10DC                 call    CPU_DELAY2_n_CLI__sub_197
seg000:10DF                 and     dl, 0EFh
seg000:10E2                 cld
seg000:10E3                 mov     al, 0AFh ; '»'  ; LSB: 1111 / MSB 1010 : D6 + D5  OFF (LEDs Pos.# 4 + 5 ON BACK = OFF)
seg000:10E3                                         ; = "28 RX 50 CONTROLLER BOARD" - CAN CONTINUE
seg000:10E3                                         ;
seg000:10E5                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:10E5                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:10E7                 call    DS_to_0000__sub_13CD
seg000:10EA                 mov     byte ptr ds:loc_4FE+4, 0
seg000:10EF                 call    ES_to_200h__sub_13C1
seg000:10F2                 and     dl, 0EFh
seg000:10F5                 mov     byte ptr es:5FF0h, 0
seg000:10FB                 mov     byte ptr es:5FF2h, 0
seg000:1101                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER - PAGE 153  ( *** READ **** )
seg000:1103                 test    al, 4           ; test W14
seg000:1105                 jnz     short LOAD_Z80__loc_110F ;
seg000:1105                                         ;
seg000:1107                 mov     byte ptr es:5FF2h, 1
seg000:110D                 jmp     short LOAD_Z80__loc_111A
seg000:110F ; ---------------------------------------------------------------------------
seg000:110F
seg000:110F LOAD_Z80__loc_110F:                     ; CODE XREF: seg000:1105j
seg000:110F                 test    dl, 1
seg000:1112                 jz      short LOAD_Z80__loc_111A ;
seg000:1112                                         ;
seg000:1114                 mov     byte ptr es:5FF2h, 2
seg000:111A
seg000:111A LOAD_Z80__loc_111A:                     ; CODE XREF: seg000:110Dj
seg000:111A                                         ; seg000:1112j
seg000:111A                 push    es
seg000:111B                 xor     ax, ax
seg000:111D                 mov     es, ax
seg000:111F                 assume es:nothing
seg000:111F                 mov     word ptr es:loc_98+4, 13E4h
seg000:1126                 pop     es
seg000:1127                 call    DS_to_0000__sub_13CD
seg000:112A                 mov     word ptr ds:loc_4FE+2, 0B97Dh
seg000:1130                 call    F400_to_DS__sub_13C7 ;
seg000:1130                                         ;
seg000:1133                 mov     word ptr es:75DCh, 6000h
seg000:113A                 mov     cx, ds:0BFDFh   ; FFFdF = offset 3fdf in HIGH ROM : 28 02 (0228 or 2802)
seg000:113E                 xor     ax, ax
seg000:1140                 call    LOAD_AX_CX_to_Z80__sub_1339 ;
seg000:1140                                         ;
seg000:1143                 in      al, 0           ; clear the interrupt
seg000:1145                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:1147                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:1147                                         ;
seg000:1149                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:114B                 out     0Ah, al         ; "
seg000:114B                                         ;
seg000:114D                 mov     cx, 1000h
seg000:1150                 call    ACTIVATE_Z80_STI__sub_196
seg000:1153                 call    near ptr TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:1156
seg000:1156 OUTER_LOOP1__loc_1156:                  ; CODE XREF: seg000:1295j
seg000:1156                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:1156                                         ;
seg000:1158                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER - PAGE 149 ( *** WRITE ONLY *** )
seg000:1158                                         ;      Fig. 4-28 and table 4-10 to 4-14
seg000:115A                 call    DS_to_0000__sub_13CD
seg000:115D                 mov     di, 7000h
seg000:1160                 mov     si, 129Dh
seg000:1163                 mov     cx, 1
seg000:1166
seg000:1166 INNER_LOOP1__loc_1166:                  ; CODE XREF: seg000:11D4j
seg000:1166                 mov     bx, 0Ch
seg000:1169                 mov     ax, 5555h
seg000:116C                 call    sub_1298
seg000:116F                 mov     bx, 3
seg000:1172                 mov     ax, 9122h
seg000:1175                 call    sub_1298
seg000:1178                 mov     ax, 2AAAh
seg000:117B                 stosw
seg000:117C                 mov     ax, 8955h
seg000:117F                 stosw
seg000:1180                 mov     ax, 5554h
seg000:1183                 stosw
seg000:1184                 lods    word ptr cs:[si]
seg000:1186                 stosw
seg000:1187                 lods    word ptr cs:[si]
seg000:1189                 stosw
seg000:118A                 lods    word ptr cs:[si]
seg000:118C                 stosw
seg000:118D                 lods    word ptr cs:[si]
seg000:118F                 stosw
seg000:1190                 lods    word ptr cs:[si]
seg000:1192                 stosw
seg000:1193                 mov     bx, 15h
seg000:1196                 mov     ax, 2A49h
seg000:1199                 call    sub_1298
seg000:119C                 mov     bx, 0Ch
seg000:119F                 mov     ax, 5555h
seg000:11A2                 call    sub_1298
seg000:11A5                 mov     bx, 3
seg000:11A8                 mov     ax, 9122h
seg000:11AB                 call    sub_1298
seg000:11AE                 mov     ax, 0A2AAh
seg000:11B1                 stosw
seg000:11B2                 mov     bx, 200h
seg000:11B5                 mov     ax, 892Ah
seg000:11B8                 call    sub_1298
seg000:11BB                 mov     ax, 494Ah
seg000:11BE                 stosw
seg000:11BF                 mov     ax, 0A255h
seg000:11C2                 stosw
seg000:11C3                 mov     ax, 2A48h
seg000:11C6                 stosw
seg000:11C7                 mov     bx, 15h
seg000:11CA                 mov     ax, 2A49h
seg000:11CD                 call    sub_1298
seg000:11D0                 inc     cx
seg000:11D1                 cmp     cl, 7
seg000:11D4                 jnz     short INNER_LOOP1__loc_1166 ;
seg000:11D4                                         ;
seg000:11D6                 call    F400_to_DS__sub_13C7
seg000:11D9                 mov     cx, ds:0BFDFh
seg000:11DD                 call    sub_1320
seg000:11E0                 mov     cx, ds:0BFE1h
seg000:11E4                 mov     ax, ds:0BFDFh
seg000:11E7                 call    LOAD_AX_CX_to_Z80__sub_1339
seg000:11EA
seg000:11EA OUTER_LOOP2__loc_11EA:                  ; CODE XREF: seg000:1276j
seg000:11EA                 mov     dh, 0
seg000:11EC
seg000:11EC INNER_LOOP2__loc_11EC:                  ; CODE XREF: seg000:1257j
seg000:11EC                 in      al, 0
seg000:11EE                 out     0, al
seg000:11F0                 mov     cx, 250h
seg000:11F3                 call    CPU_DELAY2_n_CLI__sub_197
seg000:11F6                 and     dl, 0EFh
seg000:11F9                 mov     al, 0B1h ; '¦'  ; 10110001 : ZRESET/ DIAG + PORT LOOPBACK TESTS / READ-RECALL NVM
seg000:11F9                                         ;
seg000:11FB                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:11FB                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:11FD                 mov     al, 18h
seg000:11FF                 out     43h, al         ; 43H Printer Control/ Status Reg. (7201) RO/WO
seg000:1201                 nop
seg000:1202                 nop
seg000:1203                 nop
seg000:1204                 nop
seg000:1205                 mov     al, 0C0h ; '+'
seg000:1207                 out     43h, al         ; 43H Printer Control/ Status Reg. (7201) RO/WO
seg000:1209                 mov     al, 4
seg000:120B                 out     43h, al         ;  "
seg000:120D                 mov     al, 0
seg000:120F                 out     43h, al         ;  "
seg000:1211                 mov     al, 1
seg000:1213                 out     43h, al         ;  "
seg000:1215                 mov     al, 2
seg000:1217                 out     43h, al         ;  "
seg000:1219                 mov     al, 6
seg000:121B                 out     43h, al         ;  "
seg000:121D                 mov     al, 33h ; '3'
seg000:121F                 out     43h, al         ;  "
seg000:1221                 mov     al, 5
seg000:1223                 out     43h, al         ;  "
seg000:1225                 mov     al, 0EBh ; 'd'
seg000:1227                 out     43h, al         ;  "
seg000:1229                 mov     al, 3
seg000:122B                 out     43h, al         ;  "
seg000:122D                 mov     al, 0
seg000:122F                 out     43h, al         ; 43H Printer Control/ Status Reg. (7201) RO/WO
seg000:1231                 mov     cx, 3000h       ;
seg000:1231                                         ;
seg000:1234                 out     41h, al         ; 41H Printer Data Reg. (7201) RO/WO
seg000:1236                 mov     si, 7000h
seg000:1239
seg000:1239 loc_1239:                               ; CODE XREF: seg000:123Ej
seg000:1239                 lods    byte ptr es:[si]
seg000:123B                 wait
seg000:123C                 out     41h, al         ; 41H Printer Data Reg. (7201) RO/WO
seg000:123E                 loop    loc_1239
seg000:1240                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:1240                                         ;
seg000:1242                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1242                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:1244                 mov     al, 18h
seg000:1246                 out     43h, al         ; 43H Printer Control/ Status Reg. (7201) RO/WO
seg000:1248                 out     42h, al         ; 42H Comm Control/Status Reg. (7201) RO/WO
seg000:124A                 mov     ax, es:5FF0h    ; most likely a Z80 response
seg000:124E                 cmp     al, 40h ; '@'
seg000:1250                 jz      short loc_1259  ;
seg000:1250                                         ;
seg000:1252                 inc     dh
seg000:1254                 cmp     dh, 3
seg000:1257                 jnz     short INNER_LOOP2__loc_11EC
seg000:1259
seg000:1259 loc_1259:                               ; CODE XREF: seg000:1250j
seg000:1259                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:125B                 test    al, 4           ; W14  MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:125D                 jz      short loc_1264  ;
seg000:125D                                         ;
seg000:125F                 call    sub_1357
seg000:1262                 jmp     short near ptr loc_12D8+1
seg000:1264 ; ---------------------------------------------------------------------------
seg000:1264
seg000:1264 loc_1264:                               ; CODE XREF: seg000:125Dj
seg000:1264                 test    al, 8           ; W15  MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:1266                 jz      short loc_126E  ;
seg000:1266                                         ;
seg000:1268                 call    sub_1357
seg000:126B                 jmp     loc_1443        ; Z80 / keyboard / 1200 baud COMM port access (test routines?)
seg000:126E ; ---------------------------------------------------------------------------
seg000:126E
seg000:126E loc_126E:                               ; CODE XREF: seg000:1266j
seg000:126E                 mov     al, es:5FF0h
seg000:1272                 cmp     al, 40h ; '@'
seg000:1274                 jnz     short RX50_ERROR_28__loc_1279 ; JUMP IF RX 50 * CONTROLLER * FAULTY
seg000:1274                                         ;
seg000:1276                 jmp     OUTER_LOOP2__loc_11EA
seg000:1279 ; ---------------------------------------------------------------------------
seg000:1279
seg000:1279 RX50_ERROR_28__loc_1279:                ; CODE XREF: seg000:1274j
seg000:1279                 call    DS_to_0000__sub_13CD
seg000:127C                 mov     byte ptr ds:loc_4FE+4, 1
seg000:1281                 mov     si, 8192h       ; 02 5A-83 D6 8A
seg000:1281                                         ;    835a : "28 - "
seg000:1281                                         ;    8ad6 : "RX 50 Controller Board"
seg000:1281                                         ;
seg000:1281                                         ; RX 50 controller board faulty. CAN CONTINUE (terminal mode only?)
seg000:1284                 or      dl, 0Ch
seg000:1287                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:128A                 mov     dl, 80h ; 'Ç'
seg000:128C                 call    ES_to_200h__sub_13C1
seg000:128F                 mov     byte ptr es:5FF0h, 40h ; '@'
seg000:1295                 jmp     OUTER_LOOP1__loc_1156
seg000:1298
seg000:1298 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1298
seg000:1298
seg000:1298 sub_1298        proc near               ; CODE XREF: seg000:116Cp
seg000:1298                                         ; seg000:1175p
seg000:1298                                         ; seg000:1199p
seg000:1298                                         ; seg000:11A2p
seg000:1298                                         ; seg000:11ABp
seg000:1298                                         ; seg000:11B8p
seg000:1298                                         ; seg000:11CDp sub_1298+2j
seg000:1298                 stosw
seg000:1299                 dec     bx
seg000:129A                 jnz     short sub_1298
seg000:129C                 retn
seg000:129C sub_1298        endp
seg000:129C
seg000:129D ; ---------------------------------------------------------------------------
seg000:129D                 push    bp              ; Interrupt service routine
seg000:129E                 xchg    ax, bp
seg000:129F                 push    sp
seg000:12A0                 and     ax, 28A9h
seg000:12A3                 and     ax, 4922h
seg000:12A6                 sub     dl, [di+25h]
seg000:12A9                 push    bp
seg000:12AA                 and     ax, 0A525h
seg000:12AD                 test    al, 92h
seg000:12AF                 dec     ax
seg000:12B0                 sub     dl, [di-5Bh]
seg000:12B3                 push    sp
seg000:12B4                 and     ax, 5495h
seg000:12B7                 dec     cx
seg000:12B8                 push    dx
seg000:12B9                 dec     cx
seg000:12BA                 sub     dl, [di+49h]
seg000:12BD                 push    bp
seg000:12BE                 and     ax, 9252h
seg000:12C1                 mov     ch, [bp+si]
seg000:12C3                 dec     cx
seg000:12C4                 sub     dl, [di-77h]
seg000:12C7                 push    sp
seg000:12C8                 and     ax, 22A2h
seg000:12CB                 sub     ch, [bp+si]
seg000:12CD                 dec     cx
seg000:12CE                 sub     dl, [di+29h]
seg000:12D1                 push    bp
seg000:12D2                 and     ax, 0AA2Ah
seg000:12D5                 mov     ds:488Ah, al
seg000:12D8
seg000:12D8 loc_12D8:                               ; CODE XREF: seg000:1262j
seg000:12D8                 sub     cl, [bp+di-1EF2h]
seg000:12DC                 mov     di, 40E8h
seg000:12DF                 add     [bp+di-1CF2h], cl
seg000:12E3                 mov     di, 0E1A1h
seg000:12E6                 mov     di, 4FE8h
seg000:12E9                 add     ah, ah
seg000:12EB                 add     dh, ah
seg000:12ED                 add     [bx+di+1000h], bh
seg000:12F1                 call    ACTIVATE_Z80_STI__sub_196
seg000:12F4                 call    near ptr TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:12F7                 test    dl, 1
seg000:12FA                 jnz     short CONTINUE___loc_12FF ;
seg000:12FA                                         ;
seg000:12FC                 jmp     loc_1443        ; Z80 / keyboard / 1200 baud COMM port access (test routines?)
seg000:12FF ; ---------------------------------------------------------------------------
seg000:12FF
seg000:12FF                 public CONTINUE___loc_12FF ; weak
seg000:12FF CONTINUE___loc_12FF:                    ; CODE XREF: seg000:12FAj
seg000:12FF                 mov     cx, ds:0BFE3h
seg000:1303                 call    sub_1320
seg000:1306                 mov     cx, ds:0BFE5h
seg000:130A                 mov     ax, ds:0BFE3h
seg000:130D                 call    LOAD_AX_CX_to_Z80__sub_1339 ;
seg000:130D                                         ;
seg000:1310                 in      al, 0           ; Read 8088 latch register (clear the interrupt)
seg000:1312                 out     0, al           ; 8088 writes to port 0x00 (interrupts Z80)
seg000:1312                                         ;
seg000:1314                 mov     cx, 5000h
seg000:1317                 call    ACTIVATE_Z80_STI__sub_196
seg000:131A                 call    near ptr TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:131D                 jmp     loc_1443        ; Z80 / keyboard / 1200 baud COMM port access (test routines?)
seg000:1320
seg000:1320 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1320
seg000:1320
seg000:1320 sub_1320        proc near               ; CODE XREF: seg000:11DDp
seg000:1320                                         ; seg000:1303p
seg000:1320                                         ; SET_and_RESET_Z80__sub_13F4+31p
seg000:1320                                         ; sub_84+15E8p
seg000:1320                 add     cx, 0B97Dh
seg000:1324                 call    DS_to_0000__sub_13CD
seg000:1327                 mov     word ptr ds:loc_4FE+2, cx
seg000:132B                 call    F400_to_DS__sub_13C7
seg000:132E                 mov     ax, ds:0BFDDh
seg000:1331                 add     ax, 6000h
seg000:1334                 mov     es:75DCh, ax
seg000:1338                 retn
seg000:1338 sub_1320        endp
seg000:1338
seg000:1339
seg000:1339 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1339
seg000:1339
seg000:1339 LOAD_AX_CX_to_Z80__sub_1339 proc near   ; CODE XREF: seg000:1140p
seg000:1339                                         ; seg000:11E7p
seg000:1339                                         ; seg000:130Dp
seg000:1339                                         ; SET_and_RESET_Z80__sub_13F4+2Ap
seg000:1339                                         ; SET_and_RESET_Z80__sub_13F4+3Bp
seg000:1339                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+137p
seg000:1339                                         ; sub_84+15E1p
seg000:1339                                         ; sub_84+15F2p
seg000:1339                 sub     cx, ax
seg000:133B                 shr     cx, 1
seg000:133D                 add     cx, 1           ; When called from offset 1428 (example):
seg000:133D                                         ;
seg000:133D                                         ; $0614 - 05b7 => SHR = $2e + 1 = $2f => CX
seg000:1340                 call    sub_287
seg000:1343                 retn
seg000:1343 LOAD_AX_CX_to_Z80__sub_1339 endp
seg000:1343
seg000:1344
seg000:1344 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1344
seg000:1344
seg000:1344                 public TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:1344 TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344 proc far ; CODE XREF: seg000:1153p
seg000:1344                                         ; seg000:12F4p
seg000:1344                                         ; seg000:131Ap
seg000:1344
seg000:1344 ; FUNCTION CHUNK AT seg000:13D3 SIZE 00000011 BYTES
seg000:1344 ; FUNCTION CHUNK AT seg000:1443 SIZE 00000146 BYTES
seg000:1344 ; FUNCTION CHUNK AT seg000:15B9 SIZE 00000047 BYTES
seg000:1344
seg000:1344                 test    dl, 10h
seg000:1347                 jz      short sub_1357
seg000:1349                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:1349                                         ;
seg000:134B                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:134B                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:134B                                         ;
seg000:134D                 mov     al, 0DFh ; '¯'  ; see $13ae;
seg000:134D                                         ; LSB 1111 - MSB 1101 : D3 + D4 + D5 OFF (only D6 is lit)
seg000:134D                                         ; = "29 MAIN BOARD Z80 response" (Pos. 7,6,5 = off on back of computer; Position 4 = ON)
seg000:134D                                         ;
seg000:134F                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:134F                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:134F                                         ;
seg000:1351                 mov     si, 819Ch       ; 02 60 83 42 8a
seg000:1351                                         ;
seg000:1351                                         ;         8360 : "29 - "
seg000:1351                                         ;         8a42 : "Main Board"
seg000:1354                 jmp     loc_13D3        ;
seg000:1354 TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344 endp ; [Z80 response]  CAN CONTINUE.  Tried to boot a VT180 system diskette?
seg000:1354
seg000:1357
seg000:1357 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1357
seg000:1357
seg000:1357 sub_1357        proc near               ; CODE XREF: seg000:125Fp
seg000:1357                                         ; seg000:1268p
seg000:1357                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+3j
seg000:1357                 mov     ax, es:5FF0h
seg000:135B                 test    al, 80h
seg000:135D                 jnz     short loc_1360
seg000:135F                 retn
seg000:1360 ; ---------------------------------------------------------------------------
seg000:1360
seg000:1360 loc_1360:                               ; CODE XREF: sub_1357+6j
seg000:1360                 test    al, 1
seg000:1362                 jz      short loc_136C
seg000:1364                 or      dl, 8
seg000:1367                 mov     si, 8192h       ; "28 - RX 50 Controller Board" (?)
seg000:136A                 jmp     short loc_13B5
seg000:136C ; ---------------------------------------------------------------------------
seg000:136C
seg000:136C loc_136C:                               ; CODE XREF: sub_1357+Bj
seg000:136C                 test    al, 2
seg000:136E                 jz      short loc_138D
seg000:1370                 test    al, 4
seg000:1372                 jz      short loc_137C
seg000:1374                 mov     si, 81A1h       ; "7 - Drive A" (restore)
seg000:1377                 call    sub_13B7
seg000:137A                 jmp     short loc_13B5
seg000:137C ; ---------------------------------------------------------------------------
seg000:137C
seg000:137C loc_137C:                               ; CODE XREF: sub_1357+1Bj
seg000:137C                 test    al, 8
seg000:137E                 jz      short ERROR_29__Z80_RESPONSE__loc_13AA
seg000:1380                 test    al, 10h
seg000:1382                 jz      short loc_1385
seg000:1384                 retn
seg000:1385 ; ---------------------------------------------------------------------------
seg000:1385
seg000:1385 loc_1385:                               ; CODE XREF: sub_1357+2Bj
seg000:1385                 mov     si, 81A6h       ; "7 - Drive B" (restore)
seg000:1388                 call    sub_13B7
seg000:138B                 jmp     short loc_13B5
seg000:138D ; ---------------------------------------------------------------------------
seg000:138D
seg000:138D loc_138D:                               ; CODE XREF: sub_1357+17j
seg000:138D                 test    al, 20h
seg000:138F                 jz      short ERROR_29__Z80_RESPONSE__loc_13AA
seg000:1391                 test    al, 10h
seg000:1393                 mov     al, 0EFh ; 'n'  ; LSB 1111 - MSB 1110 : LED  D3 is lit, OTHERS OFF
seg000:1393                                         ;
seg000:1395                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:1397                 jz      short loc_13A1
seg000:1399                 or      dl, 0Ah
seg000:139C                 mov     si, 816Ah       ; 02 36-83 D3 88
seg000:139C                                         ; 8336 : "22 - "
seg000:139C                                         ; 88d3 : "Remove Card or Diskette" [NON FATAL]
seg000:139F                 jmp     short loc_13B5
seg000:13A1 ; ---------------------------------------------------------------------------
seg000:13A1
seg000:13A1 loc_13A1:                               ; CODE XREF: sub_1357+40j
seg000:13A1                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:13A1                                         ;
seg000:13A3                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:13A3                                         ;
seg000:13A5                 mov     si, 8197h       ; 02-2A 83 42 8A
seg000:13A8                 jmp     short loc_13B5  ; 832a: "20 -"
seg000:13A8                                         ; 8a42: "Main Board [unsolicited interrupt; Z80]++" [FATAL]
seg000:13AA ; ---------------------------------------------------------------------------
seg000:13AA
seg000:13AA ERROR_29__Z80_RESPONSE__loc_13AA:       ; CODE XREF: sub_1357+27j
seg000:13AA                                         ; sub_1357+38j
seg000:13AA                 mov     al, (offset j_PREPARE_NVM__loc_3DCF+1) ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:13AA                                         ;
seg000:13AC                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:13AC                                         ;
seg000:13AE                 mov     al, 0DFh ; '¯'  ; see $134d;
seg000:13AE                                         ; LSB 1111 - MSB 1101 : D3 + D4 + D5 OFF (only D6 is lit)
seg000:13AE                                         ; = "29 MAIN BOARD Z80 response" (Pos. 7,6,5 = off on back of computer; Position 4 = ON)
seg000:13AE                                         ;
seg000:13B0                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:13B0                                         ;
seg000:13B2                 mov     si, 819Ch       ; 02 60 83 42 8a
seg000:13B2                                         ;
seg000:13B2                                         ;         8360 : "29 - "
seg000:13B2                                         ;         8a42 : "Main Board"
seg000:13B2                                         ;
seg000:13B2                                         ; [Z80 response]  CAN CONTINUE.  Tried to boot a VT180 system diskette?
seg000:13B5
seg000:13B5 loc_13B5:                               ; CODE XREF: sub_1357+13j
seg000:13B5                                         ; sub_1357+23j
seg000:13B5                                         ; sub_1357+34j
seg000:13B5                                         ; sub_1357+48j
seg000:13B5                                         ; sub_1357+51j
seg000:13B5                 jmp     short loc_13D3
seg000:13B5 sub_1357        endp
seg000:13B5
seg000:13B7
seg000:13B7 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:13B7
seg000:13B7
seg000:13B7 sub_13B7        proc near               ; CODE XREF: sub_1357+20p
seg000:13B7                                         ; sub_1357+31p
seg000:13B7                 or      dl, 8
seg000:13BA                 xor     cx, cx
seg000:13BC                 mov     cl, ah
seg000:13BE                 add     si, cx
seg000:13C0                 retn
seg000:13C0 sub_13B7        endp
seg000:13C0
seg000:13C1
seg000:13C1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:13C1
seg000:13C1
seg000:13C1 ES_to_200h__sub_13C1 proc near          ; CODE XREF: seg000:10EFp
seg000:13C1                                         ; seg000:128Cp
seg000:13C1                                         ; SET_and_RESET_Z80__sub_13F4+1p
seg000:13C1                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+102p
seg000:13C1                                         ; sub_84+15B4p
seg000:13C1                 mov     ax, 200h
seg000:13C4                 mov     es, ax
seg000:13C6                 assume es:nothing
seg000:13C6                 retn
seg000:13C6 ES_to_200h__sub_13C1 endp
seg000:13C6
seg000:13C7
seg000:13C7 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:13C7
seg000:13C7
seg000:13C7 F400_to_DS__sub_13C7 proc near          ; CODE XREF: seg000:1130p
seg000:13C7                                         ; seg000:11D6p sub_1320+Bp
seg000:13C7                                         ; SET_and_RESET_Z80__sub_13F4+19p
seg000:13C7                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+126p
seg000:13C7                                         ; sub_84+15D0p
seg000:13C7                 mov     ax, 0F400h
seg000:13CA                 mov     ds, ax
seg000:13CC                 assume ds:nothing
seg000:13CC                 retn
seg000:13CC F400_to_DS__sub_13C7 endp
seg000:13CC
seg000:13CD
seg000:13CD ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:13CD
seg000:13CD
seg000:13CD DS_to_0000__sub_13CD proc near          ; CODE XREF: sub_84+388p
seg000:13CD                                         ; sub_84+3A8p sub_69D+3p
seg000:13CD                                         ; seg000:10E7p
seg000:13CD                                         ; seg000:1127p
seg000:13CD                                         ; seg000:115Ap
seg000:13CD                                         ; seg000:RX50_ERROR_28__loc_1279p
seg000:13CD                                         ; sub_1320+4p
seg000:13CD                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+90p
seg000:13CD                                         ; SET_and_RESET_Z80__sub_13F4+4p
seg000:13CD                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+11Bp
seg000:13CD                                         ; sub_84+15B7p
seg000:13CD                 mov     ax, 0
seg000:13D0                 mov     ds, ax
seg000:13D2                 assume ds:nothing
seg000:13D2                 retn
seg000:13D2 DS_to_0000__sub_13CD endp
seg000:13D2
seg000:13D3 ; ---------------------------------------------------------------------------
seg000:13D3 ; START OF FUNCTION CHUNK FOR TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:13D3
seg000:13D3 loc_13D3:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+10j
seg000:13D3                                         ; sub_1357:loc_13B5j
seg000:13D3                 pop     cx
seg000:13D4                 call    DS_to_0000__sub_13CD
seg000:13D7                 mov     byte ptr ds:loc_4FE+4, 1
seg000:13DC                 or      dl, 4
seg000:13DF                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9 ; system message.
seg000:13E2                 jmp     short loc_1443  ; Z80 / keyboard / 1200 baud COMM port access (test routines?)
seg000:13E2 ; END OF FUNCTION CHUNK FOR TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:13E4 ; ---------------------------------------------------------------------------
seg000:13E4                 cli
seg000:13E5                 pop     ax
seg000:13E6                 pop     ax
seg000:13E7                 pop     ax
seg000:13E8                 pop     cx
seg000:13E9                 pop     dx
seg000:13EA                 pop     ax
seg000:13EB                 cmp     ax, 19Ah
seg000:13EE                 jz      short locret_13F3
seg000:13F0                 mov     dx, cx
seg000:13F2                 push    ax
seg000:13F3
seg000:13F3 locret_13F3:                            ; CODE XREF: seg000:13EEj
seg000:13F3                 retn
seg000:13F4
seg000:13F4 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:13F4
seg000:13F4
seg000:13F4 SET_and_RESET_Z80__sub_13F4 proc near   ; CODE XREF: sub_84:loc_998p
seg000:13F4                                         ; seg000:0A15p
seg000:13F4                                         ; seg000:loc_F95p
seg000:13F4                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+2ACp
seg000:13F4                 cld
seg000:13F5                 call    ES_to_200h__sub_13C1
seg000:13F8                 call    DS_to_0000__sub_13CD
seg000:13FB                 mov     byte ptr es:5FF0h, 0
seg000:1401                 mov     byte ptr es:5FF2h, 0
seg000:1407                 mov     word ptr ds:loc_4FE+2, 0B97Dh
seg000:140D                 call    F400_to_DS__sub_13C7
seg000:1410                 mov     word ptr es:75DCh, 6000h
seg000:1417                 mov     cx, ds:0BFDDh
seg000:141B                 mov     ax, 0
seg000:141E                 call    LOAD_AX_CX_to_Z80__sub_1339
seg000:1421                 mov     cx, ds:0BFE7h
seg000:1425                 call    sub_1320
seg000:1428                 mov     cx, ds:0BFE9h   ; cx = 0614 (example)
seg000:142C                 mov     ax, ds:0BFE7h   ; ax = 05b7 (example)
seg000:142F                 call    LOAD_AX_CX_to_Z80__sub_1339
seg000:1432                 in      al, 0
seg000:1434                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:1434                                         ;
seg000:1436                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1436                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:1436                                         ;
seg000:1438                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:1438                                         ;
seg000:143A                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:143A                                         ;
seg000:143C                 mov     byte ptr es:9000h, 0
seg000:1442                 retn
seg000:1442 SET_and_RESET_Z80__sub_13F4 endp
seg000:1442
seg000:1443 ; ---------------------------------------------------------------------------
seg000:1443 ; START OF FUNCTION CHUNK FOR TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:1443
seg000:1443 loc_1443:                               ; CODE XREF: seg000:126Bj
seg000:1443                                         ; seg000:12FCj
seg000:1443                                         ; seg000:131Dj
seg000:1443                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+9Ej
seg000:1443                 cli
seg000:1444                 in      al, 0
seg000:1446                 call    ES_to_200h__sub_13C1
seg000:1449                 test    dl, 4
seg000:144C                 jz      short loc_1451
seg000:144E                 jmp     loc_15D8
seg000:1451 ; ---------------------------------------------------------------------------
seg000:1451
seg000:1451 loc_1451:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+108j
seg000:1451                 mov     al, 0BFh ; '+'  ; LSB: 1111 - MSB: 1011 : ONLY LED  D4 is lit
seg000:1451                                         ;
seg000:1453                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:1453                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:1455                 in      al, 0
seg000:1457                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:1457                                         ;
seg000:1459                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1459                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:145B                 mov     cx, ds:0BFEBh
seg000:145F                 call    DS_to_0000__sub_13CD
seg000:1462                 add     cx, 0B97Dh
seg000:1466                 mov     word ptr ds:loc_4FE+2, cx
seg000:146A                 call    F400_to_DS__sub_13C7
seg000:146D                 mov     word ptr es:75DCh, 6000h
seg000:1474                 mov     cx, ds:0BFEDh
seg000:1478                 mov     ax, ds:0BFEBh
seg000:147B                 call    LOAD_AX_CX_to_Z80__sub_1339
seg000:147E                 mov     al, 88h ; 'ê'   ; SET TX + RX RATE TO 1200
seg000:147E                                         ;
seg000:1480                 out     6, al           ; [06] : Communication bit rates (see PAGE 21 of PC 100 SYSTEM SPEC)
seg000:1480                                         ;
seg000:1480                                         ; VALUES 0...F represent BIT RATES from 50 - 19200.
seg000:1480                                         ;
seg000:1480                                         ; LOW NIBBLE = TRANSMIT CLOCK
seg000:1480                                         ; HIGH NIBBLE = RECEIVE CLOCK
seg000:1480                                         ;
seg000:1482                 mov     al, 6           ; set PRINTER PORT BIT RATE to 300
seg000:1482                                         ;
seg000:1484                 out     0Eh, al         ; - bits 0-2 control the printer port bit rates
seg000:1484                                         ; - bit 3 on port 0E selects comm port clocks for RxC, TxC.
seg000:1484                                         ;   ( external when 1; internal when 0 )
seg000:1484                                         ;
seg000:1486                 xor     ax, ax
seg000:1488                 mov     es, ax
seg000:148A                 assume es:nothing
seg000:148A                 mov     si, 1615h
seg000:148D                 mov     di, 84h ; 'ä'
seg000:1490                 mov     cx, 0Eh
seg000:1493                 rep movsw
seg000:1495                 call    KEYBOARD_MAGIC__sub_1600 ; SENDS CODES TO KEYBOARD INTERFACE:  00 00 00 / 40 / 7E / 17
seg000:1498                 mov     al, 18h
seg000:149A                 out     43h, al
seg000:149C                 nop
seg000:149D                 nop
seg000:149E                 nop
seg000:149F                 nop
seg000:14A0                 mov     al, 4
seg000:14A2                 out     43h, al
seg000:14A4                 mov     al, 47h ; 'G'
seg000:14A6                 out     43h, al
seg000:14A8                 mov     al, 3
seg000:14AA                 out     43h, al
seg000:14AC                 mov     al, 0C1h ; '-'
seg000:14AE                 out     43h, al
seg000:14B0                 mov     al, 5
seg000:14B2                 out     43h, al
seg000:14B4                 mov     al, 68h ; 'h'
seg000:14B6                 out     43h, al
seg000:14B8                 mov     al, 18h
seg000:14BA                 out     42h, al
seg000:14BC                 nop
seg000:14BD                 nop
seg000:14BE                 nop
seg000:14BF                 nop
seg000:14C0                 mov     al, 4
seg000:14C2                 out     42h, al
seg000:14C4                 mov     al, 45h ; 'E'
seg000:14C6                 out     42h, al
seg000:14C8                 mov     al, 3
seg000:14CA                 out     42h, al
seg000:14CC                 mov     al, 0C1h ; '-'
seg000:14CE                 out     42h, al
seg000:14D0                 mov     al, 5
seg000:14D2                 out     42h, al
seg000:14D4                 mov     al, 68h ; 'h'
seg000:14D6                 out     42h, al
seg000:14D8                 mov     al, 1
seg000:14DA                 out     42h, al
seg000:14DC                 mov     al, 1Ah
seg000:14DE                 out     42h, al
seg000:14E0                 mov     ax, es
seg000:14E2                 mov     ds, ax
seg000:14E4                 mov     al, 0A3h ; 'ú'  ; 10100011 : ZRESET / DISPLAY ON / READ-RECALL NVM / PORT LOOPBACK (COMM, PRINTER and KEYBOARD tests)
seg000:14E4                                         ;
seg000:14E6                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:14E6                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:14E8                 mov     di, 9000h
seg000:14EB                 mov     si, 1000h
seg000:14EE                 mov     es:7FF8h, dx
seg000:14F3                 xor     dx, dx
seg000:14F5                 xor     bx, bx
seg000:14F7                 mov     ax, bx
seg000:14F9                 out     40h, al
seg000:14FB                 inc     bx
seg000:14FC                 mov     es:7FF4h, ax
seg000:1500                 mov     es:7FF2h, al
seg000:1504                 sti
seg000:1505
seg000:1505 loc_1505:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1E6j
seg000:1505                 inc     byte ptr es:7FF2h
seg000:150A                 inc     ax
seg000:150B                 mov     es:7FF0h, al
seg000:150F                 inc     byte ptr es:7FF2h
seg000:1514                 mov     cx, 200h
seg000:1517
seg000:1517 loc_1517:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1E8j
seg000:1517                 in      al, 43h
seg000:1519                 test    al, 1
seg000:151B                 jnz     short loc_1530
seg000:151D
seg000:151D loc_151D:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+200j
seg000:151D                 test    al, 4
seg000:151F                 jnz     short loc_1546
seg000:1521
seg000:1521 loc_1521:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+208j
seg000:1521                 mov     al, es:7FF0h
seg000:1525                 cmp     al, es:7FF2h
seg000:152A                 jz      short loc_1505
seg000:152C                 loopne  loc_1517
seg000:152E                 jmp     short loc_1552  ; 33 : Contention [ FATAL ]
seg000:1530 ; ---------------------------------------------------------------------------
seg000:1530
seg000:1530 loc_1530:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1D7j
seg000:1530                 push    ax
seg000:1531                 in      al, 41h
seg000:1533                 mov     es:[di], al
seg000:1536                 inc     di
seg000:1537                 add     al, 3
seg000:1539                 cmp     al, dl
seg000:153B                 jnz     short loc_1551  ; 33 : Contention [ FATAL ]
seg000:153D                 cmp     di, 9300h
seg000:1541                 jz      short loc_15B9
seg000:1543                 pop     ax
seg000:1544                 jmp     short loc_151D
seg000:1546 ; ---------------------------------------------------------------------------
seg000:1546
seg000:1546 loc_1546:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1DBj
seg000:1546                 mov     al, dl
seg000:1548                 not     al
seg000:154A                 out     41h, al
seg000:154C                 jmp     short loc_1521
seg000:154E ; ---------------------------------------------------------------------------
seg000:154E
seg000:154E loc_154E:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+237j
seg000:154E                 pop     ax
seg000:154F                 pop     ax
seg000:1550                 pop     ax
seg000:1551
seg000:1551 loc_1551:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1F7j
seg000:1551                 pop     ax
seg000:1552
seg000:1552 loc_1552:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1EAj
seg000:1552                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+27Cj
seg000:1552                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+285j
seg000:1552                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+28Aj
seg000:1552                 cli
seg000:1553                 mov     dx, es:7FF8h
seg000:1558                 or      dl, 2
seg000:155B                 mov     si, 81E7h       ; 02-72 83 1C 8B-
seg000:155B                                         ;    8372: "33 - "
seg000:155B                                         ;    8b1c: "Contention" [FATAL]
seg000:155E                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:1561                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:1564                 hlt
seg000:1565                 push    ax
seg000:1566                 in      al, 42h
seg000:1568                 test    al, 4
seg000:156A                 jnz     short loc_1580
seg000:156C
seg000:156C loc_156C:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+243j
seg000:156C                 test    al, 1
seg000:156E                 jnz     short loc_1572
seg000:1570                 pop     ax
seg000:1571                 iret
seg000:1572 ; ---------------------------------------------------------------------------
seg000:1572
seg000:1572 loc_1572:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+22Aj
seg000:1572                 in      al, 40h
seg000:1574                 mov     es:[si], al
seg000:1577                 add     al, 3
seg000:1579                 cmp     al, bl
seg000:157B                 jnz     short loc_154E  ; 33 : Contention [ FATAL ]
seg000:157D                 inc     si
seg000:157E                 pop     ax
seg000:157F                 iret
seg000:1580 ; ---------------------------------------------------------------------------
seg000:1580
seg000:1580 loc_1580:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+226j
seg000:1580                 push    ax
seg000:1581                 mov     al, bl
seg000:1583                 out     40h, al
seg000:1585                 inc     bx
seg000:1586                 pop     ax
seg000:1587                 jmp     short loc_156C
seg000:1587 ; END OF FUNCTION CHUNK FOR TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:1589 ; ---------------------------------------------------------------------------
seg000:1589                 push    ax
seg000:158A                 in      al, 11h
seg000:158C                 test    al, 2
seg000:158E                 jnz     short loc_1596
seg000:1590
seg000:1590 loc_1590:                               ; CODE XREF: seg000:15A4j
seg000:1590                 test    al, 1
seg000:1592                 jnz     short loc_15A6
seg000:1594                 pop     ax
seg000:1595                 iret
seg000:1596 ; ---------------------------------------------------------------------------
seg000:1596
seg000:1596 loc_1596:                               ; CODE XREF: seg000:158Ej
seg000:1596                 push    ax
seg000:1597                 in      al, 10h
seg000:1599                 mov     es:[di], al
seg000:159C                 inc     di
seg000:159D                 cmp     di, 9300h
seg000:15A1                 jz      short loc_15B7
seg000:15A3                 pop     ax
seg000:15A4                 jmp     short loc_1590
seg000:15A6 ; ---------------------------------------------------------------------------
seg000:15A6
seg000:15A6 loc_15A6:                               ; CODE XREF: seg000:1592j
seg000:15A6                 mov     al, dl
seg000:15A8                 out     10h, al
seg000:15AA                 inc     dx
seg000:15AB                 pop     ax
seg000:15AC                 iret
seg000:15AD ; ---------------------------------------------------------------------------
seg000:15AD                 push    ax
seg000:15AE                 inc     word ptr es:7FF4h
seg000:15B3                 in      al, 0
seg000:15B5                 pop     ax
seg000:15B6                 iret
seg000:15B7 ; ---------------------------------------------------------------------------
seg000:15B7
seg000:15B7 loc_15B7:                               ; CODE XREF: seg000:15A1j
seg000:15B7                 pop     ax
seg000:15B8                 pop     ax
seg000:15B9 ; START OF FUNCTION CHUNK FOR TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:15B9
seg000:15B9 loc_15B9:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+1FDj
seg000:15B9                 pop     ax
seg000:15BA                 pop     ax
seg000:15BB                 cli
seg000:15BC                 cmp     si, 105Fh
seg000:15C0                 jnz     short loc_1552  ; 33 : Contention [ FATAL ]
seg000:15C2                 mov     ax, es:7FF4h
seg000:15C6                 cmp     ax, 23h ; '#'
seg000:15C9                 jg      short loc_1552  ; 33 : Contention [ FATAL ]
seg000:15CB                 cmp     ax, 20h ; ' '
seg000:15CE                 jl      short loc_1552  ; 33 : Contention [ FATAL ]
seg000:15D0                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:15D3                 mov     dx, es:7FF8h
seg000:15D8
seg000:15D8 loc_15D8:                               ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+10Aj
seg000:15D8                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:15D8                                         ;      See TABLE 4-29 and 4-15
seg000:15D8                                         ; #       VALUE
seg000:15D8                                         ; 0       1       ZRESET L (represents the state of bit 0 of the 8088 diagnostic write register)
seg000:15D8                                         ; 1-3     -       state of W13, W14 and W15 MANUFACTURING TEST JUMPERS (normally high = 1)
seg000:15D8                                         ; 4       $10     DIAG LOOPBACK H (diagnostic loopback H, state of bit 4 of 8088 diag.write register)
seg000:15D8                                         ; 5       $20     PORT LOOPBACK H (PORT loopback H, state of bit 5 of 8088 diag.write register)
seg000:15D8                                         ; 6       $40     PROGRAMM NVM (program NVM : state of bit 6 of 8088 diag.write register)
seg000:15D8                                         ; 7       $80     RECALL NVM (recall NVM: state of bit 7 ...)
seg000:15D8                                         ;
seg000:15DA                 test    al, 4           ; W14 MANUFACTURING TEST JUMPER ? (normally high = 1)
seg000:15DC                 jnz     short W14__loc_15EC
seg000:15DE                 in      al, 11h
seg000:15E0                 test    al, 80h
seg000:15E2                 jz      short W18__loc_15E9 ; jumps to "loc_150"
seg000:15E4                 jmp     far ptr 1FFFh:10h
seg000:15E9 ; ---------------------------------------------------------------------------
seg000:15E9
seg000:15E9 W18__loc_15E9:                          ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+29Ej
seg000:15E9                 jmp     j_SHORT_SELFTEST__loc_150 ; COLD BOOT ?
seg000:15EC ; ---------------------------------------------------------------------------
seg000:15EC
seg000:15EC W14__loc_15EC:                          ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+298j
seg000:15EC                 mov     al, 82h ; 'é'   ; Z80 in NORMAL state / DISPLAY ON / READ-RECALL NVM
seg000:15EC                                         ;
seg000:15EE                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:15EE                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:15EE                                         ;
seg000:15F0                 call    SET_and_RESET_Z80__sub_13F4
seg000:15F3
seg000:15F3 loc_15F3:                               ; CODE XREF: seg000:0A2Dj
seg000:15F3                 mov     al, 0FFh        ; LSB: 1111 - MSB: 1111 : ALL LEDs  OFF
seg000:15F3                                         ;
seg000:15F5                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:15F5                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:15F7                 mov     byte ptr es:9000h, 7
seg000:15FD                 jmp     RAINBOW100_LOGO__loc_33D
seg000:15FD ; END OF FUNCTION CHUNK FOR TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344
seg000:1600
seg000:1600 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1600
seg000:1600
seg000:1600 KEYBOARD_MAGIC__sub_1600 proc near      ; CODE XREF: TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+151p
seg000:1600                 mov     al, 0           ; SENDS CODES TO KEYBOARD INTERFACE:
seg000:1600                                         ;
seg000:1600                                         ; 00 00 00
seg000:1600                                         ; 40
seg000:1600                                         ; 7E
seg000:1600                                         ; 17
seg000:1600                                         ;
seg000:1602                 out     11h, al
seg000:1604                 out     11h, al
seg000:1606                 out     11h, al
seg000:1608                 mov     al, 40h ; '@'
seg000:160A                 out     11h, al
seg000:160C                 mov     al, 7Eh ; '~'
seg000:160E                 out     11h, al
seg000:1610                 mov     al, 17h
seg000:1612                 out     11h, al         ; [11] : KEYBOARD INTERFACE
seg000:1614                 retn
seg000:1614 KEYBOARD_MAGIC__sub_1600 endp
seg000:1614
seg000:1614 ; ---------------------------------------------------------------------------
seg000:1615                 db  4Eh ; N
seg000:1616                 db  15h
seg000:1617                 db    0
seg000:1618                 db 0F4h ; (
seg000:1619                 db  4Eh ; N
seg000:161A                 db  15h
seg000:161B                 db    0
seg000:161C                 db 0F4h ; (
seg000:161D                 db  4Eh ; N
seg000:161E                 db  15h
seg000:161F                 db    0
seg000:1620                 db 0F4h ; (
seg000:1621                 db  65h ; e             ; KEYBOARD INITIALIZATION CODES?
seg000:1621                                         ;
seg000:1621                                         ; Init code is (for example):
seg000:1621                                         ; 00 00 00 40 4E 15 (see page 20 of PC 100 system specification)
seg000:1621                                         ;
seg000:1622                 db  15h
seg000:1623                 db    0
seg000:1624                 db 0F4h ; (
seg000:1625                 db  4Eh ; N
seg000:1626                 db  15h
seg000:1627                 db    0
seg000:1628                 db 0F4h ; (
seg000:1629                 db  89h ; ë
seg000:162A                 db  15h
seg000:162B                 db    0
seg000:162C                 db 0F4h ; (
seg000:162D                 db 0ADh ; ¡
seg000:162E                 db  15h
seg000:162F                 db    0
seg000:1630                 db 0F4h ; (
seg000:1631 ; ---------------------------------------------------------------------------
seg000:1631 ; START OF FUNCTION CHUNK FOR sub_84
seg000:1631
seg000:1631 loc_1631:                               ; CODE XREF: sub_84+392j
seg000:1631                                         ; sub_84+1640j
seg000:1631                 cli
seg000:1632                 mov     dx, 10Ch
seg000:1635                 mov     al, 0
seg000:1637                 out     dx, al          ; DISABLE MHFU (0x00 => port 10C) // Set scroll latch LSB ' s to 00
seg000:1637                                         ;
seg000:1638                 call    ES_to_200h__sub_13C1
seg000:163B                 call    DS_to_0000__sub_13CD
seg000:163E                 mov     byte ptr es:5FF0h, 0
seg000:1644                 mov     byte ptr es:5FF2h, 4
seg000:164A                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:164A                                         ;
seg000:164C                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:164C                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:164E                 mov     word ptr ds:loc_4FE+2, 0B97Dh
seg000:1654                 call    F400_to_DS__sub_13C7
seg000:1657                 mov     word ptr es:75DCh, 6000h
seg000:165E                 mov     cx, ds:0BFDFh
seg000:1662                 mov     ax, 0
seg000:1665                 call    LOAD_AX_CX_to_Z80__sub_1339
seg000:1668                 mov     cx, ds:0BFE3h
seg000:166C                 call    sub_1320
seg000:166F                 mov     cx, ds:0BFE5h
seg000:1673                 mov     ax, ds:0BFE3h
seg000:1676                 call    LOAD_AX_CX_to_Z80__sub_1339
seg000:1679                 in      al, 0
seg000:167B                 mov     al, 80h ; 'Ç'   ; Z80 in NORMAL state / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:167B                                         ;
seg000:167D                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:167D                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:167D                                         ;
seg000:167F                 mov     al, 81h ; 'ü'   ; RESET Z80 / DISPLAY _BLANK_ / READ-RECALL NVM
seg000:167F                                         ;
seg000:1681                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1681                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:1683                 xor     ax, ax
seg000:1685                 mov     es, ax
seg000:1687                 mov     byte ptr es:loc_FFF, 0
seg000:168D                 mov     bx, 2000h
seg000:1690
seg000:1690 DOUBLE_CHECK_Z80_RESPONSE__loc_1690:    ; CODE XREF: sub_84+161Ej
seg000:1690                 mov     cx, 1
seg000:1693                 call    CPU_DELAY2_n_CLI__sub_197
seg000:1696                 xor     ax, ax
seg000:1698                 cmp     al, byte ptr es:loc_FFF
seg000:169D                 jnz     short Z80_OK__loc_16AA ;
seg000:169D                                         ;
seg000:169F                 dec     bx
seg000:16A0                 cmp     ax, bx
seg000:16A2                 jnz     short DOUBLE_CHECK_Z80_RESPONSE__loc_1690 ;
seg000:16A2                                         ;
seg000:16A4                 mov     si, 819Ch       ; 02 60 83 42 8a
seg000:16A4                                         ;    8360 : "29 -"
seg000:16A4                                         ;    8a42 : "Main Board"
seg000:16A4                                         ;
seg000:16A4                                         ; [Z80 response]  CAN CONTINUE.  Tried to boot a VT180 system diskette?
seg000:16A7                 jmp     loc_16E5        ; Sit n wait / Rainbow logo
seg000:16AA ; ---------------------------------------------------------------------------
seg000:16AA
seg000:16AA Z80_OK__loc_16AA:                       ; CODE XREF: sub_84+1619j
seg000:16AA                 mov     al, byte ptr es:loc_FFF
seg000:16AE                 mov     bp, 16EDh
seg000:16B1                 mov     di, 16F3h
seg000:16B4
seg000:16B4 loc_16B4:                               ; CODE XREF: sub_84+163Ej
seg000:16B4                 cmp     al, cs:[bp+0]
seg000:16B8                 jz      short loc_16C7
seg000:16BA                 inc     bp
seg000:16BB                 inc     di
seg000:16BC                 inc     di
seg000:16BD                 cmp     byte ptr cs:[bp+0], 0FFh
seg000:16C2                 jnz     short loc_16B4
seg000:16C4                 jmp     loc_1631
seg000:16C7 ; ---------------------------------------------------------------------------
seg000:16C7
seg000:16C7 loc_16C7:                               ; CODE XREF: sub_84+1634j
seg000:16C7                 cmp     byte ptr cs:[bp+0], 0Ah
seg000:16CC                 jnz     short loc_16E2
seg000:16CE                 mov     ax, 0EE00h
seg000:16D1                 mov     ds, ax
seg000:16D3                 assume ds:nothing
seg000:16D3                 mov     ds:1FF7h, sp
seg000:16D7                 mov     di, 0FFBh
seg000:16DA                 mov     al, 0           ; 00 => reset scroll region to default:
seg000:16DA                                         ;       first line starts at scan row 0;
seg000:16DA                                         ;       last line terminates at scan row 9 (all visible).
seg000:16DA                                         ;
seg000:16DC                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:16DC                                         ;
seg000:16DE                 sti
seg000:16DF                 jmp     dword ptr es:[di]
seg000:16E2 ; ---------------------------------------------------------------------------
seg000:16E2
seg000:16E2 loc_16E2:                               ; CODE XREF: sub_84+1648j
seg000:16E2                 mov     si, cs:[di]
seg000:16E5
seg000:16E5 loc_16E5:                               ; CODE XREF: sub_84+1623j
seg000:16E5                 mov     dl, 0Ch
seg000:16E7                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:16EA                 jmp     RAINBOW100_LOGO__loc_33D
seg000:16EA ; END OF FUNCTION CHUNK FOR sub_84
seg000:16ED ; ---------------------------------------------------------------------------
seg000:16ED                 add     al, [si]
seg000:16EF                 push    es
seg000:16F0                 or      [bp+si], cl
seg000:16F2                 call    word ptr [bp-7Fh]
seg000:16F5                 pop     bx
seg000:16F6                 and     word ptr [di-7Fh], 8160h
seg000:16FB
seg000:16FB TEST_COMM__RX50__loc_16FB:              ; CODE XREF: seg000:0FA5j
seg000:16FB                 cli
seg000:16FC                 mov     ax, 0
seg000:16FF                 mov     ds, ax
seg000:1701                 assume ds:nothing
seg000:1701                 mov     byte ptr ds:unk_3030, dl
seg000:1705                 mov     ax, 190h
seg000:1708                 call    j_CONTROL_ALL_LEDs__sub_B9A ; OUTPUT 190 TO => LEDs (10010000); LED D5 + D3 * off *,
seg000:1708                                         ; - this corresponds to ERROR 60 (with first Z80 LED off)
seg000:1708                                         ;
seg000:170B                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:170E                 call    TEST_COMM___sub_195A
seg000:1711                 mov     dl, byte ptr ds:unk_3030
seg000:1715                 jmp     RX_50_CONTROLLER___loc_10D9
seg000:1718
seg000:1718 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1718
seg000:1718
seg000:1718 TEST_PRN__sub_1718 proc near            ; CODE XREF: SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+22p
seg000:1718                 mov     ax, 0
seg000:171B                 mov     ds, ax
seg000:171D                 mov     byte ptr ds:unk_3030, dl
seg000:1721                 mov     byte ptr ds:unk_3035, 80h ; 'Ç'
seg000:1726                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:1729                 call    sub_1934
seg000:172C                 call    NEXT_TEST_KBD__sub_19B2
seg000:172F                 mov     dl, byte ptr ds:unk_3030
seg000:1733                 test    byte ptr ds:unk_3035, 78h
seg000:1738                 jz      short locret_174E ; retn
seg000:1738                                         ;
seg000:173A                 or      byte ptr ds:sub_503, 2
seg000:173F                 mov     ax, 290h
seg000:1742                 call    j_CONTROL_ALL_LEDs__sub_B9A ; OUTPUT 290 TO => LEDs (10010000); LED D5 + D3 * off *,
seg000:1742                                         ; 010 0101
seg000:1742                                         ; - this corresponds to ERROR 40 (second Z80 LED = OFF)
seg000:1742                                         ;
seg000:1745                 or      dl, 4
seg000:1748                 mov     si, 8204h       ; 02 78 83 42-8A
seg000:1748                                         ;      8378: "40 - "
seg000:1748                                         ;      8a42: "Main Board [printer port]" / CAN CONTINUE
seg000:174B                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:174E
seg000:174E locret_174E:                            ; CODE XREF: TEST_PRN__sub_1718+20j
seg000:174E                 retn
seg000:174E TEST_PRN__sub_1718 endp
seg000:174E
seg000:174F ; ---------------------------------------------------------------------------
seg000:174F                 push    ax              ; ROUTINES ($174f - $17b5) called via 8086 interrupt vectors.
seg000:174F                                         ; - not directly called.
seg000:174F                                         ;
seg000:174F                                         ; $174f used in VECTOR (table 2) - VFI IRQ
seg000:1750                 push    ds
seg000:1751                 push    dx
seg000:1752                 mov     ax, 0
seg000:1755                 mov     ds, ax          ;
seg000:1755                                         ;
seg000:1757                 mov     al, 9
seg000:1759                 mov     dx, 10Ch
seg000:175C                 out     dx, al          ; 09 => PORT 10c // Clear vertical frequency interrupt
seg000:175C                                         ;
seg000:175D                 inc     word ptr ds:unk_3031 ; Each VBLANK increments word @ $3031
seg000:1761                 pop     dx
seg000:1762                 pop     ds
seg000:1763                 pop     ax
seg000:1764                 iret
seg000:1765 ; ---------------------------------------------------------------------------
seg000:1765                 out     6Dh, al         ; $1765 used in VECTOR (table 2)
seg000:1767                 jmp     loc_179F
seg000:176A ; ---------------------------------------------------------------------------
seg000:176A                 call    SET_COMM_n_PRN__sub_17EF ; $176a used in VECTOR (table 2)
seg000:176D                 jmp     loc_179F
seg000:1770 ; ---------------------------------------------------------------------------
seg000:1770                 mov     dx, 22h ; '"'   ; $1770 used in VECTOR (table 2)
seg000:1773                 call    loc_17F2
seg000:1776                 jmp     loc_179F
seg000:1779 ; ---------------------------------------------------------------------------
seg000:1779                 xor     al, al          ; $1779 used in VECTOR (table 2)
seg000:177B                 out     10h, al
seg000:177D                 xor     al, al          ; 00 00 00
seg000:177F                 out     11h, al
seg000:1781                 out     11h, al
seg000:1783                 out     11h, al
seg000:1785                 mov     al, 40h ; '@'   ; 40
seg000:1787                 out     11h, al
seg000:1789                 mov     al, 4Eh ; 'N'   ; 4E
seg000:178B                 out     11h, al
seg000:178D                 mov     al, 12h         ; 12
seg000:178F                 out     11h, al         ; [11] : KEYBOARD INTERFACE
seg000:1791                 jmp     loc_179F
seg000:1794 ; ---------------------------------------------------------------------------
seg000:1794                 in      al, 0Ah         ; **** $1794 used in VECTOR (table 2) ****
seg000:1794                                         ;
seg000:1794                                         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:1794                                         ;      See TABLE 4-29 and 4-15
seg000:1794                                         ;
seg000:1796                 and     al, 0F3h        ; SELECT system module video / DISABLE parity test f.MEMORY BOARD.
seg000:1796                                         ;
seg000:1798                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1798                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:1798                                         ;         Used during diagnostic testing to control and read the status of various system functions.
seg000:179A                 in      al, 0
seg000:179C                 jmp     $+3
seg000:179F
seg000:179F loc_179F:                               ; CODE XREF: seg000:1767j
seg000:179F                                         ; seg000:176Dj
seg000:179F                                         ; seg000:1776j
seg000:179F                                         ; seg000:1791j
seg000:179F                 call    DISP_ON_setKBD_set4800bps__sub_17B6 ; ***** $179f used in VECTOR (table 2) ****
seg000:17A2                 cli
seg000:17A3                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:17A3                                         ;
seg000:17A5                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:17A5                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:17A5                                         ;
seg000:17A7                 mov     ax, 90h ; 'É'
seg000:17AA                 call    j_CONTROL_ALL_LEDs__sub_B9A ; OUTPUT 90 TO => LEDs (10010000); LED D5 + D3 * off *,
seg000:17AA                                         ; 000 0101
seg000:17AA                                         ; - this corresponds to ERROR 2 (all Z80 LEDs are on)
seg000:17AA                                         ;
seg000:17AD                 or      dl, 2
seg000:17B0                 mov     si, 814Ch       ; [RBHIGH.16K]
seg000:17B0                                         ; 814c: 02 cc 82 42 8a
seg000:17B0                                         ;         82cc "2 - "
seg000:17B0                                         ;         8a42 "Main Board [unsolicited interrupt]++" [FATAL]
seg000:17B0                                         ;
seg000:17B0                                         ; Could be memory extension, too (switches?).
seg000:17B3                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:17B6
seg000:17B6 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:17B6
seg000:17B6
seg000:17B6 DISP_ON_setKBD_set4800bps__sub_17B6 proc near
seg000:17B6                                         ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+6Ep
seg000:17B6                                         ; SetKBD_set4800_Z80Reset_BLANK_READ_NVM__sub_AB1+1p
seg000:17B6                                         ; seg000:TEST_HIRAM_20000__loc_DE4p
seg000:17B6                                         ; W18_EXTRA_TEST_20000_DFFFF__sub_10A5p
seg000:17B6                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+21Ap
seg000:17B6                                         ; TEST_VALID_Z80_RESPONSE_or_ERROR29__sub_1344+28Cp
seg000:17B6                                         ; seg000:170Bp
seg000:17B6                                         ; TEST_PRN__sub_1718+Ep
seg000:17B6                                         ; seg000:loc_179Fp
seg000:17B6                                         ; SETUP_IRQ_TABLE2__sub_1A37+1p
seg000:17B6                 push    dx
seg000:17B7                 mov     al, 6
seg000:17B9                 out     0Eh, al
seg000:17BB                 mov     al, 0DDh ; '¦'  ;
seg000:17BB                                         ; 11011101 - sets 4800 bps (transmit & receive)
seg000:17BD                 out     6, al           ; [06] : Communication bit rates (see PAGE 21 of PC 100 SYSTEM SPEC)
seg000:17BD                                         ;
seg000:17BD                                         ; VALUES 0...F represent BIT RATES from 50 - 19200.
seg000:17BD                                         ;
seg000:17BD                                         ; LOW NIBBLE = TRANSMIT CLOCK
seg000:17BD                                         ; HIGH NIBBLE = RECEIVE CLOCK
seg000:17BD                                         ;
seg000:17BF                 mov     dx, 11h
seg000:17C2                 mov     al, 12h         ; ($12) 10010 => PORT 11
seg000:17C4                 out     dx, al          ; KEYBOARD PORT 11 ( 8251A ) - see PAGE 16 of PC 100 SYSTEM SPEC.
seg000:17C4                                         ;
seg000:17C5                 out     dx, al          ; delay?
seg000:17C6                 dec     dl
seg000:17C8                 out     dx, al          ; ($12) 10010 => PORT 10
seg000:17C9                 in      al, dx
seg000:17CA                 in      al, dx
seg000:17CB                 inc     dl
seg000:17CD                 xor     al, al
seg000:17CF                 out     dx, al          ; 00 => PORT 11 (keyboard)
seg000:17D0                 out     dx, al          ; 00 => PORT 11
seg000:17D1                 out     dx, al          ; 00 => PORT 11
seg000:17D2                 mov     al, 42h ; 'B'
seg000:17D4                 out     dx, al          ; $42 => PORT 11
seg000:17D5                 call    DELAY__sub_181B
seg000:17D8                 mov     al, 4Eh ; 'N'
seg000:17DA                 out     dx, al          ; $4e => PORT 11
seg000:17DB                 mov     al, 12h
seg000:17DD                 out     dx, al          ; $12 => PORT 11
seg000:17DE                 call    SET_COMM_n_PRN__sub_17EF
seg000:17E1                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:17E1                                         ;
seg000:17E3                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:17E3                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:17E5                 mov     al, 9
seg000:17E7                 mov     dx, 10Ch
seg000:17EA                 out     dx, al          ; 09 => PORT 10C // Clear vertical frequency interrupt
seg000:17EB                 in      al, 0
seg000:17ED                 pop     dx
seg000:17EE                 retn
seg000:17EE DISP_ON_setKBD_set4800bps__sub_17B6 endp
seg000:17EE
seg000:17EF
seg000:17EF ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:17EF
seg000:17EF
seg000:17EF SET_COMM_n_PRN__sub_17EF proc near      ; CODE XREF: seg000:176Ap
seg000:17EF                                         ; DISP_ON_setKBD_set4800bps__sub_17B6+28p
seg000:17EF                 mov     dx, 42h ; 'B'
seg000:17F2
seg000:17F2 loc_17F2:                               ; CODE XREF: seg000:1773p
seg000:17F2                 call    PORT_WRITES__sub_17FA ; access COMM - port 42
seg000:17F5                 inc     dx
seg000:17F6                 call    PORT_WRITES__sub_17FA ; access PRINTER - port 43
seg000:17F9                 retn
seg000:17F9 SET_COMM_n_PRN__sub_17EF endp
seg000:17F9
seg000:17FA
seg000:17FA ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:17FA
seg000:17FA
seg000:17FA PORT_WRITES__sub_17FA proc near         ; CODE XREF: SET_COMM_n_PRN__sub_17EF:loc_17F2p
seg000:17FA                                         ; SET_COMM_n_PRN__sub_17EF+7p
seg000:17FA                 mov     ax, 0
seg000:17FD                 out     dx, al
seg000:17FE                 mov     al, 3
seg000:1800                 call    AL_AH_to_PORT__sub_1814
seg000:1803                 mov     al, 5
seg000:1805                 call    AL_AH_to_PORT__sub_1814
seg000:1808                 mov     al, 18h
seg000:180A                 call    AL_AH_to_PORT__sub_1814
seg000:180D                 dec     dx
seg000:180E                 dec     dx
seg000:180F                 in      al, dx
seg000:1810                 in      al, dx
seg000:1811                 inc     dx
seg000:1812                 inc     dx
seg000:1813                 retn
seg000:1813 PORT_WRITES__sub_17FA endp
seg000:1813
seg000:1814
seg000:1814 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1814
seg000:1814
seg000:1814 AL_AH_to_PORT__sub_1814 proc near       ; CODE XREF: PORT_WRITES__sub_17FA+6p
seg000:1814                                         ; PORT_WRITES__sub_17FA+Bp
seg000:1814                                         ; PORT_WRITES__sub_17FA+10p
seg000:1814                 out     dx, al
seg000:1815                 xchg    ah, al
seg000:1817                 out     dx, al
seg000:1818                 xchg    ah, al
seg000:181A                 retn
seg000:181A AL_AH_to_PORT__sub_1814 endp
seg000:181A
seg000:181B
seg000:181B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:181B
seg000:181B
seg000:181B DELAY__sub_181B proc near               ; CODE XREF: DISP_ON_setKBD_set4800bps__sub_17B6+1Fp
seg000:181B                 push    cx
seg000:181C                 mov     cx, 20h ; ' '
seg000:181F
seg000:181F loc_181F:                               ; CODE XREF: DELAY__sub_181B+5j
seg000:181F                 nop
seg000:1820                 loop    loc_181F
seg000:1822                 pop     cx
seg000:1823                 retn
seg000:1823 DELAY__sub_181B endp
seg000:1823
seg000:1824 ; ---------------------------------------------------------------------------
seg000:1824                 push    ax              ; KEYBOARD INTERRUPT HANDLING (?)
seg000:1824                                         ;
seg000:1824                                         ; ( $1824 - $18d3 not directly called)
seg000:1824                                         ;
seg000:1824                                         ;
seg000:1825                 push    bx
seg000:1826                 push    ds
seg000:1827                 mov     ax, 0
seg000:182A                 mov     ds, ax
seg000:182C                 in      al, 11h         ; STATUS READ REGISTER OF 8251A (on port $11):
seg000:182C                                         ;
seg000:182C                                         ; 0: TxRDY
seg000:182C                                         ; 1: RxRDY
seg000:182C                                         ; 2: TxEMPTY
seg000:182C                                         ; 3: PE (PARITY ERROR)
seg000:182C                                         ; 4: OE (OVERRUN ERROR)
seg000:182C                                         ; 5: FE (FRAMING ERROR - async only)
seg000:182C                                         ; 6: SYNDET/BRKDET
seg000:182C                                         ; 7: DSR
seg000:182C                                         ;
seg000:182C                                         ; - see PAGE 16/17 of PC 100 SYSTEM SPECIFICATION.
seg000:182C                                         ;
seg000:182E                 mov     bl, al
seg000:1830                 test    bl, 2           ; RxRDY
seg000:1833                 jz      short RxRDY__loc_1845 ;
seg000:1833                                         ;
seg000:1835                 in      al, 10h
seg000:1837                 mov     byte ptr ds:unk_303C, al
seg000:183A                 test    bl, 38h
seg000:183D                 jz      short loc_1867  ;
seg000:183D                                         ;
seg000:183F                 mov     al, 17h         ; 17 =>
seg000:1841                 out     11h, al         ; [11] : KEYBOARD INTERFACE
seg000:1843                 jmp     short loc_1867
seg000:1845 ; ---------------------------------------------------------------------------
seg000:1845
seg000:1845 RxRDY__loc_1845:                        ; CODE XREF: seg000:1833j
seg000:1845                 test    bl, 1           ; TxRDY
seg000:1848                 jz      short GET_OUT__loc_187A ;
seg000:1848                                         ;
seg000:184A                 mov     al, byte ptr ds:unk_3037
seg000:184D                 and     al, 0Fh
seg000:184F                 jz      short loc_185C  ;
seg000:184F                                         ;
seg000:1851                 dec     byte ptr ds:unk_3037
seg000:1855                 mov     al, byte ptr ds:unk_3038
seg000:1858                 out     10h, al
seg000:185A                 jmp     short loc_1867
seg000:185C ; ---------------------------------------------------------------------------
seg000:185C
seg000:185C loc_185C:                               ; CODE XREF: seg000:184Fj
seg000:185C                 test    bl, 4           ; TxEMPTY
seg000:185F                 jz      short GET_OUT__loc_187A ;
seg000:185F                                         ;
seg000:1861                 mov     al, 16h
seg000:1863                 out     11h, al         ; 0x16 => [11] : KEYBOARD INTERFACE
seg000:1865                 out     10h, al         ; 0x16 => [10]
seg000:1867
seg000:1867 loc_1867:                               ; CODE XREF: seg000:183Dj
seg000:1867                                         ; seg000:1843j
seg000:1867                                         ; seg000:185Aj
seg000:1867                 mov     byte ptr ds:unk_303B, bl
seg000:186B                 mov     ax, word ptr ds:unk_3031
seg000:186E                 mov     word ptr ds:byte_3039, ax
seg000:1871                 inc     byte ptr ds:unk_3036
seg000:1875                 or      byte ptr ds:unk_3035, 1
seg000:187A
seg000:187A GET_OUT__loc_187A:                      ; CODE XREF: seg000:1848j
seg000:187A                                         ; seg000:185Fj
seg000:187A                 pop     ds              ; TxRDY _or_ TxEMPTY
seg000:187B                 pop     bx
seg000:187C                 pop     ax
seg000:187D                 iret
seg000:187E ; ---------------------------------------------------------------------------
seg000:187E                 push    ax
seg000:187F                 push    bx
seg000:1880                 push    cx
seg000:1881                 push    dx
seg000:1882                 push    di
seg000:1883                 push    ds
seg000:1884                 push    es
seg000:1885                 mov     ax, 0
seg000:1888                 mov     ds, ax
seg000:188A                 mov     es, ax
seg000:188C                 mov     dx, 42h ; 'B'
seg000:188F                 mov     di, 303Dh
seg000:1892                 mov     ch, byte ptr ds:unk_3036
seg000:1896                 mov     cl, byte ptr ds:unk_3034
seg000:189A                 call    sub_18D4
seg000:189D                 or      byte ptr ds:unk_3034, cl
seg000:18A1                 cmp     ch, byte ptr ds:unk_3036
seg000:18A5                 jz      short loc_18AC  ;
seg000:18A5                                         ;
seg000:18A7                 or      byte ptr ds:unk_3035, 2
seg000:18AC
seg000:18AC loc_18AC:                               ; CODE XREF: seg000:18A5j
seg000:18AC                 mov     dx, 43h ; 'C'
seg000:18AF                 mov     di, 3042h
seg000:18B2                 mov     ch, byte ptr ds:unk_3036
seg000:18B6                 mov     cl, byte ptr ds:unk_3033
seg000:18BA                 call    sub_18D4
seg000:18BD                 or      byte ptr ds:unk_3033, cl
seg000:18C1                 cmp     ch, byte ptr ds:unk_3036
seg000:18C5                 jz      short loc_18CC  ;
seg000:18C5                                         ;
seg000:18C7                 or      byte ptr ds:unk_3035, 4
seg000:18CC
seg000:18CC loc_18CC:                               ; CODE XREF: seg000:18C5j
seg000:18CC                 pop     es
seg000:18CD                 pop     ds
seg000:18CE                 pop     di
seg000:18CF                 pop     dx
seg000:18D0                 pop     cx
seg000:18D1                 pop     bx
seg000:18D2                 pop     ax
seg000:18D3                 iret
seg000:18D4
seg000:18D4 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:18D4
seg000:18D4
seg000:18D4 sub_18D4        proc near               ; CODE XREF: seg000:189Ap
seg000:18D4                                         ; seg000:18BAp
seg000:18D4                 in      al, dx
seg000:18D5                 xchg    ah, al
seg000:18D7                 mov     al, 1
seg000:18D9                 out     dx, al
seg000:18DA                 in      al, dx
seg000:18DB                 xchg    ah, al
seg000:18DD                 test    ax, 5
seg000:18E0                 jz      short locret_1933 ;
seg000:18E0                                         ;
seg000:18E2                 mov     bx, ax
seg000:18E4                 inc     byte ptr ds:unk_3036
seg000:18E8                 mov     ax, word ptr ds:unk_3031
seg000:18EB                 mov     es:[di], ax
seg000:18EE                 mov     es:[di+2], bx
seg000:18F2                 test    bx, 1
seg000:18F6                 jz      short loc_1913  ;
seg000:18F6                                         ;
seg000:18F8                 dec     dx
seg000:18F9                 dec     dx
seg000:18FA                 in      al, dx
seg000:18FB                 inc     dx
seg000:18FC                 inc     dx
seg000:18FD                 mov     [di+4], al
seg000:1900                 test    bx, 7080h
seg000:1904                 jnz     short loc_190B  ;
seg000:1904                                         ;
seg000:1906                 or      cl, 2
seg000:1909                 jmp     short loc_192F
seg000:190B ; ---------------------------------------------------------------------------
seg000:190B
seg000:190B loc_190B:                               ; CODE XREF: sub_18D4+30j
seg000:190B                 or      cl, 0Ah
seg000:190E                 mov     al, 30h ; '0'
seg000:1910                 out     dx, al
seg000:1911                 jmp     short loc_192F
seg000:1913 ; ---------------------------------------------------------------------------
seg000:1913
seg000:1913 loc_1913:                               ; CODE XREF: sub_18D4+22j
seg000:1913                 test    bx, 44h
seg000:1917                 jz      short locret_1933 ;
seg000:1917                                         ;
seg000:1919                 test    bx, 40h
seg000:191D                 jz      short loc_1928  ;
seg000:191D                                         ;
seg000:191F                 mov     al, 0C0h ; '+'
seg000:1921                 out     dx, al
seg000:1922                 mov     al, 10h
seg000:1924                 out     dx, al
seg000:1925                 or      cl, 4
seg000:1928
seg000:1928 loc_1928:                               ; CODE XREF: sub_18D4+49j
seg000:1928                 or      cl, 1
seg000:192B                 mov     al, 28h ; '('
seg000:192D                 out     42h, al
seg000:192F
seg000:192F loc_192F:                               ; CODE XREF: sub_18D4+35j
seg000:192F                                         ; sub_18D4+3Dj
seg000:192F                 mov     al, 38h ; '8'
seg000:1931                 out     42h, al
seg000:1933
seg000:1933 locret_1933:                            ; CODE XREF: sub_18D4+Cj
seg000:1933                                         ; sub_18D4+43j
seg000:1933                 retn
seg000:1933 sub_18D4        endp
seg000:1933
seg000:1934
seg000:1934 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1934
seg000:1934
seg000:1934 sub_1934        proc near               ; CODE XREF: TEST_PRN__sub_1718+11p
seg000:1934                                         ; TEST_COMM___sub_195Ap
seg000:1934                                         ; TEST_COMM___sub_195A+55p
seg000:1934                 cli
seg000:1935                 xor     dh, dh
seg000:1937                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:193A                 mov     ax, 0
seg000:193D                 mov     es, ax
seg000:193F                 mov     ax, 187Eh
seg000:1942                 mov     word ptr es:loc_8E+2, ax
seg000:1946                 mov     ax, 1824h
seg000:1949                 mov     word ptr es:loc_98, ax
seg000:194D                 mov     ax, 0
seg000:1950                 mov     ds, ax
seg000:1952                 mov     es, ax
seg000:1954                 mov     al, 0A3h ; 'ú'  ; 10100011 : ZRESET / DISPLAY ON / READ-RECALL NVM / PORT LOOPBACK (COMM, PRINTER and KEYBOARD tests)
seg000:1954                                         ;
seg000:1956                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1956                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:1958                 sti
seg000:1959                 retn
seg000:1959 sub_1934        endp
seg000:1959
seg000:195A
seg000:195A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:195A
seg000:195A
seg000:195A TEST_COMM___sub_195A proc near          ; CODE XREF: seg000:170Ep
seg000:195A                 call    sub_1934
seg000:195D                 xor     ax, ax
seg000:195F                 mov     word ptr ds:unk_3033, ax
seg000:1962                 mov     word ptr ds:unk_3035, ax
seg000:1965                 mov     dx, 42h ; 'B'
seg000:1968                 mov     al, 4
seg000:196A                 out     dx, al          ; value $04 -> PORT 42 (comm. control / status register)
seg000:196B                 mov     al, 49h ; 'I'
seg000:196D                 out     dx, al          ; value $49 -> PORT 42
seg000:196E                 mov     al, 3
seg000:1970                 out     dx, al          ; value $03 -> PORT 42
seg000:1971                 mov     al, 0C1h ; '-'
seg000:1973                 out     dx, al          ; value $c1 -> PORT 42
seg000:1974                 mov     al, 5
seg000:1976                 out     dx, al          ; value $05 -> PORT 42
seg000:1977                 mov     al, 68h ; 'h'
seg000:1979                 out     dx, al          ; value $68 -> PORT 42
seg000:197A                 mov     al, 1
seg000:197C                 out     dx, al          ; value $01 -> PORT 42
seg000:197D                 mov     al, 18h
seg000:197F                 out     dx, al          ; value $18 -> PORT 42
seg000:1980                 mov     bx, 1ABDh
seg000:1983                 mov     al, 55h ; 'U'
seg000:1985                 out     40h, al         ; PORT 40 : comm. DATA register
seg000:1987                 call    KBD_PRN_COM_DIAG_3035__sub_1A45
seg000:198A                 test    byte ptr ds:unk_3035, 78h
seg000:198F                 jz      short NEXT_TEST_KBD__sub_19B2 ;
seg000:198F                                         ;
seg000:1991                 call    SETUP_IRQ_TABLE2__sub_1A37
seg000:1994                 or      byte ptr ds:sub_503, 1
seg000:1999                 mov     dl, byte ptr ds:unk_3030
seg000:199D                 or      dl, 4
seg000:19A0                 mov     si, 81FFh       ; 84 83 42 8A
seg000:19A0                                         ;   8384 : "60 - "
seg000:19A0                                         ;   8a42 : "Main Board"
seg000:19A0                                         ;
seg000:19A0                                         ; [comm port] / CAN CONTINUE (no terminal mode)
seg000:19A3                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:19A6                 mov     ax, 0
seg000:19A9                 mov     ds, ax
seg000:19AB                 mov     byte ptr ds:unk_3030, dl
seg000:19AF                 call    sub_1934
seg000:19AF TEST_COMM___sub_195A endp
seg000:19AF
seg000:19B2
seg000:19B2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:19B2
seg000:19B2
seg000:19B2 NEXT_TEST_KBD__sub_19B2 proc near       ; CODE XREF: TEST_PRN__sub_1718+14p
seg000:19B2                                         ; TEST_COMM___sub_195A+35j
seg000:19B2                 test    byte ptr ds:sub_503, 2
seg000:19B7                 jz      short TEST_KEYBOARD___loc_19BB ;
seg000:19B7                                         ;
seg000:19B9                 jmp     short SETUP_IRQ_TABLE2__sub_1A37
seg000:19BB ; ---------------------------------------------------------------------------
seg000:19BB
seg000:19BB TEST_KEYBOARD___loc_19BB:               ; CODE XREF: NEXT_TEST_KBD__sub_19B2+5j
seg000:19BB                 mov     bx, 1ACFh
seg000:19BE                 xor     ax, ax
seg000:19C0                 mov     word ptr ds:unk_3033, ax
seg000:19C3                 mov     word ptr ds:unk_303B, ax
seg000:19C6                 inc     al
seg000:19C8                 mov     byte ptr ds:unk_3037, al
seg000:19CB                 mov     al, 55h ; 'U'
seg000:19CD                 mov     byte ptr ds:unk_3038, al
seg000:19D0                 and     word ptr ds:unk_3035, 80h
seg000:19D6                 mov     dx, 43h ; 'C'
seg000:19D9                 mov     al, 18h
seg000:19DB                 out     dx, al
seg000:19DC                 mov     dl, 11h
seg000:19DE                 xor     al, al
seg000:19E0                 out     dx, al          ; send 00 00 00 to keyboard port 11
seg000:19E1                 out     dx, al
seg000:19E2                 out     dx, al
seg000:19E3                 mov     al, 42h ; 'B'
seg000:19E5                 out     dx, al          ; send 42 to keyboard port 11
seg000:19E6                 mov     dl, 43h ; 'C'
seg000:19E8                 mov     al, 4
seg000:19EA                 out     dx, al          ; send values 04 44 03 c1 05 68 01 18 to PORT $43
seg000:19EB                 mov     al, 44h ; 'D'
seg000:19ED                 out     dx, al
seg000:19EE                 mov     al, 3
seg000:19F0                 out     dx, al
seg000:19F1                 mov     al, 0C1h ; '-'
seg000:19F3                 out     dx, al
seg000:19F4                 mov     al, 5
seg000:19F6                 out     dx, al
seg000:19F7                 mov     al, 68h ; 'h'
seg000:19F9                 out     dx, al
seg000:19FA                 mov     al, 1
seg000:19FC                 out     dx, al
seg000:19FD                 mov     al, 18h
seg000:19FF                 out     dx, al          ;
seg000:19FF                                         ;
seg000:1A00                 mov     dl, 11h         ; send $4e 17 to keyboard - PORT 11
seg000:1A02                 mov     al, 4Eh ; 'N'
seg000:1A04                 out     dx, al
seg000:1A05                 mov     al, 17h
seg000:1A07                 out     dx, al          ;
seg000:1A07                                         ;
seg000:1A08                 mov     al, 55h ; 'U'   ; send $55 to PORT 41
seg000:1A0A                 out     41h, al
seg000:1A0C                 call    KBD_PRN_COM_DIAG_3035__sub_1A45 ; gets / sets certain memory locations...
seg000:1A0C                                         ;
seg000:1A0F                 test    byte ptr ds:unk_3035, 78h ; 1111000
seg000:1A14                 jz      short NO_ERR__loc_1A35 ; no error, set up IRQ table.
seg000:1A14                                         ;
seg000:1A16                 call    SETUP_IRQ_TABLE2__sub_1A37 ; DISP_ON_setKBD_set4800bps__sub_17B6 /
seg000:1A16                                         ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:1A16                                         ;
seg000:1A19                 test    byte ptr ds:unk_3035, 80h
seg000:1A1E                 jz      short ERROR__loc_1A21 ; ERROR => "50 Main Board [keyboard port] FATAL"
seg000:1A20                 retn
seg000:1A21 ; ---------------------------------------------------------------------------
seg000:1A21
seg000:1A21 ERROR__loc_1A21:                        ; CODE XREF: NEXT_TEST_KBD__sub_19B2+6Cj
seg000:1A21                 mov     ax, 390h
seg000:1A24                 call    j_CONTROL_ALL_LEDs__sub_B9A ; OUTPUT 390 TO => LEDs (10010000); LED D5 + D3 * off *,
seg000:1A24                                         ; 011 0101
seg000:1A24                                         ; - this corresponds to ERROR 50 (two Z80 LEDs are OFF)
seg000:1A24                                         ;
seg000:1A27                 pop     ax
seg000:1A28                 mov     dl, byte ptr ds:unk_3030
seg000:1A2C                 or      dl, 2
seg000:1A2F                 mov     si, 8209h       ; 02 7E 83-42 8A
seg000:1A2F                                         ;    837e "50 - "
seg000:1A2F                                         ;    8342 "Main Board [keyboard port]" [FATAL]
seg000:1A2F                                         ;
seg000:1A32                 call    SYS_MESSAGE_SIT_n_WAIT__sub_9
seg000:1A35
seg000:1A35 NO_ERR__loc_1A35:                       ; CODE XREF: NEXT_TEST_KBD__sub_19B2+62j
seg000:1A35                 jmp     short $+2
seg000:1A35 NEXT_TEST_KBD__sub_19B2 endp
seg000:1A35
seg000:1A37
seg000:1A37 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1A37
seg000:1A37
seg000:1A37 SETUP_IRQ_TABLE2__sub_1A37 proc near    ; CODE XREF: TEST_COMM___sub_195A+37p
seg000:1A37                                         ; NEXT_TEST_KBD__sub_19B2+7j
seg000:1A37                                         ; NEXT_TEST_KBD__sub_19B2+64p
seg000:1A37                 cli
seg000:1A38                 call    DISP_ON_setKBD_set4800bps__sub_17B6
seg000:1A3B                 mov     al, 83h ; 'â'   ; RESET Z80 / DISPLAY ON / READ-RECALL NVM
seg000:1A3B                                         ;
seg000:1A3D                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:1A3D                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:1A3D                                         ;
seg000:1A3F                 xor     dh, dh
seg000:1A41                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (ROM offset $1c09 when DH = 0)  COLD BOOT ?
seg000:1A44                 retn
seg000:1A44 SETUP_IRQ_TABLE2__sub_1A37 endp
seg000:1A44
seg000:1A45
seg000:1A45 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1A45
seg000:1A45
seg000:1A45 KBD_PRN_COM_DIAG_3035__sub_1A45 proc near ; CODE XREF: TEST_COMM___sub_195A+2Dp
seg000:1A45                                         ; NEXT_TEST_KBD__sub_19B2+5Ap
seg000:1A45                 mov     cx, word ptr ds:unk_3031
seg000:1A49                 inc     cx
seg000:1A4A                 xor     ax, ax
seg000:1A4C
seg000:1A4C loc_1A4C:                               ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+Ej
seg000:1A4C                 cmp     cx, word ptr ds:unk_3031
seg000:1A50                 jnz     short LOOP_IF_NO_ERROR__loc_1A55 ;
seg000:1A50                                         ;
seg000:1A52                 inc     ax
seg000:1A53                 jnz     short loc_1A4C
seg000:1A55
seg000:1A55 LOOP_IF_NO_ERROR__loc_1A55:             ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+Bj
seg000:1A55                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+3Dj
seg000:1A55                 mov     al, byte ptr ds:unk_3035
seg000:1A58                 and     al, cs:[bx+6]   ; F400:1acf + 6 (initially)
seg000:1A5C                 cmp     al, cs:[bx+6]
seg000:1A60                 jnz     short NOT_EQUAL__loc_1A78 ;
seg000:1A60                                         ;
seg000:1A62                 mov     ax, word ptr ds:unk_3033
seg000:1A65                 and     ax, cs:[bx+4]
seg000:1A69                 cmp     ax, cs:[bx+4]
seg000:1A6D                 jnz     short NOT_EQUAL__loc_1A78 ;
seg000:1A6D                                         ;
seg000:1A6F                 mov     al, byte ptr ds:unk_3036
seg000:1A72                 cmp     al, cs:[bx+7]
seg000:1A76                 jz      short loc_1A89
seg000:1A78
seg000:1A78 NOT_EQUAL__loc_1A78:                    ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+1Bj
seg000:1A78                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+28j
seg000:1A78                 mov     ax, cx
seg000:1A7A                 add     ax, cs:[bx+2]   ; F400:1acf + 2 (initially)
seg000:1A7E                 cmp     ax, word ptr ds:unk_3031
seg000:1A82                 jnz     short LOOP_IF_NO_ERROR__loc_1A55 ;
seg000:1A82                                         ;
seg000:1A84                 or      byte ptr ds:unk_3035, 10h ; *** ERROR CONDITION : bit 4 (value $10)
seg000:1A89
seg000:1A89 loc_1A89:                               ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+31j
seg000:1A89                 mov     si, cs:[bx]
seg000:1A8C
seg000:1A8C loc_1A8C:                               ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+62j
seg000:1A8C                 mov     di, cs:[si]
seg000:1A8F                 cmp     di, 0FFFFh
seg000:1A92                 jz      short locret_1ABA ; RETURN
seg000:1A92                                         ;
seg000:1A94                 add     si, 2
seg000:1A97
seg000:1A97 LOOP__loc_1A97:                         ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+6Ej
seg000:1A97                 mov     al, cs:[si]
seg000:1A9A                 cmp     al, 0FFh
seg000:1A9C                 jnz     short LOOP_or_ERROR__loc_1AA9 ;
seg000:1A9C                                         ;
seg000:1A9E                 mov     ax, cs:[si]
seg000:1AA1                 cmp     ax, 0FFFFh
seg000:1AA4                 jz      short locret_1ABA ; RETURN
seg000:1AA4                                         ;
seg000:1AA6                 inc     si
seg000:1AA7                 jmp     short loc_1A8C
seg000:1AA9 ; ---------------------------------------------------------------------------
seg000:1AA9
seg000:1AA9 LOOP_or_ERROR__loc_1AA9:                ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+57j
seg000:1AA9                 xor     al, [di]
seg000:1AAB                 inc     si
seg000:1AAC                 and     al, cs:[si]
seg000:1AAF                 jnz     short ERROR_BIT5__loc_1AB5 ; ERROR ?
seg000:1AAF                                         ;
seg000:1AB1                 inc     si
seg000:1AB2                 inc     di
seg000:1AB3                 jmp     short LOOP__loc_1A97
seg000:1AB5 ; ---------------------------------------------------------------------------
seg000:1AB5
seg000:1AB5 ERROR_BIT5__loc_1AB5:                   ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+6Aj
seg000:1AB5                 or      byte ptr ds:unk_3035, 20h ; *** ERROR CONDITION : bit 5 (value $20)
seg000:1ABA
seg000:1ABA locret_1ABA:                            ; CODE XREF: KBD_PRN_COM_DIAG_3035__sub_1A45+4Dj
seg000:1ABA                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+5Fj
seg000:1ABA                 retn
seg000:1ABA KBD_PRN_COM_DIAG_3035__sub_1A45 endp
seg000:1ABA
seg000:1ABA ; ---------------------------------------------------------------------------
seg000:1ABB                 dw 0FFFFh               ; KEYBOARD RESPONSES (?), checked above
seg000:1ABD                 db 0C5h,1Ah             ; 0 ; $1ac5 => SI
seg000:1ABF                 db 0F0h ; =
seg000:1AC0                 db    0
seg000:1AC1                 db    0
seg000:1AC2                 db    2
seg000:1AC3                 db    2
seg000:1AC4                 db    2
seg000:1AC5                 db 3Fh,30h              ; 0 ; $303f => DI
seg000:1AC7                 db    5                 ; XOR 00000101
seg000:1AC8                 db    4                 ; AND 00000100
seg000:1AC9                 db    0
seg000:1ACA                 db  70h ; p
seg000:1ACB                 db  55h ; U
seg000:1ACC                 db  7Fh ; 
seg000:1ACD                 db 0FFh
seg000:1ACE                 db 0FFh                 ;
seg000:1ACE                                         ;
seg000:1ACF                 dw 1AD7h                ; 0 ; $1ad7
seg000:1AD1                 db 0FFh                 ; ADD AX, ff  ( 1a7a )
seg000:1AD2                 db    0
seg000:1AD3                 db    2
seg000:1AD4                 db    0
seg000:1AD5                 db    5
seg000:1AD6                 db    5
seg000:1AD7                 db 3Bh,30h              ; 0 ; $303b
seg000:1AD9                 db  87h ; ç             ; XOR 10000111
seg000:1ADA                 db  38h ; 8             ; AND 00111000
seg000:1ADB                 db  55h ; U
seg000:1ADC                 db  7Fh ;              ; AND 01111111
seg000:1ADD                 db 0FFh                 ; FF = end marker <===
seg000:1ADD                                         ;
seg000:1ADE                 db 44h,30h              ; 0 ; $3044 (?)
seg000:1AE0                 db  4Dh ; M
seg000:1AE1                 db  45h ; E
seg000:1AE2                 db    1
seg000:1AE3                 db  70h ; p
seg000:1AE4                 db  55h ; U
seg000:1AE5                 db  7Fh ; 
seg000:1AE6                 db 0FFh
seg000:1AE7                 db 0FFh                 ;
seg000:1AE7                                         ;
seg000:1AE8 off_1AE8        dw offset DC011_80cols_60Hz_NONINTERLACED__sub_1B6C
seg000:1AE8                                         ; DATA XREF: INIT_VIDEO_HW__sub_1AF0+26r
seg000:1AEA                 dw offset DC011_132cols_60Hz_NONINTERLACED__sub_1B73 ; [ DC011 port 04 writes ]
seg000:1AEC                 dw offset DC011_80cols_50Hz_NONINTERLACED__sub_1B7A
seg000:1AEE                 dw offset DC011_132cols_50Hz_NONINTERLACED__sub_1B81 ; - JUMP TABLE USED BY CODE @ seg000:1B16
seg000:1AF0
seg000:1AF0 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1AF0
seg000:1AF0
seg000:1AF0 INIT_VIDEO_HW__sub_1AF0 proc near       ; CODE XREF: j_SETUP_VIDEO_HW__sub_1AF0j
seg000:1AF0                                         ; sub_1D78+2Dp
seg000:1AF0                 push    dx              ; Sets up video timing ( => DC011 port 4 )
seg000:1AF0                                         ; - one of 4 modes:
seg000:1AF0                                         ;
seg000:1AF0                                         ; (1) 80 columns  60 Hz.
seg000:1AF0                                         ; (2) 132 columns 60 Hz.
seg000:1AF0                                         ; (3) 80 columns  50 Hz.
seg000:1AF0                                         ; (4) 132 columns 50 Hz.
seg000:1AF0                                         ;
seg000:1AF0                                         ; All modes set are NON INTERLACED.
seg000:1AF1                 xor     bx, bx
seg000:1AF3                 mov     bl, byte ptr es:loc_86 ; 80 / 132 column mode ?
seg000:1AF8                 and     bl, 1
seg000:1AFB                 test    byte ptr es:loc_91, 1 ; 60 Hz / 50 Hz. (1)  ?
seg000:1B01                 jz      short loc_1B06
seg000:1B03                 add     bl, 2
seg000:1B06
seg000:1B06 loc_1B06:                               ; CODE XREF: INIT_VIDEO_HW__sub_1AF0+11j
seg000:1B06                 call    DC012_REVERSE_FIELD_OFF__sub_1B65
seg000:1B09                 mov     cx, 0A000h
seg000:1B0C
seg000:1B0C DELAY1_PORT10C__loc_1B0C:               ; CODE XREF: INIT_VIDEO_HW__sub_1AF0:DELAY1_PORT10C__loc_1B0Cj
seg000:1B0C                 loop    DELAY1_PORT10C__loc_1B0C
seg000:1B0E                 add     bl, 0
seg000:1B11                 shl     bx, 1
seg000:1B13                 mov     dx, 4
seg000:1B16                 call    cs:off_1AE8[bx] ; See JUMP TABLE above!
seg000:1B16                                         ; Writes out the following values to PORT 04 (DC011 write register):
seg000:1B16                                         ; 00 22 (when BX = 0) 80  / 60 Hz
seg000:1B16                                         ; 10 22 (  "  BX = 2) 132 / 60 Hz
seg000:1B16                                         ; 00 33 (  "  BX = 4) 80  / 50 Hz
seg000:1B16                                         ; 10 33 (  "  BX = 8) 132 / 50 Hz
seg000:1B1B                 mov     cx, 0A000h
seg000:1B1E
seg000:1B1E DELAY2_DC011__loc_1B1E:                 ; CODE XREF: INIT_VIDEO_HW__sub_1AF0:DELAY2_DC011__loc_1B1Ej
seg000:1B1E                 loop    DELAY2_DC011__loc_1B1E
seg000:1B20
seg000:1B20 DELAY3_DC011__loc_1B20:                 ; CODE XREF: INIT_VIDEO_HW__sub_1AF0:DELAY3_DC011__loc_1B20j
seg000:1B20                 loop    DELAY3_DC011__loc_1B20 ;
seg000:1B20                                         ;
seg000:1B22                 mov     al, 0Dh
seg000:1B24                 mov     dx, 10Ch        ; DISABLE MHFU (0x00 => port 10C)
seg000:1B27                 out     dx, al          ; $0d => PORT 10c // Set basic attribute to reverse video with 24 lines and
seg000:1B27                                         ;                    set blink flip flop off.
seg000:1B27                                         ;
seg000:1B28                 call    DC012_REVERSE_FIELD_NVM8A__sub_1B5B ;
seg000:1B28                                         ;
seg000:1B2B                 mov     al, 0
seg000:1B2D                 out     dx, al          ; $00 => PORT 10c // Set scroll latch LSB ' s to 00
seg000:1B2E                 mov     al, 4
seg000:1B30                 out     dx, al          ; $04 => PORT 10c // Set scroll latch MSB's to 00
seg000:1B31                 mov     al, 9
seg000:1B33                 out     dx, al          ; $09 => PORT 10c // Clear vertical frequency interrupt
seg000:1B33                                         ;
seg000:1B34                 mov     bl, 50h ; 'P'   ; Set 80 ($50) or 132 ($84) columns.
seg000:1B36                 test    byte ptr es:loc_86, 1 ; 80 / 132 column mode ?
seg000:1B3C                 jz      short loc_1B40
seg000:1B3E                 mov     bl, 84h ; 'ä'
seg000:1B40
seg000:1B40 loc_1B40:                               ; CODE XREF: INIT_VIDEO_HW__sub_1AF0+4Cj
seg000:1B40                 mov     byte ptr ds:loc_F26, bl ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:1B44                 mov     byte ptr ds:loc_F54+3, bl
seg000:1B48                 mov     word ptr ds:loc_ECA+1, 3Fh ; '?'
seg000:1B4E                 mov     word ptr ds:loc_EC4+1, 25E0h
seg000:1B54                 mov     byte ptr ds:loc_ED4+1, 0Bh
seg000:1B59                 pop     dx
seg000:1B5A                 retn
seg000:1B5A INIT_VIDEO_HW__sub_1AF0 endp
seg000:1B5A
seg000:1B5B
seg000:1B5B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B5B
seg000:1B5B
seg000:1B5B DC012_REVERSE_FIELD_NVM8A__sub_1B5B proc near
seg000:1B5B                                         ; CODE XREF: j_DC012_REVERSE_FIELD_NVM8Aj
seg000:1B5B                                         ; INIT_VIDEO_HW__sub_1AF0+38p
seg000:1B5B                 mov     al, 0Ah         ; SET REVERSE FIELD ON
seg000:1B5B                                         ; - according to chapter 3.1.3.9.5 of PC-100 Spec.
seg000:1B5D                 test    byte ptr es:loc_89+1, 1 ; 0x8a SCREEN (0=DARK 1=LIGHT)
seg000:1B63                 jnz     short LIGHT_SCREEN__loc_1B67
seg000:1B63 DC012_REVERSE_FIELD_NVM8A__sub_1B5B endp
seg000:1B63
seg000:1B65
seg000:1B65 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B65
seg000:1B65
seg000:1B65 DC012_REVERSE_FIELD_OFF__sub_1B65 proc near
seg000:1B65                                         ; CODE XREF: INIT_VIDEO_HW__sub_1AF0:loc_1B06p
seg000:1B65                                         ; seg000:370Dp
seg000:1B65                 mov     al, 0Bh         ; SET REVERSE FIELD OFF
seg000:1B65                                         ; - according to chapter 3.1.3.9.5 of PC-100 Spec.
seg000:1B67
seg000:1B67 LIGHT_SCREEN__loc_1B67:                 ; CODE XREF: DC012_REVERSE_FIELD_NVM8A__sub_1B5B+8j
seg000:1B67                 mov     dx, 10Ch
seg000:1B6A                 out     dx, al          ; Writes value $0a / 0b  to  port 10C (= 0C) ?
seg000:1B6B                 retn
seg000:1B6B DC012_REVERSE_FIELD_OFF__sub_1B65 endp
seg000:1B6B
seg000:1B6C
seg000:1B6C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B6C
seg000:1B6C
seg000:1B6C DC011_80cols_60Hz_NONINTERLACED__sub_1B6C proc near
seg000:1B6C                                         ; CODE XREF: INIT_VIDEO_HW__sub_1AF0+26p
seg000:1B6C                                         ; DATA XREF: seg000:off_1AE8o
seg000:1B6C                 mov     al, 0           ; 80 column mode - *** INTERLACED ***
seg000:1B6E                 out     dx, al
seg000:1B6F                 mov     al, 22h ; '"'   ; 60 Hz. mode NON INTERLACED (?)
seg000:1B6F                                         ; PC-100 Spec 3.1.3.9.4 tells me $20 is correct.
seg000:1B6F                                         ; Nevertheless, bits 2 + 6 are set (value %00100010).
seg000:1B71                 out     dx, al
seg000:1B72                 retn
seg000:1B72 DC011_80cols_60Hz_NONINTERLACED__sub_1B6C endp
seg000:1B72
seg000:1B73
seg000:1B73 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B73
seg000:1B73
seg000:1B73 DC011_132cols_60Hz_NONINTERLACED__sub_1B73 proc near
seg000:1B73                                         ; CODE XREF: INIT_VIDEO_HW__sub_1AF0+26p
seg000:1B73                                         ; DATA XREF: seg000:1AEAo
seg000:1B73                 mov     al, 10h         ; 132 column mode - *** INTERLACED ***
seg000:1B75                 out     dx, al
seg000:1B76                 mov     al, 22h ; '"'   ; 60 Hz. mode NON INTERLACED (?)
seg000:1B76                                         ; PC-100 Spec 3.1.3.9.4 tells me $20 is correct.
seg000:1B76                                         ; Nevertheless, bits 2 + 6 are set (value %00100010).
seg000:1B78                 out     dx, al
seg000:1B79                 retn
seg000:1B79 DC011_132cols_60Hz_NONINTERLACED__sub_1B73 endp
seg000:1B79
seg000:1B7A
seg000:1B7A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B7A
seg000:1B7A
seg000:1B7A DC011_80cols_50Hz_NONINTERLACED__sub_1B7A proc near
seg000:1B7A                                         ; CODE XREF: INIT_VIDEO_HW__sub_1AF0+26p
seg000:1B7A                                         ; DATA XREF: seg000:1AECo
seg000:1B7A                 mov     al, 0           ; 80 column mode - *** INTERLACED ***
seg000:1B7C                 out     dx, al
seg000:1B7D                 mov     al, 33h ; '3'   ; 50 Hz. mode NON INTERLACED
seg000:1B7D                                         ; PC-100 Spec 3.1.3.9.4 tells me $30 is correct.
seg000:1B7D                                         ; Nevertheless, bits 1 + 2 + 5 + 6 are set (value 00110011)
seg000:1B7F                 out     dx, al
seg000:1B80                 retn
seg000:1B80 DC011_80cols_50Hz_NONINTERLACED__sub_1B7A endp
seg000:1B80
seg000:1B81
seg000:1B81 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B81
seg000:1B81
seg000:1B81 DC011_132cols_50Hz_NONINTERLACED__sub_1B81 proc near
seg000:1B81                                         ; CODE XREF: INIT_VIDEO_HW__sub_1AF0+26p
seg000:1B81                                         ; DATA XREF: seg000:1AEEo
seg000:1B81                 mov     al, 10h         ; 132 column mode - *** INTERLACED ***
seg000:1B83                 out     dx, al
seg000:1B84                 mov     al, 33h ; '3'   ; 50 Hz. mode NON INTERLACED
seg000:1B84                                         ; PC-100 Spec 3.1.3.9.4 tells me $30 is correct.
seg000:1B84                                         ; Nevertheless, bits 1 + 2 + 5 + 6 are set (value 00110011)
seg000:1B86                 out     dx, al
seg000:1B87                 retn
seg000:1B87 DC011_132cols_50Hz_NONINTERLACED__sub_1B81 endp
seg000:1B87
seg000:1B88
seg000:1B88 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1B88
seg000:1B88
seg000:1B88 SETUP_IRQ_TABLE_DH__sub_1B88 proc near  ; CODE XREF: EMIT_MESSAGE_SIT_n_WAIT_if_DL2__sub_215+4Bp
seg000:1B88                                         ; sub_84+2C3p sub_84+347p
seg000:1B88                                         ; sub_84+472p seg000:0A5Ep
seg000:1B88                                         ; sub_1934+3p
seg000:1B88                                         ; SETUP_IRQ_TABLE2__sub_1A37+Ap
seg000:1B88                                         ; sub_1D78+Bp
seg000:1B88                                         ; ROM_ChangeVectorMap__1F66+7p
seg000:1B88                 pushf                   ; --------------------------------------------------------
seg000:1B88                                         ; SETS UP IRQ VECTORS (DH = 00/01/02/FF) + TESTS ZEROPAGE
seg000:1B88                                         ; --------------------------------------------------------
seg000:1B88                                         ; Values taken from ROM OFFSET $1bef (DH=1)
seg000:1B88                                         ;                or ROM OFFSET $1c09 (DH=0)
seg000:1B89                 push    dx
seg000:1B8A                 push    ds
seg000:1B8B                 push    es
seg000:1B8C                 xor     ax, ax
seg000:1B8E                 mov     ds, ax
seg000:1B90                 mov     es, ax
seg000:1B92                 cli
seg000:1B93                 mov     word ptr ds:sub_0, 34E3h ; <= PATTERN WHEN DH != 0
seg000:1B99                 and     dh, dh
seg000:1B9B                 jnz     short loc_1BA3
seg000:1B9D                 mov     word ptr ds:sub_0, 179Fh ; <= PATTERN WHEN DH=0
seg000:1BA3
seg000:1BA3 loc_1BA3:                               ; CODE XREF: SETUP_IRQ_TABLE_DH__sub_1B88+13j
seg000:1BA3                 mov     ax, cs
seg000:1BA5                 mov     word ptr ds:sub_0+2, ax
seg000:1BA8                 mov     si, 0
seg000:1BAB                 mov     di, 4
seg000:1BAE                 mov     cx, 400h        ; 1024 bytes
seg000:1BB1                 cld
seg000:1BB2                 rep movsb
seg000:1BB4                 mov     di, 80h ; 'Ç'   ; SET VECTOR TYPES 20 and up FROM $80, $84, $88 ... to ... $b0
seg000:1BB7                 mov     si, 1BEFh       ; WORDS from ROM offset $1bef WHEN DH != 0
seg000:1BBA                 mov     cx, 0Dh
seg000:1BBD                 mov     bx, 4           ; 4 byte increments.
seg000:1BC0                 and     dh, dh
seg000:1BC2                 jnz     short loc_1BC7
seg000:1BC4                 mov     si, 1C09h       ; WORDS from ROM offset $1c09 WHEN DH = 0
seg000:1BC7
seg000:1BC7 loc_1BC7:                               ; CODE XREF: SETUP_IRQ_TABLE_DH__sub_1B88+3Aj
seg000:1BC7                 cld
seg000:1BC8
seg000:1BC8 ZEROPAGE_TEST__loc_1BC8:                ; CODE XREF: SETUP_IRQ_TABLE_DH__sub_1B88+52j
seg000:1BC8                 lods    word ptr cs:[si] ; Load WORD from ROM (offset SI) => AX
seg000:1BCA                 mov     [di], ax        ; STORE  AX
seg000:1BCC                 mov     dx, [di]        ; READ BACK STORED PATTERN TO DX
seg000:1BCE                 cmp     ax, dx
seg000:1BD0                 jz      short VALUE_OK_loc_1BD8 ;
seg000:1BD0                                         ;
seg000:1BD2                 mov     al, 44h ; 'D'   ; 0100 0100 - LED D4 OFF
seg000:1BD2                                         ; = "19 MAIN BOARD [0-64K] / FATAL" (LED POSITION 6 ON BACK = OFF)
seg000:1BD2                                         ;
seg000:1BD4                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:1BD4                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:1BD6
seg000:1BD6 BAD_ZEROPAGE__loc_1BD6:                 ; CODE XREF: SETUP_IRQ_TABLE_DH__sub_1B88:BAD_ZEROPAGE__loc_1BD6j
seg000:1BD6                 jmp     short BAD_ZEROPAGE__loc_1BD6 ;
seg000:1BD6                                         ; ********************************************
seg000:1BD6                                         ; *** LOCKS UP CPU WHEN ZERO PAGE IS FLAKY ***
seg000:1BD6                                         ; ********************************************
seg000:1BD8 ; ---------------------------------------------------------------------------
seg000:1BD8
seg000:1BD8 VALUE_OK_loc_1BD8:                      ; CODE XREF: SETUP_IRQ_TABLE_DH__sub_1B88+48j
seg000:1BD8                 add     di, bx          ; increment by 4 and repeat
seg000:1BDA                 loop    ZEROPAGE_TEST__loc_1BC8
seg000:1BDC                 pop     es
seg000:1BDD                 test    byte ptr es:loc_DB, 0Fh
seg000:1BE3                 jz      short loc_1BEB  ;
seg000:1BE3                                         ;
seg000:1BE5                 mov     ax, 0F02h       ; $f400-0f02 is invoked when memory board is present
seg000:1BE8                 mov     word ptr ds:j_S_ELFTEST__loc_152+2, ax ; (CPU memory location 08)
seg000:1BEB
seg000:1BEB loc_1BEB:                               ; CODE XREF: SETUP_IRQ_TABLE_DH__sub_1B88+5Bj
seg000:1BEB                 pop     ds
seg000:1BEC                 pop     dx
seg000:1BED                 popf
seg000:1BEE                 retn
seg000:1BEE SETUP_IRQ_TABLE_DH__sub_1B88 endp
seg000:1BEE
seg000:1BEE ; ---------------------------------------------------------------------------
seg000:1BEF                 db 0F5h, 34h            ;  Table 1: IRQ VECTORS @ offset $1bef
seg000:1BEF                                         ; -------------------------------------
seg000:1BEF                                         ; => SEE 3.1.3.8 OF PC-100 SPEC
seg000:1BEF                                         ;
seg000:1BEF                                         ;         *** HIGHEST PRIORITY ***
seg000:1BEF                                         ; $34f5 = Vertical Frequency Interrupt
seg000:1BEF                                         ;         ( vector address $80 / TYPE $20 )
seg000:1BEF                                         ;
seg000:1BF1                 db 0E3h, 34h            ; $34e3 = UNUSED / iret ( vector address $84 / TYPE $21 )
seg000:1BF1                                         ;
seg000:1BF3                 db 0ADh, 1Eh            ; $1ead = GRAPHICS IRQ VECTOR
seg000:1BF3                                         ;         ( vector address $88 / TYPE $22 )
seg000:1BF3                                         ;
seg000:1BF5                 db 0BCh, 1Eh            ; $1ebc = [OPTION BOARD] Interrupt from external COMM.BOARD - (DMA Controller Interrupt)
seg000:1BF5                                         ;         ( vector addresses $8c / IRQ.TYPE $23 )
seg000:1BF5                                         ;
seg000:1BF7                 db 0BCh, 32h            ; $32bc = COMM./PRINTER (7201) INTERRUPT
seg000:1BF7                                         ;         ( vector address $90 / IRQ.TYPE $24 )
seg000:1BF7                                         ;
seg000:1BF9                 db 0BCh, 1Eh            ; $1ebc = [OPTION BOARD] Interrupt from external COMM.BOARD (non DMA)
seg000:1BF9                                         ;         ( vector addresses $94 / IRQ.TYPE $25 )
seg000:1BF9                                         ;
seg000:1BFB                 db  2Ah, 80h            ; $802a = Keyboard (8251A) Interrupt
seg000:1BFB                                         ;         ( vector address $98 /  IRQ.TYPE $26 )
seg000:1BFB                                         ;
seg000:1BFD                 db 0D7h, 36h            ; $36d7 = Interrupt from Z80A  ( vector address $9c /  IRQ.TYPE $27 )
seg000:1BFD                                         ;         *** LOWEST PRIORITY ***
seg000:1BFD                                         ;
seg000:1BFF                 db 0E0h, 1Dh            ; $1de0 = 19 BIOS routines (17 valid functions, last 2 = IRET)
seg000:1BFF                                         ;         ( vector address $a0 / 8088 IRQ TYPE $28 )
seg000:1BFF                                         ;
seg000:1C01                 db 0E3h, 34h            ; $34e3 = iret
seg000:1C03                 db 0E3h, 34h            ; $34e3 = iret
seg000:1C05                 db 0E3h, 34h            ; $34e3 = iret
seg000:1C07                 db 0D5h, 36h            ; $36d5 = iret
seg000:1C07                                         ;
seg000:1C07                                         ; ---------------------------------------
seg000:1C07                                         ;  Table 2: ROM offset $1c09 when DH = 0
seg000:1C07                                         ; ---------------------------------------
seg000:1C09                 db  4Fh, 17h            ; $174f - VFI / TYPE 20 - vector address $80
seg000:1C0B                 db  9Fh, 17h            ; $179f - "2 - Main Board [unsolicited interrupt]++" [FATAL]
seg000:1C0D                 db  9Fh, 17h            ; $179f - "2 - Main Board [unsolicited interrupt]++" [FATAL]
seg000:1C0F                 db  65h, 17h            ; $1765 - also "unsolicited interrupt" ?
seg000:1C11                 db  6Ah, 17h            ; $176a - also "unsolicited interrupt" ?
seg000:1C13                 db  70h, 17h            ; $1770 - also "unsolicited interrupt" ?
seg000:1C15                 db  79h, 17h            ; $1779 - also "unsolicited interrupt" ?
seg000:1C17                 db  94h, 17h            ; $1794 - also "unsolicited interrupt" ?
seg000:1C19                 db  9Fh, 17h            ; $179f - "2 - Main Board [unsolicited interrupt]++" [FATAL]
seg000:1C1B                 db  9Fh, 17h            ; $179f ... " ...
seg000:1C1D                 db  9Fh, 17h            ; $179f ... " ...
seg000:1C1F                 db  9Fh, 17h            ; $179f ... " ...
seg000:1C21                 db  9Fh, 17h            ; $179f - "2 - Main Board [unsolicited interrupt]++" [FATAL]
seg000:1C23
seg000:1C23 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1C23
seg000:1C23
seg000:1C23 sub_1C23        proc near               ; CODE XREF: sub_1D78+10p
seg000:1C23                                         ; sub_2517+10p
seg000:1C23                 push    es
seg000:1C24                 push    ax
seg000:1C25                 mov     ax, ds
seg000:1C27                 mov     es, ax
seg000:1C29                 pop     ax
seg000:1C2A
seg000:1C2A loc_1C2A:
seg000:1C2A                 mov     si, 1000h
seg000:1C2D
seg000:1C2D loc_1C2D:
seg000:1C2D                 mov     di, si
seg000:1C2F                 mov     [di], al
seg000:1C31                 inc     di
seg000:1C32                 mov     cx, 0D40h
seg000:1C35                 cld
seg000:1C36
seg000:1C36 loc_1C36:
seg000:1C36                 rep movsb
seg000:1C38
seg000:1C38 loc_1C38:
seg000:1C38                 mov     si, 12h
seg000:1C3B                 mov     di, si
seg000:1C3D                 mov     byte ptr [di], 0
seg000:1C40                 inc     di
seg000:1C41                 mov     cx, 0D2Eh
seg000:1C44                 cld
seg000:1C45                 rep movsb
seg000:1C47                 pop     es
seg000:1C48                 retn
seg000:1C48 sub_1C23        endp
seg000:1C48
seg000:1C49
seg000:1C49 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1C49
seg000:1C49
seg000:1C49 sub_1C49        proc near               ; CODE XREF: sub_1D78+13p
seg000:1C49                 push    es
seg000:1C4A                 push    di
seg000:1C4B                 mov     ax, ds
seg000:1C4D                 mov     es, ax
seg000:1C4F                 mov     si, di
seg000:1C51                 mov     cx, 0FFFh
seg000:1C54                 sub     cx, si
seg000:1C56                 push    cx
seg000:1C57                 inc     di
seg000:1C58                 mov     byte ptr [si], 0
seg000:1C5B                 cld
seg000:1C5C                 rep movsb
seg000:1C5E                 pop     cx
seg000:1C5F                 sub     cx, 0FDh ; '²'
seg000:1C63                 pop     di
seg000:1C64                 add     di, 1000h
seg000:1C68                 mov     si, di
seg000:1C6A                 mov     byte ptr [si], 0
seg000:1C6D                 inc     di
seg000:1C6E                 rep movsb
seg000:1C70                 pop     es
seg000:1C71                 retn
seg000:1C71 sub_1C49        endp
seg000:1C71
seg000:1C72
seg000:1C72 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1C72
seg000:1C72
seg000:1C72 sub_1C72        proc near               ; CODE XREF: sub_1D78+2Ap
seg000:1C72                                         ; sub_2517+17p
seg000:1C72                 mov     word ptr ds:loc_F26+1, 12h
seg000:1C78                 mov     word ptr ds:loc_F40+1, 101h
seg000:1C7E                 mov     byte ptr ds:loc_ED9+1, 0Eh
seg000:1C83                 mov     word ptr ds:loc_ED7+1, 12h
seg000:1C89                 mov     byte ptr ds:loc_F40, 0Eh
seg000:1C8E                 mov     byte ptr ds:loc_F54+4, 1
seg000:1C93                 mov     byte ptr ds:loc_F59, 18h
seg000:1C98                 mov     byte ptr ds:loc_F2C+1, 1 ;
seg000:1C98                                         ;
seg000:1C9D                 test    byte ptr es:loc_86+1, 1 ; 0x87 :CURSOR (0=UNDERLINE 1=BLOCK)
seg000:1CA3                 jnz     short locret_1CAA
seg000:1CA5                 mov     byte ptr ds:loc_F2C+1, 8
seg000:1CAA
seg000:1CAA locret_1CAA:                            ; CODE XREF: sub_1C72+31j
seg000:1CAA                 retn
seg000:1CAA sub_1C72        endp
seg000:1CAA
seg000:1CAA ; ---------------------------------------------------------------------------
seg000:1CAB                 db 0FFh, 3, 0, 0FFh, 6, 0, 0FFh, 6, 0, 0FFh, 0Ch, 0, 0FFh ; offset $1cab - see INIT_VIDEORAM (below)
seg000:1CAB                 db 0Fh, 0, 0FFh, 3, 0   ; ***************************************************
seg000:1CAB                                         ; *** Initial delay lines in video ram $EE000 ff. ***
seg000:1CAB                                         ; ***************************************************
seg000:1CBD                 db 0, 6, 0, 0, 7, 0, 0, 6, 0, 0, 6, 0, 0, 6, 0, 0, 6, 0 ; offset $1cbd - see INIT_VIDEORAM (below)
seg000:1CCF ; ---------------------------------------------------------------------------
seg000:1CCF
seg000:1CCF INIT_VIDEORAM_18_BYTES__loc_1CCF:       ; CODE XREF: sub_1D78+30p
seg000:1CCF                                         ; sub_2517+21p
seg000:1CCF                 push    ax              ; INITIALIZE VIDEO RAM ($ee000).
seg000:1CCF                                         ;
seg000:1CCF                                         ; To fulfill CRT video timing requirements,
seg000:1CCF                                         ; some initial lines are written into video ram.
seg000:1CCF                                         ;
seg000:1CCF                                         ; Delay varies between 50 and 60 Hertz systems.
seg000:1CD0                 push    bx
seg000:1CD1                 push    cx
seg000:1CD2                 push    dx
seg000:1CD3                 push    di
seg000:1CD4                 push    si
seg000:1CD5                 push    ds
seg000:1CD6                 push    es
seg000:1CD7                 mov     bx, cs
seg000:1CD9                 mov     ds, bx
seg000:1CDB                 mov     bx, 0EE00h      ; INITIALIZE VIDEO RAM ($ee000) with $12 values from offset $1cab
seg000:1CDE                 mov     es, bx
seg000:1CE0                 assume es:nothing
seg000:1CE0                 mov     di, 0
seg000:1CE3                 mov     si, 1CABh       ; see codes ABOVE
seg000:1CE6                 mov     cx, 12h
seg000:1CE9                 cld
seg000:1CEA                 rep movsb
seg000:1CEC                 pop     es
seg000:1CED                 assume es:nothing
seg000:1CED                 pop     ds
seg000:1CEE                 push    ds
seg000:1CEF                 push    es
seg000:1CF0                 test    byte ptr es:loc_91, 1 ; POWER (0=60 Hz 1=50 Hz)
seg000:1CF6                 jz      short HERTZ60__loc_1CFD ;
seg000:1CF6                                         ;
seg000:1CF8                 mov     al, 9           ; 50 Hertz
seg000:1CFA                 mov     byte ptr ds:sub_0+1, al
seg000:1CFD
seg000:1CFD HERTZ60__loc_1CFD:                      ; CODE XREF: seg000:1CF6j
seg000:1CFD                 mov     cx, 18h
seg000:1D00                 mov     bx, 12h
seg000:1D03                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:1D06                 xor     ah, ah
seg000:1D08                 mov     dx, bx
seg000:1D0A
seg000:1D0A loc_1D0A:                               ; CODE XREF: seg000:1D23j
seg000:1D0A                 mov     bx, dx
seg000:1D0C                 add     dx, 87h ; 'ç'   ; $87 (135) byte steps.  132 chars + 3 bytes for the link info (FF LO HI)
seg000:1D10                 add     bx, ax
seg000:1D12                 mov     byte ptr [bx], 0FFh
seg000:1D15                 mov     byte ptr [bx+1000h], 0 ; <= ATTRIBUTE RAM
seg000:1D1A                 inc     bx
seg000:1D1B                 mov     [bx], dx        ; DX = pointer to next entry
seg000:1D1D                 mov     word ptr [bx+1000h], 7
seg000:1D23                 loop    loc_1D0A
seg000:1D25                 mov     word ptr [bx], 6
seg000:1D29                 mov     bx, cs
seg000:1D2B                 mov     ds, bx
seg000:1D2D                 mov     bx, 0EE00h
seg000:1D30                 mov     es, bx
seg000:1D32                 assume es:nothing
seg000:1D32                 mov     di, 1000h
seg000:1D35                 mov     si, 1CBDh       ; (2nd part) : INITIALIZE ATTRIBUTE RAM with $12 values from offset $1cbd
seg000:1D38                 mov     cx, 12h
seg000:1D3B                 cld
seg000:1D3C                 rep movsb
seg000:1D3E                 mov     word ptr es:4, 12h
seg000:1D45                 pop     es
seg000:1D46                 assume es:nothing
seg000:1D46                 pop     ds
seg000:1D47                 pop     si
seg000:1D48                 pop     di
seg000:1D49                 pop     dx
seg000:1D4A                 pop     cx
seg000:1D4B                 pop     bx
seg000:1D4C                 pop     ax
seg000:1D4D                 retn
seg000:1D4E
seg000:1D4E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1D4E
seg000:1D4E
seg000:1D4E sub_1D4E        proc near               ; CODE XREF: sub_1D78+33p
seg000:1D4E                                         ; sub_2517+24p
seg000:1D4E                 mov     di, 0           ; Internal- housekeeping (hex 87 / decimal 135 byte steps).
seg000:1D4E                                         ;
seg000:1D4E                                         ; Possibly related to video.
seg000:1D51                 mov     ax, 12h
seg000:1D54                 mov     cx, 18h
seg000:1D57
seg000:1D57 loc_1D57:                               ; CODE XREF: sub_1D4E+13j
seg000:1D57                 mov     [di+0EF4h], ax
seg000:1D5B                 add     di, 2
seg000:1D5E                 add     ax, 87h ; 'ç'
seg000:1D61                 loop    loc_1D57
seg000:1D63                 mov     word ptr ds:loc_F31, ax
seg000:1D66                 retn
seg000:1D66 sub_1D4E        endp
seg000:1D66
seg000:1D67
seg000:1D67 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1D67
seg000:1D67
seg000:1D67 sub_1D67        proc near               ; CODE XREF: sub_1D78+3Cp
seg000:1D67                 sub     ax, ax
seg000:1D69                 mov     byte ptr ds:loc_1EF7+1, al ; DS:1ef8
seg000:1D6C                 mov     byte ptr ds:loc_F2C, 4
seg000:1D71                 mov     byte ptr ds:loc_F42+1, al ; DS:0F43
seg000:1D74                 mov     byte ptr ds:loc_F54, al
seg000:1D77                 retn
seg000:1D77 sub_1D67        endp
seg000:1D77
seg000:1D78
seg000:1D78 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1D78
seg000:1D78
seg000:1D78 sub_1D78        proc near               ; CODE XREF: EMIT_SETUP_STRING__sub_19F+1Cp
seg000:1D78
seg000:1D78 ; FUNCTION CHUNK AT seg000:004E SIZE 00000003 BYTES
seg000:1D78 ; FUNCTION CHUNK AT seg000:2420 SIZE 00000006 BYTES
seg000:1D78 ; FUNCTION CHUNK AT seg000:2499 SIZE 0000001B BYTES
seg000:1D78 ; FUNCTION CHUNK AT seg000:28C3 SIZE 00000006 BYTES
seg000:1D78
seg000:1D78                 cli
seg000:1D79                 mov     ax, 0EE00h
seg000:1D7C                 mov     ds, ax
seg000:1D7E                 assume ds:nothing
seg000:1D7E                 mov     ax, 0ED00h
seg000:1D81                 mov     es, ax
seg000:1D83                 assume es:nothing
seg000:1D83                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; 1st setup of zero page and IRQ vectors (also a basic RAM TEST).
seg000:1D86                 mov     al, 0Eh
seg000:1D88                 call    sub_1C23
seg000:1D8B                 call    sub_1C49
seg000:1D8E                 call    ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F ;
seg000:1D8E                                         ;
seg000:1D91                 xor     ah, ah
seg000:1D93                 in      al, 8           ; PORT 8 : bit 2 (value 4) = zero if GRAPHICS OPTION is present
seg000:1D95                 and     al, 0Fh
seg000:1D97                 xchg    ah, al          ; move to MSB
seg000:1D99                 mov     word ptr ds:loc_1FFE, ax ; SYSTEM PARAMETER INFORMATION (EFFFE / EFFFF)
seg000:1D99                                         ;          See chapter 14.0 and page 91 / 92
seg000:1D99                                         ;          of 'PC 100 system specification March 83'
seg000:1D99                                         ;
seg000:1D99                                         ; Info about option boards is in bits 8 - 11:
seg000:1D99                                         ; Bundle card (8) | Floppy (9) | Graphics (10) | Memory option (11)
seg000:1D99                                         ; ( 1 means NOT present )
seg000:1D99                                         ;
seg000:1D9C                 mov     word ptr ds:1FFCh, 0
seg000:1DA2                 call    sub_1C72        ; housekeeping of variables in data segment (#1)
seg000:1DA5                 call    INIT_VIDEO_HW__sub_1AF0 ; Accesses PORT 04H  DC011 Write Register.
seg000:1DA8                 call    INIT_VIDEORAM_18_BYTES__loc_1CCF ; INITIALIZE VIDEO RAM ($ee000)
seg000:1DAB                 call    sub_1D4E        ; - more VIDEO RAM housekeeping
seg000:1DAE                 call    near ptr 8036h  ; INITIALIZE keyboard related variables (?). Also used @ offset 3817
seg000:1DB1                 call    ROM_Initialize7201__3157
seg000:1DB4                 call    sub_1D67        ; housekeeping of variables in data segment (#2)
seg000:1DB7                 jmp     CURSOR_MAGIC__loc_2499
seg000:1DB7 sub_1D78        endp
seg000:1DB7
seg000:1DB7 ; ---------------------------------------------------------------------------
seg000:1DBA                 db 6, 80h               ; --- JUMP TABLE ($1dba offset used below) ---
seg000:1DBA                                         ; start - FUNCTION NAME        #     /* params.
seg000:1DBA                                         ; --------------------------------------------
seg000:1DBA                                         ; $8006 - ROM_ConsoleOut       0x00  /* AL<-ASCII char
seg000:1DBA                                         ;
seg000:1DBC                 db 15h, 1Eh             ; $1e15 - ROM_ConsoleLev2In    0x02  /* : char->AL; status->CL (00h= no char.avail./ FFh - character in AL)
seg000:1DBC                                         ;
seg000:1DBE                 db 1, 1Eh               ; $1e01 - ROM_ConsoleLev2Stat  0x04  /* : status->CL (00 / FFh see above)
seg000:1DBE                                         ; [ ALTERNATE NAME: "Console Status In" ]
seg000:1DBE                                         ;
seg000:1DC0                 db 24h, 1Eh             ; $1e24 - ROM_ConsoleLev1In    0x06  /* : 16-bit lvl.1 char->AX (AL= char./AH= key-type flags) / status->CL
seg000:1DC0                                         ; [ ALTERNATE NAME : "Console Level 1 In" ]
seg000:1DC0                                         ;
seg000:1DC0                                         ;         00h = no character available
seg000:1DC0                                         ;         01h = if there is garbage in the Level 2 buffer - MUST be emptied (*)
seg000:1DC0                                         ;         FFh = character available
seg000:1DC0                                         ;
seg000:1DC0                                         ; (*) www.decuslib.com/decus/vax88a4/pcsig_decus/srccode/rbfunct.arc
seg000:1DC0                                         ;
seg000:1DC2                 db 1Eh, 0               ; $001e - ROM_DisableCursor    0x08  "Disable cursor at location"
seg000:1DC2                                         ;                                    (-> jump table from beginning of ROM) = jmp  sub_3927
seg000:1DC2                                         ;
seg000:1DC4                 db  21h,   0            ; $0021 - ROM_EnableCursor     0x0a  "Enable cursor at location"
seg000:1DC4                                         ;                                    (-> jump table from beginning of ROM) = jmp  sub_3950
seg000:1DC4                                         ;
seg000:1DC6                 db 49h, 1Eh             ; $1e49 - ROM_InitVectors      0x0c  "initialize interrupt vectors"
seg000:1DC6                                         ;
seg000:1DC8                 db 0FAh, 1Dh            ; $1dfa - ROM_ReturnClock      0x0e  /* rate->AL / bit 0 = 0 (60 Hz); bit 0 = 1 (50 Hz)
seg000:1DC8                                         ; [ ALTERNATE NAME : "Return Clock Rate" ]
seg000:1DCA                 db 0BFh, 1Eh            ;
seg000:1DCA                                         ; $1ebf - ROM_SetLeds          0x10  /* AL<-bit pattern describing which LEDs are to be turned ON
seg000:1DCC                 db 0C3h, 1Eh            ; $1ec3 - ROM_ClearLeds        0x12  /* AL<-bit pattern describing which LEDs are to be turned off
seg000:1DCC                                         ;   | 7 | X | X | X | 3 | 2 | 1 | 0 |    AL register
seg000:1DCC                                         ;   +---+---+---+---+---+---+---+---+    structure
seg000:1DCC                                         ;     |   |   |   |   |   |   |   |
seg000:1DCC                                         ;     |   |   |   |   |   |   |   |___ WAIT LED
seg000:1DCC                                         ;     |  Don't Cares  |   |   |_______ COMPOSE LED
seg000:1DCC                                         ;     |               |   |___________ LOCK LED
seg000:1DCC                                         ;     |               |_______________ HOLD SCREEN LED
seg000:1DCC                                         ;     |__ Must be '1'
seg000:1DCC                                         ;
seg000:1DCC                                         ;  If DI = 10 (set),    1 = ON
seg000:1DCC                                         ;  If DI = 12 (clear),  1 = OFF
seg000:1DCC                                         ;
seg000:1DCC                                         ; EX: to turn on just the Hold Screen LED use the
seg000:1DCC                                         ;     following bit pattern:
seg000:1DCC                                         ;       1 0 0 0 1 0 0 0  =  88 (hex) or 136 (dec)
seg000:1DCC                                         ;       _ _____
seg000:1DCC                                         ;       |   |____ these three bits can be anything.
seg000:1DCC                                         ;       |         0 was chosen for simplicity.
seg000:1DCC                                         ;       |
seg000:1DCC                                         ;       |________ must be set to 1
seg000:1DCC                                         ;
seg000:1DCC                                         ; LED positions on LK201 keyboard:
seg000:1DCC                                         ;      Hold Screen    Lock     Compose    Wait
seg000:1DCC                                         ; LEDs ->  (*)        (*)        (*)      (*)
seg000:1DCC                                         ;      --------------------------------------
seg000:1DCC                                         ;         [   Help   ] [        Do          ]
seg000:1DCC                                         ;
seg000:1DCE                 db 0CCh, 1Eh            ; ///////////////////////////////////////////////////
seg000:1DCE                                         ; $1ecc - ROM_FastVideo        0x14  /* many args
seg000:1DCE                                         ; [ ALTERNATE NAME : "Send data to screen display" ]
seg000:1DCE                                         ;
seg000:1DCE                                         ;   AX - transfer type value
seg000:1DCE                                         ;                              0 - Characters/Attributes
seg000:1DCE                                         ;                              1 - Attributes Only
seg000:1DCE                                         ;                              2 - Characters Only
seg000:1DCE                                         ;   BX -
seg000:1DCE                                         ;                              BL - Line # (1-24 valid)
seg000:1DCE                                         ;                              BH - Column # (1-132 valid)
seg000:1DCE                                         ;
seg000:1DCE                                         ;   CX - #  of characters /attributes  to transfer. Caution is advised when
seg000:1DCE                                         ;         trying  to  transfer more bytes of information than the difference
seg000:1DCE                                         ;         of the size of the screen width minus the  string length minus the
seg000:1DCE                                         ;         current column position.
seg000:1DCE                                         ;
seg000:1DCE                                         ;   DX -  Start  address of the attribute string.  Use  OFS() under TurboPASCAL.
seg000:1DCE                                         ;   SI -  Start address  of the character string.  (see DX)
seg000:1DCE                                         ;   BP - Data Segment Address. Use   Use DSEG function under TurboPASCAL.
seg000:1DCE                                         ;
seg000:1DD0                 db 9, 1Fh               ; $1f09 - ROM_InitToNVM        0x16  /* DL<-0
seg000:1DD0                                         ; [ ALTERNATE NAME : "initialize 7201 to NVM values" ]
seg000:1DD0                                         ;
seg000:1DD2                 db 0Ch, 1Fh             ; $1f0c - ROM_RawKbdData       0x18  /* code->AL; flags->AH; status->CL
seg000:1DD2                                         ;                                    [alternate name: "Raw keyboard data" ]
seg000:1DD2                                         ;
seg000:1DD2                                         ;                              CL - returned status:
seg000:1DD2                                         ;                                 00h - no character available
seg000:1DD2                                         ;                                 01h - character available
seg000:1DD2                                         ;
seg000:1DD2                                         ;                              AL - contains  the key location value
seg000:1DD2                                         ;                                 on  the specified keyboard  matrix
seg000:1DD2                                         ;                                 of the LK201 keyboard.
seg000:1DD2                                         ;
seg000:1DD2                                         ;                              AH - contains the flag bits
seg000:1DD2                                         ;
seg000:1DD4                 db 23h, 1Fh             ; $1f23 - (*) ROM_RomVersion       0x1a  /* DX,BP<-offset,seg of 8-byte buffer
seg000:1DD6                 db 66h, 1Fh             ; $1f66 - (*) ROM_ChangeVectorMap  0x1c  /* requires documentation.
seg000:1DD8                 db 0C2h, 1Fh            ; $1fc2 - (*) ROM_RingBell         0x1e
seg000:1DDA                 db 0C8h, 1Fh            ; $1fc8 - (*) ROM_GetSet7or8       0x20  /* AH<-function (1=get, 0=set);       */
seg000:1DDA                                         ;                                        /* AL<-value (0=8, 1=7) (set only) :  */
seg000:1DDA                                         ;                                        /*  value->AL (get only)              */
seg000:1DDA                                         ;
seg000:1DDA                                         ; NOTE (*) PC-100-B only?
seg000:1DDA                                         ;          Not present in original PC-100 specification from March 1983.
seg000:1DDA                                         ;          0x1a and beyond are marked as 'reserved' there.
seg000:1DDA                                         ;
seg000:1DDC                 db 0D8h, 1Fh            ; $1fd8 = retn
seg000:1DDE                 db 0D8h, 1Fh            ; $1fd8 = retn
seg000:1DE0 ; ---------------------------------------------------------------------------
seg000:1DE0                 push    ds              ; <====== $1DE0 (IRQ vector set in TABLE 1)
seg000:1DE0                                         ;
seg000:1DE0                                         ;         ( vector address $a0 / 8088 IRQ TYPE $28 )
seg000:1DE1                 sti
seg000:1DE2                 push    bx
seg000:1DE3                 mov     bx, 0EE00h
seg000:1DE6                 mov     ds, bx
seg000:1DE8                 mov     bx, 0ED00h
seg000:1DEB                 mov     es, bx
seg000:1DED                 pop     bx
seg000:1DEE                 cmp     di, 24h ; '$'
seg000:1DF1                 ja      short loc_1DF8
seg000:1DF3                 call    word ptr cs:[di+1DBAh] ; see JUMP TABLE ABOVE (19 locations / 17 valid functions)
seg000:1DF8
seg000:1DF8 loc_1DF8:                               ; CODE XREF: seg000:1DF1j
seg000:1DF8                 pop     ds
seg000:1DF9                 assume ds:nothing
seg000:1DF9                 iret
seg000:1DFA
seg000:1DFA ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1DFA
seg000:1DFA
seg000:1DFA ROM_ReturnClock__1DFA proc near
seg000:1DFA                 mov     al, es:91h      ; ROM_ReturnClock      0x0e  /* : rate->AL
seg000:1DFA                                         ; "Return Clock Rate"
seg000:1DFA                                         ;
seg000:1DFA                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1DFE                 and     al, 1
seg000:1E00                 retn                    ; NVM OFFSET 0x91 : POWER (0=60 Hz 1=50 Hz)
seg000:1E00 ROM_ReturnClock__1DFA endp
seg000:1E00
seg000:1E01 ; ---------------------------------------------------------------------------
seg000:1E01
seg000:1E01 ROM_ConsoleLev2Stat__1E01:              ; CODE XREF: seg000:1E0Dj
seg000:1E01                 call    near ptr 8039h  ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1E01                                         ;
seg000:1E01                                         ;
seg000:1E01                                         ; ROM_ConsoleLev2Stat  0x04  /* : status->CL
seg000:1E04                 jnb     short loc_1E0F
seg000:1E06                 and     cl, cl
seg000:1E08                 jnz     short loc_1E12
seg000:1E0A                 call    near ptr 803Ch  ; KEYBOARD INPUT => AL
seg000:1E0D                 jmp     short ROM_ConsoleLev2Stat__1E01
seg000:1E0F ; ---------------------------------------------------------------------------
seg000:1E0F
seg000:1E0F loc_1E0F:                               ; CODE XREF: seg000:1E04j
seg000:1E0F                 sub     cl, cl
seg000:1E11                 retn
seg000:1E12 ; ---------------------------------------------------------------------------
seg000:1E12
seg000:1E12 loc_1E12:                               ; CODE XREF: seg000:1E08j
seg000:1E12                 mov     cl, 0FFh
seg000:1E14                 retn
seg000:1E15 ; ---------------------------------------------------------------------------
seg000:1E15
seg000:1E15 ROM_ConsoleLev2In__1E15:                ; CODE XREF: seg000:1E1Cj
seg000:1E15                 call    near ptr 803Ch  ; ROM_ConsoleLev2In    0x02  /* : char->AL; status->CL
seg000:1E15                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1E18                 jnb     short loc_1E21
seg000:1E1A                 and     cl, cl
seg000:1E1C                 jz      short ROM_ConsoleLev2In__1E15
seg000:1E1E                 mov     cl, 0FFh
seg000:1E20                 retn
seg000:1E21 ; ---------------------------------------------------------------------------
seg000:1E21
seg000:1E21 loc_1E21:                               ; CODE XREF: seg000:1E18j
seg000:1E21                 sub     cl, cl
seg000:1E23                 retn
seg000:1E24
seg000:1E24 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1E24
seg000:1E24
seg000:1E24 ROM_ConsoleLev1In__1E24 proc near
seg000:1E24                 mov     cl, byte ptr ds:loc_FB7 ;
seg000:1E24                                         ; * Retrieves Level 1 console input (16bit).
seg000:1E24                                         ;
seg000:1E24                                         ; Called by jump table located $1dba / $1df3
seg000:1E28                 or      cl, byte ptr ds:loc_FCF
seg000:1E2C                 jz      short loc_1E31
seg000:1E2E                 mov     cl, 1
seg000:1E30                 retn
seg000:1E31 ; ---------------------------------------------------------------------------
seg000:1E31
seg000:1E31 loc_1E31:                               ; CODE XREF: ROM_ConsoleLev1In__1E24+8j
seg000:1E31                 push    bp
seg000:1E32                 push    si
seg000:1E33                 push    dx
seg000:1E34                 call    near ptr 8012h  ; ROM_ConsoleLev1In    0x06  /* : code->AX; status->CL
seg000:1E34                                         ;
seg000:1E37                 pop     dx
seg000:1E38                 pop     si
seg000:1E39                 pop     bp
seg000:1E3A                 jb      short loc_1E3F
seg000:1E3C                 xor     cl, cl
seg000:1E3E                 retn
seg000:1E3F ; ---------------------------------------------------------------------------
seg000:1E3F
seg000:1E3F loc_1E3F:                               ; CODE XREF: ROM_ConsoleLev1In__1E24+16j
seg000:1E3F                 test    ah, 1
seg000:1E42                 jz      short loc_1E46
seg000:1E44                 sub     al, 82h ; 'é'
seg000:1E46
seg000:1E46 loc_1E46:                               ; CODE XREF: ROM_ConsoleLev1In__1E24+1Ej
seg000:1E46                 mov     cl, 0FFh
seg000:1E48                 retn
seg000:1E48 ROM_ConsoleLev1In__1E24 endp
seg000:1E48
seg000:1E49
seg000:1E49 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1E49
seg000:1E49
seg000:1E49 ROM_InitVectors__1E49 proc near
seg000:1E49                 push    ds              ; "Initialize interrupt vectors"
seg000:1E49                                         ; Only sets up IRQs for VFI, KEYBOARD, GRAPHICS + OPTIONAL RAM + COMMUNICATION BOARD.
seg000:1E49                                         ; See also SETUP_IRQ_TABLE_DH__sub_1B88.
seg000:1E49                                         ;
seg000:1E49                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1E4A                 pushf
seg000:1E4B                 cli
seg000:1E4C                 mov     ax, 0
seg000:1E4F                 mov     ds, ax
seg000:1E51                 mov     bx, 80h ; 'Ç'
seg000:1E54                 mov     word ptr [bx], 34F5h ; $34f5 : Vertical Frequency Interrupt (highest priority) -  ( mem.location $80 )
seg000:1E58                 mov     ax, cs
seg000:1E5A                 mov     [bx+2], ax
seg000:1E5D                 mov     bx, 98h ; 'ÿ'
seg000:1E60                 mov     word ptr [bx], 802Ah ; $802a : KEYBOARD (8251A) Interrupt - ( mem.location $98 )
seg000:1E64                 mov     [bx+2], ax
seg000:1E67                 mov     bx, 0B0h ; '¦'
seg000:1E6A                 mov     word ptr [bx], 36D5h ; iret (memory location b0)
seg000:1E6E                 mov     [bx+2], ax      ;
seg000:1E6E                                         ;
seg000:1E71                 mov     bx, 8           ; [OPTIONAL RAM BOARD]             (memory location 08)
seg000:1E74                 mov     word ptr [bx], 34E3h ; iret
seg000:1E74                                         ;
seg000:1E78                 test    byte ptr es:0DBh, 0Fh ; ONLY IF RAM BOARD PRESENT, SET location 08 TO 0f02
seg000:1E7E                 jz      short loc_1E84
seg000:1E80                 mov     word ptr [bx], 0F02h ; "27 - Memory Board"  (wrong ram size?)
seg000:1E84
seg000:1E84 loc_1E84:                               ; CODE XREF: ROM_InitVectors__1E49+35j
seg000:1E84                 mov     [bx+2], ax
seg000:1E87                 mov     bx, 88h ; 'ê'
seg000:1E8A                 mov     word ptr [bx], 1EADh ; $1ead : Graphics Interrupt - ( mem.location $88 )
seg000:1E8E                 mov     [bx+2], ax
seg000:1E91                 mov     bx, 8Ch ; 'î'
seg000:1E94                 mov     word ptr [bx], 1EBCh ; [OPTIONAL COMM. BOARD]   ( mem.location $8c for non-DMA access )
seg000:1E98                 mov     [bx+2], ax
seg000:1E9B                 mov     bx, 94h ; 'ö'
seg000:1E9E                 mov     word ptr [bx], 1EBCh ; [OPTIONAL COMM. BOARD]   ( mem.location $94 for DMA )
seg000:1EA2                 mov     [bx+2], ax
seg000:1EA5                 popf
seg000:1EA6                 out     27h, al         ; RESET extended comm.option
seg000:1EA8                 call    RESET_GRAFX_OPTION__sub_1EB1
seg000:1EAB                 pop     ds
seg000:1EAC                 retn
seg000:1EAC ROM_InitVectors__1E49 endp
seg000:1EAC
seg000:1EAD ; ---------------------------------------------------------------------------
seg000:1EAD                 call    RESET_GRAFX_OPTION__sub_1EB1 ; <=== Graphics Interrupt - VECTOR ADDRESS $88 = $1ead
seg000:1EAD                                         ;
seg000:1EAD                                         ; (IRQ vector set in TABLE 1)
seg000:1EB0                 iret
seg000:1EB1
seg000:1EB1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1EB1
seg000:1EB1
seg000:1EB1 RESET_GRAFX_OPTION__sub_1EB1 proc near  ; CODE XREF: ROM_InitVectors__1E49+5Fp
seg000:1EB1                                         ; seg000:1EADp
seg000:1EB1                 push    ax
seg000:1EB2                 xor     ax, ax
seg000:1EB4                 out     50h, al
seg000:1EB6                 inc     al
seg000:1EB8                 out     50h, al
seg000:1EBA                 pop     ax
seg000:1EBB                 retn
seg000:1EBB RESET_GRAFX_OPTION__sub_1EB1 endp
seg000:1EBB
seg000:1EBC ; ---------------------------------------------------------------------------
seg000:1EBC                 out     27h, al         ; <=== [OPTION BOARD] DMA Controller Interrupt
seg000:1EBE                 iret                    ; - VECTOR ADDRESS $8c = $1ebc set in TABLE 1
seg000:1EBF
seg000:1EBF ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1EBF
seg000:1EBF
seg000:1EBF ROM_SetLeds__1EBF proc near
seg000:1EBF                 mov     ah, 13h         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1EBF                                         ;
seg000:1EBF                                         ; $13 = light LEDs
seg000:1EC1                 jmp     short loc_1EC5
seg000:1EC3 ; ---------------------------------------------------------------------------
seg000:1EC3
seg000:1EC3 ROM_ClearLeds__1EC3:                    ; DATA XREF: seg000:3738w
seg000:1EC3                                         ; REVERSE_FIELD__sub_3752+17r
seg000:1EC3                 mov     ah, 11h         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1EC3                                         ;
seg000:1EC3                                         ; $11 = turn off LEDs
seg000:1EC5
seg000:1EC5 loc_1EC5:                               ; CODE XREF: ROM_SetLeds__1EBF+2j
seg000:1EC5                                         ; DATA XREF: seg000:3732w
seg000:1EC5                                         ; REVERSE_FIELD__sub_3752+Fr
seg000:1EC5                 or      al, 80h
seg000:1EC7                 xchg    ah, al
seg000:1EC9                 jmp     near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:1EC9 ROM_SetLeds__1EBF endp                  ;
seg000:1EC9                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:1ECC
seg000:1ECC ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1ECC
seg000:1ECC ; Attributes: hidden
seg000:1ECC
seg000:1ECC ; E::ROM_FastVideo(const const)
seg000:1ECC ROM_FastVideo__1ECC proc near           ; CODE XREF: E::ROM_FastVideo(const const)+5j
seg000:1ECC                 test    byte ptr ds:loc_F2E+1, 8 ; ROM_FastVideo        0x14  /* many args
seg000:1ED1                 jnz     short ROM_FastVideo__1ECC ; loop (wait)
seg000:1ED1                                         ;
seg000:1ED3                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:1ED6                 call    j_REVERSE_FIELD__sub_3752
seg000:1ED9                 push    ax
seg000:1EDA                 xor     ax, ax
seg000:1EDC                 xchg    al, bh
seg000:1EDE                 dec     ax
seg000:1EDF                 shl     bx, 1
seg000:1EE1                 mov     di, [bx+0EF2h]
seg000:1EE5
seg000:1EE5 loc_1EE5:                               ; DATA XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+17w
seg000:1EE5                                         ; NVM_WRITEPROTECT_READABLE__sub_3DF3+3Cw
seg000:1EE5                 add     di, ax
seg000:1EE7
seg000:1EE7 loc_1EE7:                               ; DATA XREF: sub_3AB5-31Br
seg000:1EE7                                         ; sub_3AB5+15Bw
seg000:1EE7                                         ; sub_3AF1+39w
seg000:1EE7                                         ; DS_HOUSEKEEPING1__sub_3C78r
seg000:1EE7                 and     di, 7FFFh
seg000:1EEB                 push    ds
seg000:1EEC
seg000:1EEC loc_1EEC:                               ; DATA XREF: sub_3AF1+35w
seg000:1EEC                                         ; DS_HOUSEKEEPING1__sub_3C78+4r
seg000:1EEC                 pop     es
seg000:1EED                 assume es:nothing
seg000:1EED
seg000:1EED loc_1EED:                               ; DATA XREF: sub_3BAF+29w
seg000:1EED                                         ; DS_HOUSEKEEPING2__sub_3C23r
seg000:1EED                 mov     ds, bp
seg000:1EEF                 pop     ax
seg000:1EF0
seg000:1EF0 loc_1EF0:                               ; DATA XREF: sub_3BAF+25w
seg000:1EF0                                         ; DS_HOUSEKEEPING2__sub_3C23+4r
seg000:1EF0                 rcr     al, 1
seg000:1EF2
seg000:1EF2 loc_1EF2:                               ; DATA XREF: sub_3BAF+31w
seg000:1EF2                                         ; DS_HOUSEKEEPING2__sub_3C23+9r
seg000:1EF2                 jb      short loc_1EFB
seg000:1EF4
seg000:1EF4 loc_1EF4:                               ; DATA XREF: sub_3AF1+2Fw
seg000:1EF4                                         ; DS_HOUSEKEEPING1__sub_3C78+9r
seg000:1EF4                 push    di
seg000:1EF5
seg000:1EF5 loc_1EF5:                               ; DATA XREF: sub_2517+3w
seg000:1EF5                                         ; sub_2517+27w
seg000:1EF5                                         ; sub_3AB5:SCROLL__loc_3793r
seg000:1EF5                                         ; sub_3AB5:loc_37B1w
seg000:1EF5                                         ; sub_3AB5-2FFw
seg000:1EF5                                         ; sub_3A98+8w sub_3AB5+8w
seg000:1EF5                                         ; sub_3AB5+Dw
seg000:1EF5                                         ; sub_3AB5:loc_3AE6w
seg000:1EF5                                         ; VIDEORAM_TABLE__sub_3B30+18w
seg000:1EF5                                         ; VIDEORAM_TABLE__sub_3B30+24w
seg000:1EF5                                         ; sub_3AB5+149r
seg000:1EF5                                         ; sub_3AB5+163w
seg000:1EF5                                         ; SWITCH_HOLDSCREEN__sub_3C34+5r
seg000:1EF5                                         ; DS_HOUSEKEEPING1__sub_3C78+10w
seg000:1EF5                 push    cx
seg000:1EF6
seg000:1EF6 loc_1EF6:                               ; DATA XREF: KBD_HOP__sub_368F+1Dr
seg000:1EF6                                         ; KBD_HOP__sub_368F+23w
seg000:1EF6                                         ; KBD_HOP__sub_368F:loc_36BCw
seg000:1EF6                 cld
seg000:1EF7
seg000:1EF7 loc_1EF7:                               ; DATA XREF: sub_1D67+2w
seg000:1EF7                                         ; sub_28C9-32Dr
seg000:1EF7                                         ; sub_28C9-31Br
seg000:1EF7                                         ; sub_28C9-2F8r
seg000:1EF7                                         ; sub_28C9-2C0r
seg000:1EF7                                         ; ROM_Initialize7201__3157+1Aw
seg000:1EF7                                         ; PRN_CTRL_STATUS__sub_32E3+7r
seg000:1EF7                                         ; seg000:332Aw
seg000:1EF7                                         ; seg000:loc_3332w
seg000:1EF7                                         ; sub_84:loc_37DCr
seg000:1EF7                                         ; sub_84:loc_37E3w
seg000:1EF7                                         ; sub_84+3786w
seg000:1EF7                                         ; KEYB_IN_AL__sub_38B1+10r
seg000:1EF7                 rep movsb
seg000:1EF9
seg000:1EF9 loc_1EF9:                               ; DATA XREF: NVM_READ_n_CHECK__sub_3D62+1w
seg000:1EF9                                         ; NVM_WRITEPROTECT_READABLE__sub_3DF3+6r
seg000:1EF9                 pop     cx
seg000:1EFA                 pop     di
seg000:1EFB
seg000:1EFB loc_1EFB:                               ; CODE XREF: E::ROM_FastVideo(const const):loc_1EF2j
seg000:1EFB                 rcr     al, 1
seg000:1EFD                 jb      short locret_1F08
seg000:1EFF                 add     di, 1000h
seg000:1F03                 mov     si, dx
seg000:1F05                 cld
seg000:1F06                 rep movsb
seg000:1F08
seg000:1F08 locret_1F08:                            ; CODE XREF: E::ROM_FastVideo(const const)+31j
seg000:1F08                 retn
seg000:1F08 ROM_FastVideo__1ECC endp
seg000:1F08
seg000:1F09
seg000:1F09 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1F09
seg000:1F09 ; Attributes: thunk
seg000:1F09
seg000:1F09 ROM_Initialize7201__1F09 proc near
seg000:1F09                 jmp     ROM_Initialize7201__3157 ; "Initialize 7201 to NVM values"     0x16  /* DL<-0
seg000:1F09 ROM_Initialize7201__1F09 endp           ;
seg000:1F09                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1F0C
seg000:1F0C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1F0C
seg000:1F0C
seg000:1F0C ROM_RawKbdData__1F0C proc near
seg000:1F0C                 xor     cl, cl          ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1F0E                 call    near ptr 8024h  ; ROM_RawKbdData       0x18  /* : code->AL; flags->AH; status->CL
seg000:1F11                 rcl     cl, 1
seg000:1F13                 retn
seg000:1F13 ROM_RawKbdData__1F0C endp
seg000:1F13
seg000:1F14 ; ---------------------------------------------------------------------------
seg000:1F14                 inc     cx              ; ?
seg000:1F15                 inc     bx
seg000:1F16                 inc     bp
seg000:1F17                 inc     si
seg000:1F18                 dec     bp
seg000:1F19                 dec     si
seg000:1F1A                 inc     sp
seg000:1F1B                 push    bx
seg000:1F1C                 inc     di
seg000:1F1D                 dec     bx
seg000:1F1E                 dec     sp
seg000:1F1F                 dec     ax
seg000:1F20                 inc     dx
seg000:1F21                 push    ax
seg000:1F22                 dec     cx
seg000:1F23
seg000:1F23 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1F23
seg000:1F23
seg000:1F23 ROM_RomVersion__1F23 proc near          ; CODE XREF: j_ROM_RomVersion__1F23j
seg000:1F23                                         ; sub_6D0+8p
seg000:1F23                 mov     es, bp          ; ROM_RomVersion       0x1a  /* DX,BP<-offset,seg of 8-byte buffer
seg000:1F23                                         ;
seg000:1F23                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1F25                 mov     di, dx
seg000:1F27                 mov     bp, cs
seg000:1F29                 mov     ds, bp
seg000:1F2B                 mov     bx, 3FF8h
seg000:1F2E
seg000:1F2E loc_1F2E:                               ; CODE XREF: ROM_RomVersion__1F23+1Aj
seg000:1F2E                 mov     al, [bx]
seg000:1F30                 cmp     al, 0
seg000:1F32                 jz      short loc_1F3F
seg000:1F34                 add     al, [bx-8000h]
seg000:1F38                 mov     es:[di], al
seg000:1F3B                 inc     bx
seg000:1F3C                 inc     di
seg000:1F3D                 jmp     short loc_1F2E
seg000:1F3F ; ---------------------------------------------------------------------------
seg000:1F3F
seg000:1F3F loc_1F3F:                               ; CODE XREF: ROM_RomVersion__1F23+Fj
seg000:1F3F                 mov     byte ptr es:[di], 0
seg000:1F43                 inc     di
seg000:1F44                 mov     bx, 0ED00h
seg000:1F47                 mov     ds, bx
seg000:1F49                 assume ds:nothing
seg000:1F49                 mov     bx, ds:0ACh
seg000:1F4D                 and     bl, 0Fh
seg000:1F50                 mov     cl, 4
seg000:1F52                 shl     bh, cl
seg000:1F54                 or      bl, bh
seg000:1F56                 xor     bh, bh
seg000:1F58                 mov     al, cs:[bx+1F14h]
seg000:1F5D                 mov     es:[di], al
seg000:1F60                 inc     di
seg000:1F61                 mov     byte ptr es:[di], 0
seg000:1F65                 retn
seg000:1F65 ROM_RomVersion__1F23 endp
seg000:1F65
seg000:1F66
seg000:1F66 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1F66
seg000:1F66
seg000:1F66 ROM_ChangeVectorMap__1F66 proc near
seg000:1F66                 or      ax, ax          ; ROM_ChangeVectorMap  0x1c  /* documentation required.
seg000:1F66                                         ;
seg000:1F66                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1F68                 jnz     short loc_1F7D
seg000:1F6A                 cli
seg000:1F6B                 mov     dh, 2
seg000:1F6D                 call    SETUP_IRQ_TABLE_DH__sub_1B88 ; TEST RAM & SET UP IRQ VECTORS (DH = 00/01/02/FF)
seg000:1F70                 sti
seg000:1F71                 and     byte ptr ds:0F44h, 0FBh ; [ RELOCATED IRQ VECTORS EE00:0F44h ] : reset bit 2.
seg000:1F71                                         ;         See EX03.ASM in GRAPHEX.ARC for a reference.
seg000:1F76                 mov     al, 13h
seg000:1F78                 out     11h, al         ; put value $13 -> KEYBOARD PORT 11
seg000:1F7A                 jmp     locret_1FC1     ; retn
seg000:1F7D ; ---------------------------------------------------------------------------
seg000:1F7D
seg000:1F7D loc_1F7D:                               ; CODE XREF: ROM_ChangeVectorMap__1F66+2j
seg000:1F7D                 jcxz    short locret_1FC1
seg000:1F7F                 or      byte ptr ds:0F44h, 4 ; [ RELOCATED IRQ VECTORS EE00:0F44h ] : SET bit 2.
seg000:1F84                 mov     dl, 15h
seg000:1F86                 cmp     al, ah
seg000:1F88                 jb      short loc_1F92
seg000:1F8A                 and     byte ptr ds:0F44h, 0FBh ; [ RELOCATED IRQ VECTORS EE00:0F44h ] : reset bit 2.
seg000:1F8F                 or      dl, 2
seg000:1F92
seg000:1F92 loc_1F92:                               ; CODE XREF: ROM_ChangeVectorMap__1F66+22j
seg000:1F92                 or      al, al
seg000:1F94                 jnz     short loc_1F98
seg000:1F96                 mov     al, 20h ; ' '
seg000:1F98
seg000:1F98 loc_1F98:                               ; CODE XREF: ROM_ChangeVectorMap__1F66+2Ej
seg000:1F98                 or      ah, ah
seg000:1F9A                 jnz     short loc_1F9E
seg000:1F9C                 mov     ah, 20h ; ' '
seg000:1F9E
seg000:1F9E loc_1F9E:                               ; CODE XREF: ROM_ChangeVectorMap__1F66+34j
seg000:1F9E                 xor     bx, bx
seg000:1FA0                 mov     ds, bx
seg000:1FA2                 assume ds:nothing
seg000:1FA2                 mov     es, bx
seg000:1FA4                 mov     bl, al
seg000:1FA6                 shl     bx, 1
seg000:1FA8                 shl     bx, 1
seg000:1FAA                 mov     si, bx
seg000:1FAC                 xor     bx, bx
seg000:1FAE                 mov     bl, ah
seg000:1FB0                 shl     bx, 1
seg000:1FB2                 shl     bx, 1
seg000:1FB4                 mov     di, bx
seg000:1FB6                 shl     cx, 1
seg000:1FB8                 cld
seg000:1FB9                 cli
seg000:1FBA                 rep movsw
seg000:1FBC                 mov     al, dl
seg000:1FBE                 out     11h, al         ; DL / AL value -> KEYBOARD PORT 11
seg000:1FC0                 sti
seg000:1FC1
seg000:1FC1 locret_1FC1:                            ; CODE XREF: ROM_ChangeVectorMap__1F66+14j
seg000:1FC1                                         ; ROM_ChangeVectorMap__1F66:loc_1F7Dj
seg000:1FC1                 retn
seg000:1FC1 ROM_ChangeVectorMap__1F66 endp
seg000:1FC1
seg000:1FC2
seg000:1FC2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1FC2
seg000:1FC2
seg000:1FC2 ROM_RingBell__1FC2 proc near
seg000:1FC2                 mov     al, 0A7h ; 'º'  ; ROM_RingBell         0x1e
seg000:1FC2                                         ;
seg000:1FC2                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1FC2                                         ;
seg000:1FC2                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:1FC2                                         ;
seg000:1FC4                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:1FC7                 retn
seg000:1FC7 ROM_RingBell__1FC2 endp
seg000:1FC7
seg000:1FC8
seg000:1FC8 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:1FC8
seg000:1FC8
seg000:1FC8 ROM_GetSet7or8__1FC8 proc near
seg000:1FC8                 or      ah, ah          ; ROM_GetSet7or8       0x20  /* AH<-function (1=get, 0=set);       */
seg000:1FC8                                         ;                            /* AL<-value (0=8, 1=7) (set only) :  */
seg000:1FC8                                         ;                            /*  value->AL (get only)              */
seg000:1FC8                                         ;
seg000:1FC8                                         ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1FCA                 jnz     short loc_1FD1
seg000:1FCC                 mov     byte ptr es:loc_9D+1, al
seg000:1FD0                 retn
seg000:1FD1 ; ---------------------------------------------------------------------------
seg000:1FD1
seg000:1FD1 loc_1FD1:                               ; CODE XREF: ROM_GetSet7or8__1FC8+2j
seg000:1FD1                 mov     al, byte ptr es:loc_9D+1
seg000:1FD5                 and     al, 0Fh
seg000:1FD7                 retn
seg000:1FD7 ROM_GetSet7or8__1FC8 endp
seg000:1FD7
seg000:1FD8 ; ---------------------------------------------------------------------------
seg000:1FD8                 retn                    ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:1FD9 ; ---------------------------------------------------------------------------
seg000:1FD9                 call    j_ROM_DisableCursor
seg000:1FDC                 mov     byte ptr ds:loc_F42, al
seg000:1FDF                 jmp     j_ROM_EnableCursor ; = jmp sub_3950
seg000:1FE2 ; ---------------------------------------------------------------------------
seg000:1FE2                 call    j_ROM_DisableCursor
seg000:1FE5                 mov     byte ptr ds:loc_F40+1, al
seg000:1FE8                 jmp     j_ROM_EnableCursor ; = jmp sub_3950
seg000:1FEB ; ---------------------------------------------------------------------------
seg000:1FEB
seg000:1FEB loc_1FEB:                               ; CODE XREF: seg000:20C6p
seg000:1FEB                                         ; sub_238D+16j sub_23B1+Ej
seg000:1FEB                                         ; sub_2446+Fj
seg000:1FEB                 dec     dh
seg000:1FED                 mov     bl, dh
seg000:1FEF                 sub     bh, bh
seg000:1FF1                 shl     bx, 1
seg000:1FF3                 mov     si, [bx+0EF4h]
seg000:1FF7 ; START OF FUNCTION CHUNK FOR sub_3B9E
seg000:1FF7
seg000:1FF7 loc_1FF7:                               ; CODE XREF: sub_3B9E+Ej
seg000:1FF7                 push    ax
seg000:1FF8
seg000:1FF8 loc_1FF8:                               ; DATA XREF: sub_84+2C6w
seg000:1FF8                                         ; sub_84:WAIT_FOR_BIT3__loc_35Er
seg000:1FF8                                         ; sub_84+2E1w
seg000:1FF8                                         ; sub_28C9:loc_22EEw
seg000:1FF8                                         ; sub_28C9:loc_22F6w
seg000:1FF8                                         ; sub_84+2D1w
seg000:1FF8                 and     si, 7FFFh
seg000:1FFC                 mov     dh, 0
seg000:1FFE
seg000:1FFE loc_1FFE:                               ; DATA XREF: sub_1D78+21w
seg000:1FFE                                         ; IS_TERMINALMODE__sub_2618r
seg000:1FFE                                         ; seg000:26A5r
seg000:1FFE                                         ; HOUSEKEEP_CON_TERM__sub_3177r
seg000:1FFE                                         ; CONTROL_STATUS__sub_31C1+20r
seg000:1FFE                                         ; PRINTERCONTROL_STATUS__sub_3219+1Ar
seg000:1FFE                                         ; sub_84:TERMINAL_MODE__loc_37D0w
seg000:1FFE                                         ; SCREEN_TO_PRN__sub_39FD+4r
seg000:1FFE                                         ; SWITCH_HOLDSCREEN__sub_3C34+Cr
seg000:1FFE                                         ; SWITCH_HOLDSCREEN__sub_3C34:loc_3C4Ew
seg000:1FFE                 dec     dx
seg000:1FFF                 add     si, dx
seg000:2001                 mov     [si], al        ; DATA XREF: sub_84+5Bw
seg000:2001                                         ; sub_84+6Ew sub_84+A1r
seg000:2001                                         ; sub_84+AAr
seg000:2003                 mov     [si+1000h], ah
seg000:2007                 sub     ch, ch
seg000:2009                 dec     cx
seg000:200A                 jcxz    short loc_2025
seg000:200C                 push    es
seg000:200D                 mov     ax, ds
seg000:200F                 mov     es, ax
seg000:2011                 push    si
seg000:2012                 push    cx
seg000:2013                 mov     di, si
seg000:2015                 inc     di
seg000:2016                 cld
seg000:2017                 rep movsb
seg000:2019                 pop     cx
seg000:201A                 pop     si
seg000:201B                 add     si, 1000h
seg000:201F                 mov     di, si
seg000:2021                 inc     di
seg000:2022                 rep movsb
seg000:2024                 pop     es
seg000:2025
seg000:2025 loc_2025:                               ; CODE XREF: sub_3B9E-1B94j
seg000:2025                 pop     ax
seg000:2026                 retn
seg000:2026 ; END OF FUNCTION CHUNK FOR sub_3B9E
seg000:2027 ; ---------------------------------------------------------------------------
seg000:2027
seg000:2027 loc_2027:                               ; CODE XREF: sub_2446+4p
seg000:2027                                         ; seg000:2471p
seg000:2027                 mov     bl, dh
seg000:2029                 dec     bl
seg000:202B                 jnz     short loc_2032
seg000:202D                 mov     si, 3
seg000:2030                 jmp     short loc_204E
seg000:2032 ; ---------------------------------------------------------------------------
seg000:2032
seg000:2032 loc_2032:                               ; CODE XREF: seg000:202Bj
seg000:2032                 sub     bh, bh
seg000:2034                 dec     bx
seg000:2035                 shl     bx, 1
seg000:2037                 mov     si, [bx+0EF4h]
seg000:203B                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:203E                 sub     ah, ah
seg000:2040                 test    si, 8000h
seg000:2044                 jz      short loc_204C
seg000:2046                 shr     ax, 1
seg000:2048                 and     si, 7FFFh
seg000:204C
seg000:204C loc_204C:                               ; CODE XREF: seg000:2044j
seg000:204C                 add     si, ax
seg000:204E
seg000:204E loc_204E:                               ; CODE XREF: seg000:2030j
seg000:204E                 mov     al, [si+1001h]
seg000:2052                 and     al, 1
seg000:2054                 shl     dl, 1
seg000:2056                 or      al, dl
seg000:2058                 mov     [si+1001h], al
seg000:205C                 mov     bl, dh
seg000:205E                 sub     bh, bh
seg000:2060                 dec     bx
seg000:2061                 shl     bx, 1
seg000:2063                 push    bx
seg000:2064                 mov     bx, [bx+0EF4h]
seg000:2068                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:206B                 sub     ah, ah
seg000:206D                 test    bx, 8000h
seg000:2071                 jnz     short loc_209F
seg000:2073                 cmp     dl, 6
seg000:2076                 jnz     short loc_207A
seg000:2078                 pop     bx
seg000:2079                 retn
seg000:207A ; ---------------------------------------------------------------------------
seg000:207A
seg000:207A loc_207A:                               ; CODE XREF: seg000:2076j
seg000:207A                 mov     si, ax
seg000:207C                 shr     ax, 1
seg000:207E                 mov     di, ax
seg000:2080                 push    di
seg000:2081                 call    sub_20D1
seg000:2084                 pop     ax
seg000:2085                 cmp     dh, byte ptr ds:loc_F42
seg000:2089                 jnz     short loc_2097
seg000:208B                 mov     byte ptr ds:loc_F54+3, al
seg000:208E                 cmp     byte ptr ds:loc_F40+1, al
seg000:2092                 jbe     short loc_2097
seg000:2094                 mov     byte ptr ds:loc_F40+1, al
seg000:2097
seg000:2097 loc_2097:                               ; CODE XREF: seg000:2089j
seg000:2097                                         ; seg000:2092j
seg000:2097                 pop     bx
seg000:2098                 or      word ptr [bx+0EF4h], 8000h
seg000:209E                 retn
seg000:209F ; ---------------------------------------------------------------------------
seg000:209F
seg000:209F loc_209F:                               ; CODE XREF: seg000:2071j
seg000:209F                 cmp     dl, 6
seg000:20A2                 jz      short loc_20A6
seg000:20A4                 pop     bx
seg000:20A5                 retn
seg000:20A6 ; ---------------------------------------------------------------------------
seg000:20A6
seg000:20A6 loc_20A6:                               ; CODE XREF: seg000:20A2j
seg000:20A6                 mov     di, ax
seg000:20A8                 shr     ax, 1
seg000:20AA                 mov     si, ax
seg000:20AC                 push    si
seg000:20AD                 call    sub_20D1
seg000:20B0                 cmp     dh, byte ptr ds:loc_F42
seg000:20B4                 jnz     short loc_20BC
seg000:20B6                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:20B9                 mov     byte ptr ds:loc_F54+3, al
seg000:20BC
seg000:20BC loc_20BC:                               ; CODE XREF: seg000:20B4j
seg000:20BC                 pop     ax
seg000:20BD                 mov     cl, al
seg000:20BF                 inc     al
seg000:20C1                 mov     dl, al
seg000:20C3                 mov     ax, 0E00h
seg000:20C6                 call    loc_1FEB
seg000:20C9                 pop     bx
seg000:20CA                 and     word ptr [bx+0EF4h], 7FFFh
seg000:20D0                 retn
seg000:20D1
seg000:20D1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:20D1
seg000:20D1
seg000:20D1 sub_20D1        proc near               ; CODE XREF: seg000:2081p
seg000:20D1                                         ; seg000:20ADp
seg000:20D1                 push    bx
seg000:20D2                 and     bh, 7Fh
seg000:20D5                 mov     byte ptr [bx+di], 0FFh
seg000:20D8                 mov     byte ptr [bx+di+1000h], 0Eh
seg000:20DD                 mov     ax, [bx+si+1]
seg000:20E0                 mov     [bx+di+1], ax
seg000:20E3                 mov     al, [bx+si+1001h]
seg000:20E7                 mov     [bx+di+1001h], al
seg000:20EB                 mov     byte ptr [bx+di+1002h], 0Eh
seg000:20F0                 pop     bx
seg000:20F1                 retn
seg000:20F1 sub_20D1        endp
seg000:20F1
seg000:20F2 ; ---------------------------------------------------------------------------
seg000:20F2 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:20F2
seg000:20F2 loc_20F2:                               ; CODE XREF: sub_28C9-76Fj
seg000:20F2                                         ; sub_28C9:loc_224Cj
seg000:20F2                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:20F5                 call    j_ROM_DisableCursor
seg000:20F8                 call    sub_20FE
seg000:20FB                 jmp     EnableCursor2__loc_2420
seg000:20FB ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:20FE
seg000:20FE ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:20FE
seg000:20FE
seg000:20FE sub_20FE        proc near               ; CODE XREF: sub_28C9-7D1p
seg000:20FE                                         ; seg000:2874p
seg000:20FE                                         ; seg000:2887p
seg000:20FE                                         ; DATA XREF: seg000:loc_F54r
seg000:20FE                 test    byte ptr ds:loc_F44, 1
seg000:2103                 jnz     short loc_210A  ;
seg000:2103                                         ;
seg000:2105                 mov     cx, 118h
seg000:2108                 jmp     short loc_2112
seg000:210A ; ---------------------------------------------------------------------------
seg000:210A
seg000:210A loc_210A:                               ; CODE XREF: sub_20FE+5j
seg000:210A                 mov     ch, byte ptr ds:loc_F54+4
seg000:210E                 mov     cl, byte ptr ds:loc_F59
seg000:2112
seg000:2112 loc_2112:                               ; CODE XREF: sub_20FE+Aj
seg000:2112                 cmp     dh, ch
seg000:2114                 jnb     short loc_211A  ;
seg000:2114                                         ;
seg000:2116                 mov     dh, ch
seg000:2118                 jmp     short loc_2120
seg000:211A ; ---------------------------------------------------------------------------
seg000:211A
seg000:211A loc_211A:                               ; CODE XREF: sub_20FE+16j
seg000:211A                 cmp     dh, cl
seg000:211C                 jbe     short loc_2120  ;
seg000:211C                                         ;
seg000:211E                 mov     dh, cl
seg000:2120
seg000:2120 loc_2120:                               ; CODE XREF: sub_20FE+1Aj
seg000:2120                                         ; sub_20FE+1Ej
seg000:2120                 mov     byte ptr ds:loc_F42, dh
seg000:2120 sub_20FE        endp
seg000:2120
seg000:2124
seg000:2124 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2124
seg000:2124
seg000:2124 VIDEORAM__sub_2124 proc near            ; CODE XREF: SCROLL__sub_3A40+20p
seg000:2124                                         ; sub_3A72+20p
seg000:2124                 call    VIDEORAM_TABLE_v3__sub_2136
seg000:2127                 cmp     dl, byte ptr ds:loc_F54+3
seg000:212B                 jbe     short loc_2131
seg000:212D                 mov     dl, byte ptr ds:loc_F54+3
seg000:2131
seg000:2131 loc_2131:                               ; CODE XREF: VIDEORAM__sub_2124+7j
seg000:2131                 mov     byte ptr ds:loc_F40+1, dl
seg000:2135                 retn
seg000:2135 VIDEORAM__sub_2124 endp
seg000:2135
seg000:2136
seg000:2136 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2136
seg000:2136
seg000:2136 VIDEORAM_TABLE_v3__sub_2136 proc near   ; CODE XREF: VIDEORAM__sub_2124p
seg000:2136                                         ; sub_28C9-71Ap
seg000:2136                                         ; seg000:24DEp
seg000:2136                                         ; sub_3AB5+1Bp
seg000:2136                 push    cx
seg000:2137                 mov     bl, byte ptr ds:loc_F42
seg000:213B                 dec     bl
seg000:213D                 sub     bh, bh
seg000:213F                 shl     bx, 1
seg000:2141                 mov     bx, [bx+0EF4h]
seg000:2145                 mov     cl, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:2149                 test    bx, 8000h
seg000:214D                 jz      short loc_2151
seg000:214F                 shr     cl, 1
seg000:2151
seg000:2151 loc_2151:                               ; CODE XREF: VIDEORAM_TABLE_v3__sub_2136+17j
seg000:2151                 mov     byte ptr ds:loc_F54+3, cl
seg000:2155                 pop     cx
seg000:2156                 retn
seg000:2156 VIDEORAM_TABLE_v3__sub_2136 endp
seg000:2156
seg000:2157 ; ---------------------------------------------------------------------------
seg000:2157 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:2157
seg000:2157 loc_2157:                               ; CODE XREF: sub_224F+41j
seg000:2157                                         ; RESET_DS_F44__sub_22D2+5j
seg000:2157                                         ; SET_DS_F44__sub_22DA+5j
seg000:2157                                         ; sub_28C9:loc_2917j
seg000:2157                 mov     dx, 101h        ; Routine called by jump table @ word_2A44
seg000:2157                                         ;
seg000:215A                 jmp     short loc_20F2
seg000:215C ; ---------------------------------------------------------------------------
seg000:215C
seg000:215C loc_215C:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:215C                 mov     cl, 1           ; Routine called by jump table @ word_2A44
seg000:215C                                         ;
seg000:215E                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2161                 call    j_ROM_DisableCursor
seg000:2164                 mov     ch, byte ptr ds:loc_F42
seg000:2168                 mov     bl, byte ptr ds:loc_F54+4
seg000:216C                 cmp     bl, ch
seg000:216E                 jbe     short loc_2172  ;
seg000:216E                                         ;
seg000:2170                 mov     bl, 1
seg000:2172
seg000:2172 loc_2172:                               ; CODE XREF: sub_28C9-75Bj
seg000:2172                 sub     ch, cl
seg000:2174                 jb      short loc_217A  ;
seg000:2174                                         ;
seg000:2176                 and     ch, ch
seg000:2178                 jnz     short loc_217C
seg000:217A
seg000:217A loc_217A:                               ; CODE XREF: sub_28C9-755j
seg000:217A                 mov     ch, 1
seg000:217C
seg000:217C loc_217C:                               ; CODE XREF: sub_28C9-751j
seg000:217C                 cmp     ch, bl
seg000:217E                 jnb     short loc_2182  ;
seg000:217E                                         ;
seg000:2180                 mov     ch, bl
seg000:2182
seg000:2182 loc_2182:                               ; CODE XREF: sub_28C9-74Bj
seg000:2182                 jmp     short loc_21AB
seg000:2184 ; ---------------------------------------------------------------------------
seg000:2184
seg000:2184 loc_2184:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2184                 mov     cl, 1           ; Routine called by jump table @ word_2A44
seg000:2184                                         ;
seg000:2186                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2189                 call    j_ROM_DisableCursor
seg000:218C                 mov     ch, byte ptr ds:loc_F42
seg000:2190                 mov     bl, byte ptr ds:loc_F59
seg000:2194                 cmp     bl, ch
seg000:2196                 jnb     short loc_219A  ;
seg000:2196                                         ;
seg000:2198                 mov     bl, 18h
seg000:219A
seg000:219A loc_219A:                               ; CODE XREF: sub_28C9-733j
seg000:219A                 add     ch, cl
seg000:219C                 jb      short loc_21A3  ;
seg000:219C                                         ;
seg000:219E                 cmp     ch, 18h
seg000:21A1                 jbe     short loc_21A5
seg000:21A3
seg000:21A3 loc_21A3:                               ; CODE XREF: sub_28C9-72Dj
seg000:21A3                 mov     ch, 18h
seg000:21A5
seg000:21A5 loc_21A5:                               ; CODE XREF: sub_28C9-728j
seg000:21A5                 cmp     ch, bl
seg000:21A7                 jbe     short loc_21AB
seg000:21A9                 mov     ch, bl
seg000:21AB
seg000:21AB loc_21AB:                               ; CODE XREF: sub_28C9:loc_2182j
seg000:21AB                                         ; sub_28C9-722j
seg000:21AB                 mov     byte ptr ds:loc_F42, ch
seg000:21AF                 call    VIDEORAM_TABLE_v3__sub_2136
seg000:21B2                 mov     ch, byte ptr ds:loc_F54+3
seg000:21B6                 cmp     byte ptr ds:loc_F40+1, ch
seg000:21BA                 jbe     short loc_21C0
seg000:21BC                 mov     byte ptr ds:loc_F40+1, ch
seg000:21C0
seg000:21C0 loc_21C0:                               ; CODE XREF: sub_28C9-70Fj
seg000:21C0                 jmp     EnableCursor2__loc_2420
seg000:21C3 ; ---------------------------------------------------------------------------
seg000:21C3
seg000:21C3 loc_21C3:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:21C3                 mov     cl, 1           ; Routine called by jump table @ word_2A44
seg000:21C3                                         ;
seg000:21C5                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:21C8                 call    j_ROM_DisableCursor
seg000:21CB                 mov     ch, byte ptr ds:loc_F40+1
seg000:21CF                 add     ch, cl
seg000:21D1                 jb      short loc_21D9
seg000:21D3                 cmp     ch, byte ptr ds:loc_F54+3
seg000:21D7                 jbe     short loc_21DD
seg000:21D9
seg000:21D9 loc_21D9:                               ; CODE XREF: sub_28C9-6F8j
seg000:21D9                 mov     ch, byte ptr ds:loc_F54+3
seg000:21DD
seg000:21DD loc_21DD:                               ; CODE XREF: sub_28C9-6F2j
seg000:21DD                 jmp     short loc_21F5
seg000:21DF ; ---------------------------------------------------------------------------
seg000:21DF
seg000:21DF loc_21DF:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:21DF                 mov     cl, 1           ; Routine called by jump table @ word_2A44
seg000:21DF                                         ;
seg000:21E1                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:21E4                 call    j_ROM_DisableCursor
seg000:21E7                 mov     ch, byte ptr ds:loc_F40+1
seg000:21EB                 sub     ch, cl
seg000:21ED                 jb      short loc_21F3
seg000:21EF                 and     ch, ch
seg000:21F1                 jnz     short loc_21F5
seg000:21F3
seg000:21F3 loc_21F3:                               ; CODE XREF: sub_28C9-6DCj
seg000:21F3                 mov     ch, 1
seg000:21F5
seg000:21F5 loc_21F5:                               ; CODE XREF: sub_28C9:loc_21DDj
seg000:21F5                                         ; sub_28C9-6D8j
seg000:21F5                 mov     byte ptr ds:loc_F40+1, ch
seg000:21F9                 jmp     EnableCursor2__loc_2420
seg000:21FC ; ---------------------------------------------------------------------------
seg000:21FC
seg000:21FC loc_21FC:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:21FC                 mov     dx, 215Eh       ; Routine called by jump table @ word_2A44
seg000:21FC                                         ;
seg000:21FF
seg000:21FF loc_21FF:                               ; CODE XREF: sub_28C9-6B8j
seg000:21FF                                         ; sub_28C9-6B3j
seg000:21FF                                         ; sub_28C9-6AEj
seg000:21FF                 mov     cl, 1
seg000:2201                 call    sub_2B4E
seg000:2204                 jnz     short loc_220C
seg000:2206                 and     al, al
seg000:2208                 jz      short loc_220C
seg000:220A                 mov     cl, al
seg000:220C
seg000:220C loc_220C:                               ; CODE XREF: sub_28C9-6C5j
seg000:220C                                         ; sub_28C9-6C1j
seg000:220C                 jmp     dx
seg000:220E ; ---------------------------------------------------------------------------
seg000:220E
seg000:220E loc_220E:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:220E                 mov     dx, 2186h       ; Routine called by jump table @ word_2A44
seg000:220E                                         ;
seg000:2211                 jmp     short loc_21FF
seg000:2213 ; ---------------------------------------------------------------------------
seg000:2213
seg000:2213 loc_2213:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2213                 mov     dx, 21C5h       ; Routine called by jump table @ word_2A44
seg000:2213                                         ;
seg000:2216                 jmp     short loc_21FF
seg000:2218 ; ---------------------------------------------------------------------------
seg000:2218
seg000:2218 loc_2218:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2218                 mov     dx, 21E1h       ; Routine called by jump table @ word_2A44
seg000:2218                                         ;
seg000:221B                 jmp     short loc_21FF
seg000:221B ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:221D ; ---------------------------------------------------------------------------
seg000:221D                 mov     dx, 101h        ; Routine called by jump table @ word_2A44
seg000:2220                 cmp     byte ptr ds:loc_EDE, 0
seg000:2225                 jz      short loc_223B
seg000:2227                 call    sub_2B4E
seg000:222A                 and     al, al
seg000:222C                 jz      short loc_2230
seg000:222E                 mov     dh, al
seg000:2230
seg000:2230 loc_2230:                               ; CODE XREF: seg000:222Cj
seg000:2230                 call    sub_2B4E
seg000:2233                 jnz     short loc_223B
seg000:2235                 and     al, al
seg000:2237                 jz      short loc_223B
seg000:2239                 mov     dl, al
seg000:223B ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:223B
seg000:223B loc_223B:                               ; CODE XREF: seg000:2225j
seg000:223B                                         ; seg000:2233j
seg000:223B                                         ; seg000:2237j
seg000:223B                                         ; sub_28C9:loc_2AF7j
seg000:223B                 test    byte ptr ds:loc_F44, 1
seg000:2240                 jz      short loc_224C
seg000:2242                 dec     dh
seg000:2244                 add     dh, byte ptr ds:loc_F54+4
seg000:2248                 jnb     short loc_224C
seg000:224A                 mov     dh, 0FEh ; '¦'
seg000:224C
seg000:224C loc_224C:                               ; CODE XREF: sub_28C9-689j
seg000:224C                                         ; sub_28C9-681j
seg000:224C                 jmp     loc_20F2
seg000:224C ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:224F
seg000:224F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:224F
seg000:224F
seg000:224F sub_224F        proc near               ; CODE XREF: seg000:288Fp
seg000:224F
seg000:224F ; FUNCTION CHUNK AT seg000:228D SIZE 00000006 BYTES
seg000:224F
seg000:224F                 mov     byte ptr ds:loc_EDE, 0 ; :224F called by jump table @ word_2A44
seg000:224F                                         ;
seg000:2254                 mov     dx, 118h        ; :2254 called by jump table @ word_2A44
seg000:2257                 cmp     byte ptr ds:loc_EDE, dh
seg000:225B                 jb      short loc_226F  ;
seg000:225B                                         ;
seg000:225D                 jz      short loc_227C
seg000:225F                 call    sub_2281
seg000:2262                 call    sub_2B4E
seg000:2265                 or      al, al
seg000:2267                 jz      short loc_226F
seg000:2269                 cmp     al, dl
seg000:226B                 ja      short loc_2279
seg000:226D                 mov     dl, al
seg000:226F
seg000:226F loc_226F:                               ; CODE XREF: sub_224F+Cj
seg000:226F                                         ; sub_224F+18j
seg000:226F                                         ; sub_224F+30j
seg000:226F                 mov     al, dl
seg000:2271                 sub     al, dh
seg000:2273                 jbe     short loc_2279
seg000:2275                 cmp     al, 1
seg000:2277                 jnb     short loc_228D
seg000:2279
seg000:2279 loc_2279:                               ; CODE XREF: sub_224F+1Cj
seg000:2279                                         ; sub_224F+24j
seg000:2279                 jmp     loc_4E
seg000:227C ; ---------------------------------------------------------------------------
seg000:227C
seg000:227C loc_227C:                               ; CODE XREF: sub_224F+Ej
seg000:227C                 call    sub_2281
seg000:227F                 jmp     short loc_226F
seg000:227F sub_224F        endp
seg000:227F
seg000:2281
seg000:2281 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2281
seg000:2281
seg000:2281 sub_2281        proc near               ; CODE XREF: sub_224F+10p
seg000:2281                                         ; sub_224F:loc_227Cp
seg000:2281                 call    sub_2B4E
seg000:2284                 or      al, al
seg000:2286                 jnz     short loc_228A
seg000:2288                 inc     al
seg000:228A
seg000:228A loc_228A:                               ; CODE XREF: sub_2281+5j
seg000:228A                 mov     dh, al
seg000:228C                 retn
seg000:228C sub_2281        endp
seg000:228C
seg000:228D ; ---------------------------------------------------------------------------
seg000:228D ; START OF FUNCTION CHUNK FOR sub_224F
seg000:228D
seg000:228D loc_228D:                               ; CODE XREF: sub_224F+28j
seg000:228D                 call    sub_2293
seg000:2290                 jmp     loc_2157
seg000:2290 ; END OF FUNCTION CHUNK FOR sub_224F
seg000:2293
seg000:2293 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2293
seg000:2293
seg000:2293 sub_2293        proc near               ; CODE XREF: sub_224F:loc_228Dp
seg000:2293                                         ; seg000:27FDp
seg000:2293                                         ; seg000:280Ep
seg000:2293                                         ; seg000:2864p
seg000:2293                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2296                 mov     byte ptr ds:loc_F54+4, dh
seg000:229A                 mov     byte ptr ds:loc_F59, dl
seg000:229E                 mov     dl, 1
seg000:22A0                 mov     si, 3
seg000:22A3                 sub     bh, bh
seg000:22A5
seg000:22A5 loc_22A5:                               ; CODE XREF: sub_2293+33j
seg000:22A5                 mov     al, [si+1001h]
seg000:22A9                 call    sub_3C67
seg000:22AC                 mov     [si+1001h], al
seg000:22B0                 mov     bl, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:22B4                 and     al, 6
seg000:22B6                 cmp     al, 6
seg000:22B8                 jz      short loc_22BC
seg000:22BA                 shr     bx, 1
seg000:22BC
seg000:22BC loc_22BC:                               ; CODE XREF: sub_2293+25j
seg000:22BC                 mov     si, [si+1]
seg000:22BF                 add     si, bx
seg000:22C1                 inc     dl
seg000:22C3                 cmp     dl, 19h
seg000:22C6                 jnz     short loc_22A5
seg000:22C8                 retn
seg000:22C8 sub_2293        endp
seg000:22C8
seg000:22C9
seg000:22C9 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:22C9
seg000:22C9
seg000:22C9 SET_VT52_EMULATION__sub_22C9 proc near  ; CODE XREF: seg000:2D79p
seg000:22C9                 and     byte ptr es:loc_86+2, 0FEh ; 0x88 :EMULATION (0=VT52 1=ANSI)
seg000:22CF                 jmp     ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F
seg000:22CF SET_VT52_EMULATION__sub_22C9 endp
seg000:22CF
seg000:22D2
seg000:22D2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:22D2
seg000:22D2
seg000:22D2 RESET_DS_F44__sub_22D2 proc near        ; CODE XREF: seg000:2D9Dp
seg000:22D2                 and     byte ptr ds:loc_F44, 0FEh
seg000:22D7                 jmp     loc_2157
seg000:22D7 RESET_DS_F44__sub_22D2 endp
seg000:22D7
seg000:22DA
seg000:22DA ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:22DA
seg000:22DA
seg000:22DA SET_DS_F44__sub_22DA proc near          ; CODE XREF: seg000:2D2Dp
seg000:22DA                 or      byte ptr ds:loc_F44, 1
seg000:22DF                 jmp     loc_2157
seg000:22DF SET_DS_F44__sub_22DA endp
seg000:22DF
seg000:22E2 ; ---------------------------------------------------------------------------
seg000:22E2 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:22E2
seg000:22E2 SET_ANSI_EMULATION__loc_22E2:           ; CODE XREF: sub_28C9:loc_2917j
seg000:22E2                 or      byte ptr es:loc_86+2, 1 ; Routine called by jump table @ word_2A44
seg000:22E2                                         ; 0x88 :EMULATION (0=VT52 1=ANSI)
seg000:22E8                 call    ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F
seg000:22EB                 jmp     loc_4E
seg000:22EE ; ---------------------------------------------------------------------------
seg000:22EE
seg000:22EE loc_22EE:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:22EE                 or      byte ptr ds:loc_1FF8+1, 1 ; DS:1FF9 - Routine called by jump table @ word_2A44
seg000:22F3                 jmp     loc_4E
seg000:22F6 ; ---------------------------------------------------------------------------
seg000:22F6
seg000:22F6 loc_22F6:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:22F6                 and     byte ptr ds:loc_1FF8+1, 0FEh ; DS:1FF9 - Routine called by jump table @ word_2A44
seg000:22FB                 jmp     loc_4E
seg000:22FB ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:22FE
seg000:22FE ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:22FE
seg000:22FE
seg000:22FE sub_22FE        proc near               ; CODE XREF: seg000:2D09p
seg000:22FE                 or      byte ptr ds:loc_F44, 2
seg000:2303                 retn
seg000:2303 sub_22FE        endp
seg000:2303
seg000:2304
seg000:2304 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2304
seg000:2304
seg000:2304 sub_2304        proc near               ; CODE XREF: seg000:2D70p
seg000:2304                 and     byte ptr ds:loc_F44, 0FDh
seg000:2309                 retn
seg000:2309 sub_2304        endp
seg000:2309
seg000:230A
seg000:230A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:230A
seg000:230A
seg000:230A SET_SMOOTH_SCROLL__sub_230A proc near   ; CODE XREF: seg000:2D1Bp
seg000:230A                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:230D                 or      byte ptr es:sub_84, 1 ; 0x84: SCROLL (0=JUMP 1 = SMOOTH)
seg000:230D                                         ;
seg000:2313                 retn
seg000:2313 SET_SMOOTH_SCROLL__sub_230A endp
seg000:2313
seg000:2314
seg000:2314 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2314
seg000:2314
seg000:2314 SET_JUMP_SCROLL__NVM_84__sub_2314 proc near ; CODE XREF: seg000:2D8Bp
seg000:2314                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2317                 and     byte ptr es:sub_84, 0FEh ; 0x84: SCROLL (0=JUMP 1 = SMOOTH)
seg000:2317                                         ;
seg000:231D                 retn
seg000:231D SET_JUMP_SCROLL__NVM_84__sub_2314 endp
seg000:231D
seg000:231E
seg000:231E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:231E
seg000:231E
seg000:231E SET_DC012_REV_FIELD_ON__sub_231E proc near ; CODE XREF: seg000:2D24p
seg000:231E                 or      byte ptr es:loc_89+1, 1
seg000:2324                 mov     al, 0Ah         ; Set reverse field ON
seg000:2326                 jmp     short AL_to_PORT10C__loc_2330
seg000:2328 ; ---------------------------------------------------------------------------
seg000:2328
seg000:2328 SET_DC012_REV_FIELD_OFF__loc_2328:      ; CODE XREF: seg000:2D94p
seg000:2328                 and     byte ptr es:loc_89+1, 0FEh
seg000:232E                 mov     al, 0Bh         ; Set reverse field off
seg000:2330
seg000:2330 AL_to_PORT10C__loc_2330:                ; CODE XREF: SET_DC012_REV_FIELD_ON__sub_231E+8j
seg000:2330                 mov     dx, 10Ch
seg000:2333                 out     dx, al          ; AL => PORT 10c
seg000:2334                 retn
seg000:2334 SET_DC012_REV_FIELD_ON__sub_231E endp
seg000:2334
seg000:2335
seg000:2335 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2335
seg000:2335
seg000:2335 SET_AUTOWRAP_NVM_8D__sub_2335 proc near ; CODE XREF: seg000:2D36p
seg000:2335                 or      byte ptr es:loc_8B+2, 1 ;
seg000:2335                                         ; 0x8d AUTO WRAP (0=OFF 1=ON)
seg000:2335                                         ;
seg000:2335                                         ; When enabled, the 81st or 133rd character
seg000:2335                                         ;  inserted on a line is automatically placed
seg000:2335                                         ;  in the 1st character position of the next
seg000:2335                                         ;  line (else: overwritten).
seg000:233B                 retn
seg000:233B SET_AUTOWRAP_NVM_8D__sub_2335 endp
seg000:233B
seg000:233C
seg000:233C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:233C
seg000:233C
seg000:233C RESET_AUTOWRAP_NVM_8D__sub_233C proc near ; CODE XREF: seg000:2DA6p
seg000:233C                 and     byte ptr es:loc_8B+2, 0FEh ; 0x8d AUTO WRAP (0=OFF 1=ON)
seg000:2342                 retn
seg000:2342 RESET_AUTOWRAP_NVM_8D__sub_233C endp
seg000:2342
seg000:2343
seg000:2343 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2343
seg000:2343
seg000:2343 sub_2343        proc near               ; CODE XREF: sub_60j
seg000:2343                 mov     word ptr ds:loc_F3D+1, 0Ah
seg000:2349                 jmp     loc_4E
seg000:2349 sub_2343        endp
seg000:2349
seg000:234C
seg000:234C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:234C
seg000:234C
seg000:234C sub_234C        proc near               ; CODE XREF: sub_63j
seg000:234C                 mov     word ptr ds:loc_F3D+1, 0Ah
seg000:2352                 jmp     loc_4E
seg000:2352 sub_234C        endp
seg000:2352
seg000:2355
seg000:2355 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2355
seg000:2355
seg000:2355 sub_2355        proc near               ; CODE XREF: seg000:2C5Cp
seg000:2355                 or      byte ptr es:loc_AA, 1
seg000:235B                 retn
seg000:235B sub_2355        endp
seg000:235B
seg000:235C
seg000:235C ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:235C
seg000:235C
seg000:235C sub_235C        proc near               ; CODE XREF: seg000:2C96p
seg000:235C                 and     byte ptr es:loc_AA, 0FEh
seg000:2362                 retn
seg000:2362 sub_235C        endp
seg000:2362
seg000:2363
seg000:2363 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2363
seg000:2363
seg000:2363 sub_2363        proc near               ; CODE XREF: seg000:2C65p
seg000:2363                 and     byte ptr es:loc_93+2, 0FEh
seg000:2369                 retn
seg000:2369 sub_2363        endp
seg000:2369
seg000:236A
seg000:236A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:236A
seg000:236A
seg000:236A sub_236A        proc near               ; CODE XREF: seg000:2C9Fp
seg000:236A                 or      byte ptr es:loc_93+2, 1
seg000:2370                 retn
seg000:2370 sub_236A        endp
seg000:2370
seg000:2371
seg000:2371 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2371
seg000:2371
seg000:2371 sub_2371        proc near               ; CODE XREF: seg000:2C6Ep
seg000:2371                 or      byte ptr es:loc_8E, 1
seg000:2377                 retn
seg000:2377 sub_2371        endp
seg000:2377
seg000:2378
seg000:2378 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2378
seg000:2378
seg000:2378 sub_2378        proc near               ; CODE XREF: seg000:2CA8p
seg000:2378                 and     byte ptr es:loc_8E, 0FEh
seg000:237E                 retn
seg000:237E sub_2378        endp
seg000:237E
seg000:237F ; ---------------------------------------------------------------------------
seg000:237F ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:237F
seg000:237F loc_237F:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:237F                 call    sub_2385        ; Routine called by jump table @ word_2A44
seg000:237F                                         ;
seg000:2382                 jmp     loc_4E
seg000:2382 ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:2385
seg000:2385 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2385
seg000:2385
seg000:2385 sub_2385        proc near               ; CODE XREF: sub_28C9:loc_237Fp
seg000:2385                                         ; seg000:2B9Ep
seg000:2385                                         ; seg000:2BA8p
seg000:2385
seg000:2385 ; FUNCTION CHUNK AT seg000:23CB SIZE 00000005 BYTES
seg000:2385
seg000:2385                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2388                 call    j_ROM_DisableCursor
seg000:238B                 jmp     short loc_23CB
seg000:238B sub_2385        endp
seg000:238B
seg000:238D
seg000:238D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:238D
seg000:238D
seg000:238D sub_238D        proc near               ; CODE XREF: sub_2385:loc_23CBp
seg000:238D                                         ; sub_23D6:loc_23F0p
seg000:238D                 mov     ah, 0Eh
seg000:238F                 mov     al, 0
seg000:2391                 mov     dh, byte ptr ds:loc_F42
seg000:2395                 mov     dl, byte ptr ds:loc_F40+1
seg000:2399                 mov     cl, byte ptr ds:loc_F54+3
seg000:239D                 sub     cl, byte ptr ds:loc_F40+1
seg000:23A1                 inc     cl
seg000:23A3                 jmp     loc_1FEB
seg000:23A3 sub_238D        endp
seg000:23A3
seg000:23A6
seg000:23A6 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:23A6
seg000:23A6
seg000:23A6 sub_23A6        proc near               ; CODE XREF: seg000:2BB1p
seg000:23A6                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:23A9                 call    j_ROM_DisableCursor
seg000:23AC                 call    sub_23B1
seg000:23AF                 jmp     short EnableCursor1__loc_241D
seg000:23AF sub_23A6        endp
seg000:23AF
seg000:23B1
seg000:23B1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:23B1
seg000:23B1
seg000:23B1 sub_23B1        proc near               ; CODE XREF: sub_23A6+6p
seg000:23B1                                         ; sub_23C2+6p sub_23D6+34p
seg000:23B1                 mov     ah, 0Eh
seg000:23B3                 mov     al, 0
seg000:23B5                 mov     cl, byte ptr ds:loc_F40+1
seg000:23B9                 mov     dh, byte ptr ds:loc_F42
seg000:23BD                 mov     dl, 1
seg000:23BF                 jmp     loc_1FEB
seg000:23BF sub_23B1        endp
seg000:23BF
seg000:23C2
seg000:23C2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:23C2
seg000:23C2
seg000:23C2 sub_23C2        proc near               ; CODE XREF: seg000:2BBAp
seg000:23C2                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:23C5                 call    j_ROM_DisableCursor
seg000:23C8                 call    sub_23B1
seg000:23C8 sub_23C2        endp
seg000:23C8
seg000:23CB ; START OF FUNCTION CHUNK FOR sub_2385
seg000:23CB
seg000:23CB loc_23CB:                               ; CODE XREF: sub_2385+6j
seg000:23CB                 call    sub_238D
seg000:23CE                 jmp     short EnableCursor1__loc_241D
seg000:23CE ; END OF FUNCTION CHUNK FOR sub_2385
seg000:23D0 ; ---------------------------------------------------------------------------
seg000:23D0 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:23D0
seg000:23D0 loc_23D0:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:23D0                 call    sub_23D6        ; Routine called by jump table @ word_2A44
seg000:23D0                                         ;
seg000:23D3                 jmp     loc_4E
seg000:23D3 ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:23D6
seg000:23D6 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:23D6
seg000:23D6
seg000:23D6 sub_23D6        proc near               ; CODE XREF: sub_28C9:loc_23D0p
seg000:23D6                                         ; seg000:2B72p
seg000:23D6                                         ; seg000:2B7Cp
seg000:23D6                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:23D9                 call    j_ROM_DisableCursor
seg000:23DC                 cmp     byte ptr ds:loc_F40+1, 1
seg000:23E1                 jnz     short loc_23F0  ;
seg000:23E1                                         ;
seg000:23E3                 mov     dh, byte ptr ds:loc_F42
seg000:23E7                 mov     ah, 0Eh
seg000:23E9                 mov     al, 0
seg000:23EB                 call    sub_2446
seg000:23EE                 jmp     short loc_23F3
seg000:23F0 ; ---------------------------------------------------------------------------
seg000:23F0
seg000:23F0 loc_23F0:                               ; CODE XREF: sub_23D6+Bj
seg000:23F0                 call    sub_238D
seg000:23F3
seg000:23F3 loc_23F3:                               ; CODE XREF: sub_23D6+18j
seg000:23F3                 mov     cl, 18h
seg000:23F5                 sub     cl, byte ptr ds:loc_F42
seg000:23F9                 jz      short loc_2402
seg000:23FB                 sub     ch, ch
seg000:23FD                 mov     dh, 18h
seg000:23FF                 call    sub_243A
seg000:2402
seg000:2402 loc_2402:                               ; CODE XREF: sub_23D6+23j
seg000:2402                 jmp     short EnableCursor1__loc_241D
seg000:2404 ; ---------------------------------------------------------------------------
seg000:2404
seg000:2404 loc_2404:                               ; CODE XREF: seg000:2B85p
seg000:2404                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2407                 call    j_ROM_DisableCursor
seg000:240A                 call    sub_23B1
seg000:240D                 mov     cl, byte ptr ds:loc_F42
seg000:2411                 sub     cl, 1
seg000:2414                 jz      short EnableCursor2__loc_2420
seg000:2416                 sub     ch, ch
seg000:2418                 mov     dh, cl
seg000:241A                 call    sub_243A
seg000:241D
seg000:241D EnableCursor1__loc_241D:                ; CODE XREF: sub_23A6+9j
seg000:241D                                         ; sub_2385+49j
seg000:241D                                         ; sub_23D6:loc_2402j
seg000:241D                                         ; sub_2430+8j
seg000:241D                 jmp     j_ROM_EnableCursor
seg000:241D sub_23D6        endp
seg000:241D
seg000:2420 ; ---------------------------------------------------------------------------
seg000:2420 ; START OF FUNCTION CHUNK FOR sub_1D78
seg000:2420
seg000:2420 EnableCursor2__loc_2420:                ; CODE XREF: sub_28C9-7CEj
seg000:2420                                         ; sub_28C9:loc_21C0j
seg000:2420                                         ; sub_28C9-6D0j
seg000:2420                                         ; sub_23D6+3Ej
seg000:2420                                         ; seg000:2474j
seg000:2420                                         ; sub_1D78+739j
seg000:2420                                         ; seg000:loc_24EDj
seg000:2420                                         ; seg000:loc_2816j
seg000:2420                                         ; sub_3A66+9j
seg000:2420                 call    j_ROM_EnableCursor
seg000:2423                 jmp     loc_4E
seg000:2423 ; END OF FUNCTION CHUNK FOR sub_1D78
seg000:2426
seg000:2426 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2426
seg000:2426
seg000:2426 sub_2426        proc near               ; CODE XREF: seg000:2B8Ep
seg000:2426                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2429                 call    j_ROM_DisableCursor
seg000:242C                 mov     ah, 0Eh
seg000:242E                 xor     al, al
seg000:242E sub_2426        endp
seg000:242E
seg000:2430
seg000:2430 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2430
seg000:2430
seg000:2430 sub_2430        proc near               ; CODE XREF: seg000:2899p
seg000:2430                 mov     cx, 18h
seg000:2433                 mov     dh, cl
seg000:2435                 call    sub_243A
seg000:2438                 jmp     short EnableCursor1__loc_241D
seg000:2438 sub_2430        endp
seg000:2438
seg000:243A
seg000:243A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:243A
seg000:243A
seg000:243A sub_243A        proc near               ; CODE XREF: sub_23D6+29p
seg000:243A                                         ; sub_23D6+44p sub_2430+5p
seg000:243A                                         ; sub_243A+9j
seg000:243A                 push    cx
seg000:243B                 push    dx
seg000:243C                 call    sub_2446
seg000:243F                 pop     dx
seg000:2440                 dec     dh
seg000:2442                 pop     cx
seg000:2443                 loop    sub_243A
seg000:2445                 retn
seg000:2445 sub_243A        endp
seg000:2445
seg000:2446
seg000:2446 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2446
seg000:2446
seg000:2446 sub_2446        proc near               ; CODE XREF: sub_23D6+15p
seg000:2446                                         ; sub_243A+2p seg000:27F2p
seg000:2446                 push    dx
seg000:2447                 mov     dl, 3
seg000:2449                 push    ax
seg000:244A                 call    loc_2027
seg000:244D                 pop     ax
seg000:244E                 pop     dx
seg000:244F                 mov     dl, 1
seg000:2451                 mov     cl, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:2455                 jmp     loc_1FEB
seg000:2455 sub_2446        endp
seg000:2455
seg000:2458 ; ---------------------------------------------------------------------------
seg000:2458                 mov     dl, 2           ; Routine called by jump table @ word_2A44
seg000:245A                 jmp     short loc_2462
seg000:245C ; ---------------------------------------------------------------------------
seg000:245C                 sub     dl, dl          ; Routine called by jump table @ word_2A44
seg000:245E                 jmp     short loc_2462
seg000:2460 ; ---------------------------------------------------------------------------
seg000:2460                 mov     dl, 3
seg000:2462
seg000:2462 loc_2462:                               ; CODE XREF: seg000:245Aj
seg000:2462                                         ; seg000:245Ej
seg000:2462                                         ; seg000:2479j
seg000:2462                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2465                 call    j_ROM_DisableCursor
seg000:2468                 and     byte ptr ds:loc_F42+1, 0FDh
seg000:246D                 mov     dh, byte ptr ds:loc_F42
seg000:2471                 call    loc_2027
seg000:2474                 jmp     EnableCursor2__loc_2420
seg000:2477 ; ---------------------------------------------------------------------------
seg000:2477                 mov     dl, 1           ; Routine called by jump table @ word_2A44
seg000:2479                 jmp     short loc_2462
seg000:247B
seg000:247B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:247B
seg000:247B
seg000:247B sub_247B        proc near               ; CODE XREF: seg000:2CB4p
seg000:247B                                         ; seg000:2CC6p
seg000:247B                 mov     byte ptr ds:loc_F40, 0Eh
seg000:2480                 retn
seg000:2480 sub_247B        endp
seg000:2480
seg000:2481
seg000:2481 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2481
seg000:2481
seg000:2481 sub_2481        proc near               ; CODE XREF: seg000:2CCFp
seg000:2481                 and     byte ptr ds:loc_F40, 0FDh
seg000:2486                 retn
seg000:2486 sub_2481        endp
seg000:2486
seg000:2487
seg000:2487 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2487
seg000:2487
seg000:2487 sub_2487        proc near               ; CODE XREF: seg000:2CD8p
seg000:2487                 and     byte ptr ds:loc_F40, 0F7h
seg000:248C                 retn
seg000:248C sub_2487        endp
seg000:248C
seg000:248D
seg000:248D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:248D
seg000:248D
seg000:248D sub_248D        proc near               ; CODE XREF: seg000:2CE1p
seg000:248D                 and     byte ptr ds:loc_F40, 0FBh
seg000:2492                 retn
seg000:2492 sub_248D        endp
seg000:2492
seg000:2493
seg000:2493 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2493
seg000:2493
seg000:2493 sub_2493        proc near               ; CODE XREF: seg000:2CEAp
seg000:2493                 or      byte ptr ds:loc_F40, 1
seg000:2498                 retn
seg000:2498 sub_2493        endp
seg000:2498
seg000:2499 ; ---------------------------------------------------------------------------
seg000:2499 ; START OF FUNCTION CHUNK FOR sub_1D78
seg000:2499
seg000:2499 CURSOR_MAGIC__loc_2499:                 ; CODE XREF: sub_1D78+3Fj
seg000:2499                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2499                                         ; -----------------------------------------
seg000:2499                                         ; Routine called by jump table @ word_2A44
seg000:2499                                         ; -----------------------------------------
seg000:249C                 call    j_ROM_DisableCursor
seg000:249F                 push    es
seg000:24A0                 mov     ax, ds
seg000:24A2                 mov     es, ax
seg000:24A4                 mov     cx, 0Eh
seg000:24A7                 mov     si, 0F38h
seg000:24AA                 mov     di, 0F46h
seg000:24AD                 cld
seg000:24AE                 rep movsb
seg000:24B0                 pop     es
seg000:24B1                 jmp     EnableCursor2__loc_2420
seg000:24B1 ; END OF FUNCTION CHUNK FOR sub_1D78
seg000:24B4 ; ---------------------------------------------------------------------------
seg000:24B4                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:24B4                                         ; -----------------------------------------
seg000:24B4                                         ; Routine called by jump table @ word_2A44
seg000:24B4                                         ; -----------------------------------------
seg000:24B7                 call    j_ROM_DisableCursor
seg000:24BA                 cmp     byte ptr ds:loc_F4F, 0
seg000:24BF                 jnz     short NOT_ZERO__loc_24C9 ;
seg000:24BF                                         ;
seg000:24C1                 mov     word ptr ds:loc_F40+1, 101h
seg000:24C7                 jmp     short loc_24DB
seg000:24C9 ; ---------------------------------------------------------------------------
seg000:24C9
seg000:24C9 NOT_ZERO__loc_24C9:                     ; CODE XREF: seg000:24BFj
seg000:24C9                 push    es
seg000:24CA                 mov     ax, ds
seg000:24CC                 mov     es, ax
seg000:24CE                 mov     cx, 0Eh
seg000:24D1                 mov     si, 0F46h
seg000:24D4                 mov     di, 0F38h
seg000:24D7                 cld
seg000:24D8                 rep movsb
seg000:24DA                 pop     es
seg000:24DB
seg000:24DB loc_24DB:                               ; CODE XREF: seg000:24C7j
seg000:24DB                 call    VIDEORAM__sub_3C53
seg000:24DE                 call    VIDEORAM_TABLE_v3__sub_2136
seg000:24E1                 mov     al, byte ptr ds:loc_F54+3
seg000:24E4                 cmp     al, byte ptr ds:loc_F40+1
seg000:24E8                 jnb     short loc_24ED  ;
seg000:24E8                                         ;
seg000:24EA                 mov     byte ptr ds:loc_F40+1, al
seg000:24ED
seg000:24ED loc_24ED:                               ; CODE XREF: seg000:24E8j
seg000:24ED                 jmp     EnableCursor2__loc_2420
seg000:24F0
seg000:24F0 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:24F0
seg000:24F0
seg000:24F0 LED_WAIT_ON__sub_24F0 proc near         ; CODE XREF: seg000:2C53p
seg000:24F0                 mov     ax, 8113h       ; light WAIT led on keyboard?
seg000:24F3                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:24F6                 or      byte ptr ds:loc_F8F+1, 80h
seg000:24FB                 retn
seg000:24FB LED_WAIT_ON__sub_24F0 endp
seg000:24FB
seg000:24FC
seg000:24FC ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:24FC
seg000:24FC
seg000:24FC CLR_WAIT_LED__sub_24FC proc near        ; CODE XREF: seg000:2C8Dp
seg000:24FC                 mov     ax, 8111h       ; clear WAIT led on keyboard?
seg000:24FF                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:2502                 and     byte ptr ds:loc_F8F+1, 7Fh
seg000:2507                 retn
seg000:2507 CLR_WAIT_LED__sub_24FC endp
seg000:2507
seg000:2508
seg000:2508 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2508
seg000:2508
seg000:2508 SET_132__sub_2508 proc near             ; CODE XREF: seg000:2D12p
seg000:2508                 call    j_ROM_DisableCursor
seg000:250B                 or      byte ptr es:loc_86, 1 ; 80 / 132 column mode ?
seg000:2511
seg000:2511 loc_2511:                               ; CODE XREF: SET_SCREEN_WIDTH_80__sub_2544+9j
seg000:2511                 call    sub_2517
seg000:2514                 jmp     j_ROM_EnableCursor
seg000:2514 SET_132__sub_2508 endp
seg000:2514
seg000:2517
seg000:2517 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2517
seg000:2517
seg000:2517 sub_2517        proc near               ; CODE XREF: sub_66j
seg000:2517                                         ; SET_132__sub_2508:loc_2511p
seg000:2517                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:251A                 or      byte ptr ds:loc_1EF5, 10h
seg000:251F                 mov     al, 0Eh
seg000:2521                 mov     word ptr ds:j_SHORT_SELFTEST__loc_150+1, 6
seg000:2527                 call    sub_1C23
seg000:252A                 mov     al, byte ptr ds:loc_F40
seg000:252D                 push    ax
seg000:252E                 call    sub_1C72
seg000:2531                 pop     ax
seg000:2532                 mov     byte ptr ds:loc_F40, al
seg000:2535                 call    j_SETUP_VIDEO_HW__sub_1AF0
seg000:2538                 call    INIT_VIDEORAM_18_BYTES__loc_1CCF ; INITIALIZE VIDEO RAM ($ee000)
seg000:253B                 call    sub_1D4E        ; -internal- housekeeping
seg000:253E                 mov     byte ptr ds:loc_1EF5, 0
seg000:2543                 retn
seg000:2543 sub_2517        endp
seg000:2543
seg000:2544
seg000:2544 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2544
seg000:2544
seg000:2544 SET_SCREEN_WIDTH_80__sub_2544 proc near ; CODE XREF: seg000:2D82p
seg000:2544                 call    j_ROM_DisableCursor
seg000:2547                 and     byte ptr es:loc_86, 0FEh ; 0x86 : SCREEN WIDTH (0=80 / 1=132)
seg000:254D                 jmp     short loc_2511
seg000:254D SET_SCREEN_WIDTH_80__sub_2544 endp
seg000:254D
seg000:254F
seg000:254F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:254F
seg000:254F
seg000:254F AUTO_REPEAT_ON__sub_254F proc near      ; CODE XREF: seg000:2D3Fp
seg000:254F                 or      byte ptr es:loc_89, 1 ; 0x89 : AUTO RPT (0=OFF 1=ON)
seg000:2555                 retn
seg000:2555 AUTO_REPEAT_ON__sub_254F endp
seg000:2555
seg000:2556
seg000:2556 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2556
seg000:2556
seg000:2556 AUTO_REPEAT_OFF__sub_2556 proc near     ; CODE XREF: seg000:2DAFp
seg000:2556                 and     byte ptr es:loc_89, 0FEh ; 0x89 : AUTO RPT (0=OFF 1=ON)
seg000:255C                 retn
seg000:255C AUTO_REPEAT_OFF__sub_2556 endp
seg000:255C
seg000:255D
seg000:255D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:255D
seg000:255D
seg000:255D sub_255D        proc near               ; CODE XREF: sub_69j
seg000:255D                 mov     bl, byte ptr ds:loc_F40+1
seg000:2561                 call    sub_2567
seg000:2564                 jmp     loc_4E
seg000:2564 sub_255D        endp
seg000:2564
seg000:2567
seg000:2567 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2567
seg000:2567
seg000:2567 sub_2567        proc near               ; CODE XREF: sub_255D+4p
seg000:2567                 sub     bh, bh
seg000:2569                 dec     bx
seg000:256A                 or      byte ptr es:[bx+0], 1
seg000:2570                 retn
seg000:2570 sub_2567        endp
seg000:2570
seg000:2571 ; ---------------------------------------------------------------------------
seg000:2571
seg000:2571 loc_2571:                               ; CODE XREF: seg000:loc_2BCEj
seg000:2571                 mov     bl, byte ptr ds:loc_F40+1
seg000:2575                 call    sub_257B
seg000:2578                 jmp     loc_4E
seg000:257B
seg000:257B ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:257B
seg000:257B
seg000:257B sub_257B        proc near               ; CODE XREF: seg000:2575p
seg000:257B                 sub     bh, bh
seg000:257D                 dec     bx
seg000:257E                 and     byte ptr es:[bx+0], 0FEh
seg000:2584                 retn
seg000:2584 sub_257B        endp
seg000:2584
seg000:2585 ; ---------------------------------------------------------------------------
seg000:2585
seg000:2585 loc_2585:                               ; CODE XREF: seg000:2BD5j
seg000:2585                 mov     cx, 84h ; 'ä'
seg000:2588                 mov     si, 0
seg000:258B                 sub     al, al
seg000:258D
seg000:258D loc_258D:                               ; CODE XREF: seg000:2592j
seg000:258D                 and     byte ptr es:[si], 0FEh
seg000:2591                 inc     si
seg000:2592                 loop    loc_258D
seg000:2594                 jmp     loc_4E
seg000:2597 ; ---------------------------------------------------------------------------
seg000:2597 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:2597
seg000:2597 loc_2597:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2597                                         ; seg000:loc_2BE4j
seg000:2597                 call    IS_TERMINALMODE__sub_2618 ; Routine called by jump table @ word_2A44
seg000:2597                                         ;
seg000:259A                 jz      short loc_25A6  ;
seg000:259A                                         ;
seg000:259C                 test    byte ptr ds:loc_1EF7+1, 8
seg000:25A1                 jz      short loc_25A6  ;
seg000:25A1                                         ;
seg000:25A3                 call    near ptr 803Fh
seg000:25A6
seg000:25A6 loc_25A6:                               ; CODE XREF: sub_28C9-32Fj
seg000:25A6                                         ; sub_28C9-328j
seg000:25A6                 jmp     loc_4E
seg000:25A9 ; ---------------------------------------------------------------------------
seg000:25A9
seg000:25A9 loc_25A9:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:25A9                                         ; seg000:2C25j
seg000:25A9                 call    IS_TERMINALMODE__sub_2618 ; Routine called by jump table @ word_2A44
seg000:25A9                                         ;
seg000:25AC                 jz      short loc_25C1  ;
seg000:25AC                                         ;
seg000:25AE                 test    byte ptr ds:loc_1EF7+1, 8
seg000:25B3                 jz      short loc_25C1  ;
seg000:25B3                                         ;
seg000:25B5                 mov     dh, byte ptr ds:loc_F42
seg000:25B9                 call    near ptr 8042h  ; FC042 - PARAMETER: DH ?
seg000:25B9                                         ;
seg000:25BC                 mov     al, 0Ah
seg000:25BE                 call    near ptr 8045h  ; FC045 - * SEND BYTE TO PRINTER PORT *  ( PARAMETER: AL )
seg000:25C1
seg000:25C1 loc_25C1:                               ; CODE XREF: sub_28C9-31Dj
seg000:25C1                                         ; sub_28C9-316j
seg000:25C1                 jmp     loc_4E
seg000:25C4 ; ---------------------------------------------------------------------------
seg000:25C4
seg000:25C4 loc_25C4:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:25C4                                         ; seg000:2C2Cj
seg000:25C4                 mov     byte ptr ds:loc_ED4+2, 0 ; Routine called by jump table @ word_2A44
seg000:25C4                                         ;
seg000:25C9                 jmp     loc_4E
seg000:25CC ; ---------------------------------------------------------------------------
seg000:25CC
seg000:25CC loc_25CC:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:25CC                                         ; seg000:2C33j
seg000:25CC                 call    IS_TERMINALMODE__sub_2618 ; Routine called by jump table @ word_2A44
seg000:25CC                                         ;
seg000:25CF                 jz      short loc_25DD
seg000:25D1                 test    byte ptr ds:loc_1EF7+1, 8
seg000:25D6                 jz      short loc_25DD
seg000:25D8                 mov     byte ptr ds:loc_ED4+2, 0FFh
seg000:25DD
seg000:25DD loc_25DD:                               ; CODE XREF: sub_28C9-2FAj
seg000:25DD                                         ; sub_28C9-2F3j
seg000:25DD                 jmp     loc_4E
seg000:25DD ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:25E0
seg000:25E0 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:25E0
seg000:25E0
seg000:25E0 sub_25E0        proc near               ; CODE XREF: seg000:2D48p
seg000:25E0                 or      byte ptr es:loc_91+1, 1
seg000:25E6                 retn
seg000:25E6 sub_25E0        endp
seg000:25E6
seg000:25E7
seg000:25E7 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:25E7
seg000:25E7
seg000:25E7 sub_25E7        proc near               ; CODE XREF: seg000:2DB8p
seg000:25E7                 and     byte ptr es:loc_91+1, 0FEh
seg000:25ED                 retn
seg000:25ED sub_25E7        endp
seg000:25ED
seg000:25EE
seg000:25EE ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:25EE
seg000:25EE
seg000:25EE sub_25EE        proc near               ; CODE XREF: seg000:2D51p
seg000:25EE                 or      byte ptr es:loc_93, 1
seg000:25F4                 retn
seg000:25F4 sub_25EE        endp
seg000:25F4
seg000:25F5
seg000:25F5 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:25F5
seg000:25F5
seg000:25F5 sub_25F5        proc near               ; CODE XREF: seg000:2DC1p
seg000:25F5                 and     byte ptr es:loc_93, 0FEh
seg000:25FB                 retn
seg000:25FB sub_25F5        endp
seg000:25FB
seg000:25FC ; ---------------------------------------------------------------------------
seg000:25FC ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:25FC
seg000:25FC loc_25FC:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:25FC                                         ; seg000:2BEBj
seg000:25FC                 mov     byte ptr ds:loc_F54, 0 ; Routine called by jump table @ word_2A44
seg000:25FC                                         ;
seg000:2601                 jmp     loc_4E
seg000:2604 ; ---------------------------------------------------------------------------
seg000:2604
seg000:2604 loc_2604:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2604                                         ; seg000:2BF2j
seg000:2604                 call    IS_TERMINALMODE__sub_2618 ; Routine called by jump table @ word_2A44
seg000:2604                                         ;
seg000:2607                 jz      short loc_2615
seg000:2609                 test    byte ptr ds:loc_1EF7+1, 8
seg000:260E                 jz      short loc_2615
seg000:2610                 mov     byte ptr ds:loc_F54, 0FFh
seg000:2615
seg000:2615 loc_2615:                               ; CODE XREF: sub_28C9-2C2j
seg000:2615                                         ; sub_28C9-2BBj
seg000:2615                 jmp     loc_4E
seg000:2615 ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:2618
seg000:2618 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2618
seg000:2618
seg000:2618 IS_TERMINALMODE__sub_2618 proc near     ; CODE XREF: sub_28C9:loc_2597p
seg000:2618                                         ; sub_28C9:loc_25A9p
seg000:2618                                         ; sub_28C9:loc_25CCp
seg000:2618                                         ; sub_28C9:loc_2604p
seg000:2618                 test    word ptr ds:loc_1FFE, 1
seg000:261E                 retn
seg000:261E IS_TERMINALMODE__sub_2618 endp
seg000:261E
seg000:261F
seg000:261F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:261F
seg000:261F
seg000:261F ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F proc near ; CODE XREF: sub_1D78+16p
seg000:261F                                         ; SET_VT52_EMULATION__sub_22C9+6j
seg000:261F                                         ; sub_28C9-5E1p
seg000:261F                                         ; sub_28C9:loc_2689p
seg000:261F                 mov     ax, 0
seg000:2622                 test    byte ptr es:loc_8E+1, 1 ; check NVRAM variable: 0x8f DEFAULT CHAR SET (0=USASCII 1=UK)
seg000:2622                                         ;
seg000:2628                 jz      short loc_262D  ; Difference is the number sign (#) or the sterling symbol (£).
seg000:262A                 mov     ax, 1           ; US: uppercase 3 displays # (else sterling symbol).
seg000:262A                                         ; (from the VT-180 manual, 2-22)
seg000:262D
seg000:262D loc_262D:                               ; CODE XREF: ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F+9j
seg000:262D                 mov     byte ptr ds:loc_F38+1, al
seg000:2630                 mov     byte ptr ds:loc_F3A, al
seg000:2633                 shl     ax, 1
seg000:2635                 mov     word ptr ds:loc_F3D+1, ax
seg000:2638                 mov     word ptr ds:loc_F3A+2, ax
seg000:263B                 mov     byte ptr ds:loc_F3A+1, 0
seg000:2640                 retn
seg000:2640 ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F endp
seg000:2640
seg000:2641 ; ---------------------------------------------------------------------------
seg000:2641                 mov     al, 2           ; Routine called by jump table @ word_2A44
seg000:2641                                         ;
seg000:2643                 jmp     short loc_264E
seg000:2645 ; ---------------------------------------------------------------------------
seg000:2645                 jmp     loc_4E          ; Routine called by jump table @ word_2A44
seg000:2648 ; ---------------------------------------------------------------------------
seg000:2648                 mov     al, 1           ; Routine called by jump table @ word_2A44
seg000:264A                 jmp     short loc_264E
seg000:264C ; ---------------------------------------------------------------------------
seg000:264C                 mov     al, 0           ; Routine called by jump table @ word_2A44
seg000:264E
seg000:264E loc_264E:                               ; CODE XREF: seg000:2643j
seg000:264E                                         ; seg000:264Aj
seg000:264E                 mov     byte ptr ds:loc_F38+1, al
seg000:2651                 cmp     byte ptr ds:loc_F3A+1, 0
seg000:2656                 jz      short loc_2672
seg000:2658                 jmp     loc_4E
seg000:265B ; ---------------------------------------------------------------------------
seg000:265B                 mov     al, 2           ; Routine called by jump table @ word_2A44
seg000:265D                 jmp     short loc_2668
seg000:265F ; ---------------------------------------------------------------------------
seg000:265F                 jmp     loc_4E          ; Routine called by jump table @ word_2A44
seg000:2662 ; ---------------------------------------------------------------------------
seg000:2662                 mov     al, 1           ; Routine called by jump table @ word_2A44
seg000:2664                 jmp     short loc_2668
seg000:2666 ; ---------------------------------------------------------------------------
seg000:2666                 mov     al, 0           ; Routine called by jump table @ word_2A44
seg000:2668
seg000:2668 loc_2668:                               ; CODE XREF: seg000:265Dj
seg000:2668                                         ; seg000:2664j
seg000:2668                 mov     byte ptr ds:loc_F3A, al
seg000:266B                 cmp     byte ptr ds:loc_F3A+1, 0FFh
seg000:2670                 jnz     short loc_267C
seg000:2672 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:2672
seg000:2672 loc_2672:                               ; CODE XREF: seg000:2656j
seg000:2672                                         ; sub_28C9-242j
seg000:2672                 sub     ah, ah
seg000:2674                 shl     ax, 1
seg000:2676                 mov     word ptr ds:loc_F3D+1, ax
seg000:2679                 mov     word ptr ds:loc_F3A+2, ax
seg000:267C
seg000:267C loc_267C:                               ; CODE XREF: seg000:2670j
seg000:267C                 jmp     loc_4E
seg000:267F ; ---------------------------------------------------------------------------
seg000:267F
seg000:267F loc_267F:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:267F                 mov     al, 2           ; Routine called by jump table @ word_2A44
seg000:267F                                         ;
seg000:2681                 mov     byte ptr ds:loc_F38+1, al
seg000:2684                 mov     byte ptr ds:loc_F3A, al
seg000:2687                 jmp     short loc_2672
seg000:2689 ; ---------------------------------------------------------------------------
seg000:2689
seg000:2689 loc_2689:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2689                 call    ASK_CHARSET_USUK_NVM_8f_SET_DS_f3xx_sub_261F ; Routine called by jump table @ word_2A44
seg000:2689                                         ;
seg000:268C                 jmp     loc_4E
seg000:268C ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:268F
seg000:268F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:268F
seg000:268F
seg000:268F sub_268F        proc near               ; CODE XREF: seg000:26B3p
seg000:268F                                         ; seg000:26CEp
seg000:268F                                         ; seg000:26DBp
seg000:268F                                         ; sub_28C9-1E4p
seg000:268F                                         ; seg000:26F2p
seg000:268F                 mov     si, 26A1h
seg000:2692                 mov     di, 0FD1h
seg000:2695                 mov     ax, ds
seg000:2697                 mov     bx, cs
seg000:2699                 mov     ds, bx
seg000:269B                 mov     es, ax
seg000:269D                 assume es:nothing
seg000:269D                 cld
seg000:269E                 rep movsb
seg000:26A0                 retn
seg000:26A0 sub_268F        endp
seg000:26A0
seg000:26A0 ; ---------------------------------------------------------------------------
seg000:26A1 ESC_x6          db 1Bh,'[?6'            ; ESC[?6
seg000:26A5 ; ---------------------------------------------------------------------------
seg000:26A5                 test    word ptr ds:loc_1FFE, 1 ; Routine called by jump table @ word_2A44
seg000:26AB                 jnz     short loc_26B0
seg000:26AD                 jmp     loc_4E
seg000:26B0 ; ---------------------------------------------------------------------------
seg000:26B0
seg000:26B0 loc_26B0:                               ; CODE XREF: seg000:26ABj
seg000:26B0                 mov     cx, 3
seg000:26B3                 call    sub_268F
seg000:26B6                 mov     al, 31h ; '1'
seg000:26B8                 stosb
seg000:26B9                 mov     al, 33h ; '3'
seg000:26BB                 mov     bl, es:1EF8h
seg000:26C0                 mov     cl, 3
seg000:26C2                 shr     bl, cl
seg000:26C4                 and     bl, 3
seg000:26C7                 sub     al, bl
seg000:26C9                 jmp     short loc_26D3
seg000:26CB ; ---------------------------------------------------------------------------
seg000:26CB
seg000:26CB loc_26CB:                               ; CODE XREF: seg000:2C08j
seg000:26CB                 mov     cx, 2
seg000:26CE                 call    sub_268F
seg000:26D1                 mov     al, 30h ; '0'
seg000:26D3
seg000:26D3 loc_26D3:                               ; CODE XREF: seg000:26C9j
seg000:26D3                 stosb
seg000:26D4                 mov     al, 6Eh ; 'n'
seg000:26D6                 jmp     short loc_274D
seg000:26D8 ; ---------------------------------------------------------------------------
seg000:26D8                 mov     cx, 4           ; Routine called by jump table @ word_2A44
seg000:26D8                                         ;
seg000:26DB                 call    sub_268F
seg000:26DE                 mov     al, 63h ; 'c'
seg000:26E0                 jmp     short loc_274D
seg000:26E2 ; ---------------------------------------------------------------------------
seg000:26E2 ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:26E2
seg000:26E2 loc_26E2:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:26E2                 mov     cx, 1           ; Routine called by jump table @ word_2A44
seg000:26E2                                         ;
seg000:26E5                 call    sub_268F
seg000:26E8                 mov     al, 2Fh ; '/'
seg000:26EA                 stosb
seg000:26EB                 mov     al, 5Ah ; 'Z'
seg000:26ED                 jmp     short loc_274D
seg000:26ED ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:26EF ; ---------------------------------------------------------------------------
seg000:26EF
seg000:26EF loc_26EF:                               ; CODE XREF: seg000:2C0Fj
seg000:26EF                 mov     cx, 2
seg000:26F2                 call    sub_268F
seg000:26F5                 mov     bl, es:0F42h
seg000:26FA                 test    byte ptr es:0F44h, 1 ; [ RELOCATED VECTORS EE00:0F44h ] : test bit 0
seg000:2700                 jz      short loc_270B
seg000:2702                 inc     bl
seg000:2704                 sub     bl, es:0F58h
seg000:2709                 jb      short loc_270E
seg000:270B
seg000:270B loc_270B:                               ; CODE XREF: seg000:2700j
seg000:270B                 call    sub_271D
seg000:270E
seg000:270E loc_270E:                               ; CODE XREF: seg000:2709j
seg000:270E                 mov     al, 3Bh ; ';'
seg000:2710                 stosb
seg000:2711                 mov     bl, es:0F41h
seg000:2716                 call    sub_271D
seg000:2719                 mov     al, 52h ; 'R'
seg000:271B                 jmp     short loc_274D
seg000:271D
seg000:271D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:271D
seg000:271D
seg000:271D sub_271D        proc near               ; CODE XREF: seg000:loc_270Bp
seg000:271D                                         ; seg000:2716p
seg000:271D                 xor     bh, bh
seg000:271F                 mov     cx, 64h ; 'd'
seg000:2722                 sub     bx, cx
seg000:2724                 js      short loc_272B
seg000:2726                 mov     al, 31h ; '1'
seg000:2728                 stosb
seg000:2729                 jmp     short loc_272D
seg000:272B ; ---------------------------------------------------------------------------
seg000:272B
seg000:272B loc_272B:                               ; CODE XREF: sub_271D+7j
seg000:272B                 add     bx, cx
seg000:272D
seg000:272D loc_272D:                               ; CODE XREF: sub_271D+Cj
seg000:272D                 xor     dl, dl
seg000:272F                 mov     cx, 0Ah
seg000:2732
seg000:2732 loc_2732:                               ; CODE XREF: sub_271D+1Dj
seg000:2732                 sub     bx, cx
seg000:2734                 jz      short loc_2740
seg000:2736                 js      short loc_273C
seg000:2738                 inc     dl
seg000:273A                 jmp     short loc_2732
seg000:273C ; ---------------------------------------------------------------------------
seg000:273C
seg000:273C loc_273C:                               ; CODE XREF: sub_271D+19j
seg000:273C                 add     bx, cx
seg000:273E                 jmp     short loc_2742
seg000:2740 ; ---------------------------------------------------------------------------
seg000:2740
seg000:2740 loc_2740:                               ; CODE XREF: sub_271D+17j
seg000:2740                 inc     dl
seg000:2742
seg000:2742 loc_2742:                               ; CODE XREF: sub_271D+21j
seg000:2742                 mov     al, 30h ; '0'
seg000:2744                 add     al, dl
seg000:2746                 stosb
seg000:2747                 sub     al, dl
seg000:2749                 add     al, bl
seg000:274B                 stosb
seg000:274C                 retn
seg000:274C sub_271D        endp
seg000:274C
seg000:274D ; ---------------------------------------------------------------------------
seg000:274D ; START OF FUNCTION CHUNK FOR sub_28C9
seg000:274D
seg000:274D loc_274D:                               ; CODE XREF: seg000:26D6j
seg000:274D                                         ; seg000:26E0j
seg000:274D                                         ; sub_28C9-1DCj
seg000:274D                                         ; seg000:271Bj
seg000:274D                 stosb
seg000:274E                 mov     bx, 0ED00h
seg000:2751                 mov     es, bx
seg000:2753                 mov     bx, 0EE00h
seg000:2756                 mov     ds, bx
seg000:2758                 assume ds:nothing
seg000:2758                 sub     di, 0FD1h
seg000:275C                 mov     ax, di
seg000:275E                 mov     ds:0FD0h, al
seg000:2761                 mov     ds:0FCFh, al
seg000:2764                 or      byte ptr ds:1EF8h, 20h
seg000:2769                 jmp     loc_4E
seg000:2769 ; END OF FUNCTION CHUNK FOR sub_28C9
seg000:276C ; ---------------------------------------------------------------------------
seg000:276C                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:276C                                         ; ----------------------------------------
seg000:276C                                         ; Routine called by jump table @ word_2A44
seg000:276C                                         ; ----------------------------------------
seg000:276F                 call    sub_2B4E
seg000:2772                 jnz     short loc_277C
seg000:2774                 cmp     al, 0FFh
seg000:2776                 jz      short loc_27DC
seg000:2778                 or      al, al
seg000:277A                 jnz     short loc_277E
seg000:277C
seg000:277C loc_277C:                               ; CODE XREF: seg000:2772j
seg000:277C                 mov     al, 1
seg000:277E
seg000:277E loc_277E:                               ; CODE XREF: seg000:277Aj
seg000:277E                 mov     bx, ds:0ED8h
seg000:2782                 mov     di, bx
seg000:2784                 mov     cl, ds:0F57h
seg000:2788                 sub     cl, ds:0F41h
seg000:278C                 inc     cl
seg000:278E                 sub     ch, ch
seg000:2790                 add     bx, cx
seg000:2792                 call    j_ROM_DisableCursor
seg000:2795                 mov     dl, [bx+0FFFh]
seg000:2799                 cmp     cl, al
seg000:279B                 ja      short loc_279F
seg000:279D                 mov     al, cl
seg000:279F
seg000:279F loc_279F:                               ; CODE XREF: seg000:279Bj
seg000:279F                 mov     ah, ch
seg000:27A1                 mov     bp, ax
seg000:27A3                 sub     cl, al
seg000:27A5                 add     ax, di
seg000:27A7                 mov     si, ax
seg000:27A9                 push    di
seg000:27AA                 push    si
seg000:27AB                 push    cx
seg000:27AC                 mov     bx, ds
seg000:27AE                 mov     es, bx
seg000:27B0                 assume es:nothing
seg000:27B0                 cld
seg000:27B1                 rep movsb
seg000:27B3                 pop     cx
seg000:27B4                 pop     si
seg000:27B5                 pop     di
seg000:27B6                 mov     bx, 1000h
seg000:27B9                 add     di, bx
seg000:27BB                 add     si, bx
seg000:27BD                 rep movsb
seg000:27BF                 mov     cx, bp
seg000:27C1                 push    di
seg000:27C2                 push    cx
seg000:27C3                 mov     al, dl
seg000:27C5                 rep stosb
seg000:27C7                 pop     cx
seg000:27C8                 pop     di
seg000:27C9                 sub     di, bx
seg000:27CB                 mov     al, 20h ; ' '
seg000:27CD                 rep stosb
seg000:27CF                 mov     dx, 0ED00h
seg000:27D2                 mov     es, dx
seg000:27D4                 assume es:nothing
seg000:27D4                 and     byte ptr ds:0F43h, 0FDh
seg000:27D9                 call    j_ROM_EnableCursor
seg000:27DC
seg000:27DC loc_27DC:                               ; CODE XREF: seg000:2776j
seg000:27DC                 jmp     loc_4E
seg000:27DF ; ---------------------------------------------------------------------------
seg000:27DF                 call    sub_2819        ; Routine called by jump table @ word_2A44
seg000:27E2                 jb      short loc_2816
seg000:27E4                 cmp     ds:0F42h, dl
seg000:27E8                 jb      short loc_27F7
seg000:27EA
seg000:27EA loc_27EA:                               ; CODE XREF: seg000:285Cj
seg000:27EA                 mov     dh, ds:0F42h
seg000:27EE                 mov     ah, 0Eh
seg000:27F0                 sub     al, al
seg000:27F2                 call    sub_2446
seg000:27F5                 jmp     short loc_2811
seg000:27F7 ; ---------------------------------------------------------------------------
seg000:27F7
seg000:27F7 loc_27F7:                               ; CODE XREF: seg000:27E8j
seg000:27F7                 push    dx
seg000:27F8                 mov     dh, ds:0F42h
seg000:27FC                 push    ax
seg000:27FD                 call    sub_2293
seg000:2800                 pop     cx
seg000:2801                 xor     ch, ch
seg000:2803
seg000:2803 loc_2803:                               ; CODE XREF: seg000:280Bj
seg000:2803                 push    cx
seg000:2804                 call    sub_3A72
seg000:2807                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:280A                 pop     cx
seg000:280B                 loop    loc_2803
seg000:280D
seg000:280D loc_280D:                               ; CODE XREF: seg000:288Aj
seg000:280D                 pop     dx
seg000:280E                 call    sub_2293
seg000:2811
seg000:2811 loc_2811:                               ; CODE XREF: seg000:27F5j
seg000:2811                 mov     byte ptr ds:0F41h, 1
seg000:2816
seg000:2816 loc_2816:                               ; CODE XREF: seg000:27E2j
seg000:2816                                         ; seg000:2856j
seg000:2816                 jmp     EnableCursor2__loc_2420
seg000:2819
seg000:2819 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2819
seg000:2819
seg000:2819 sub_2819        proc near               ; CODE XREF: seg000:27DFp
seg000:2819                                         ; seg000:2853p
seg000:2819                 call    sub_284D
seg000:281C                 call    sub_2B4E
seg000:281F                 jnz     short loc_2825
seg000:2821                 or      al, al
seg000:2823                 jnz     short loc_2827
seg000:2825
seg000:2825 loc_2825:                               ; CODE XREF: sub_2819+6j
seg000:2825                 mov     al, 1
seg000:2827
seg000:2827 loc_2827:                               ; CODE XREF: sub_2819+Aj
seg000:2827                 cmp     al, 0FFh
seg000:2829                 jz      short loc_284B
seg000:282B                 mov     dh, ds:0F58h
seg000:282F                 mov     dl, ds:0F59h
seg000:2833                 mov     cl, dl
seg000:2835                 sub     cl, ds:0F42h
seg000:2839                 jb      short loc_284B
seg000:283B                 inc     cl
seg000:283D                 cmp     al, cl
seg000:283F                 jbe     short loc_2843
seg000:2841                 mov     al, cl
seg000:2843
seg000:2843 loc_2843:                               ; CODE XREF: sub_2819+26j
seg000:2843                 cmp     ds:0F42h, dh
seg000:2847                 jb      short loc_284B
seg000:2849                 clc
seg000:284A                 retn
seg000:284B ; ---------------------------------------------------------------------------
seg000:284B
seg000:284B loc_284B:                               ; CODE XREF: sub_2819+10j
seg000:284B                                         ; sub_2819+20j
seg000:284B                                         ; sub_2819+2Ej
seg000:284B                 stc
seg000:284C                 retn
seg000:284C sub_2819        endp
seg000:284C
seg000:284D
seg000:284D ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:284D
seg000:284D
seg000:284D sub_284D        proc near               ; CODE XREF: sub_2819p
seg000:284D                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2850                 jmp     j_ROM_DisableCursor
seg000:2850 sub_284D        endp
seg000:2850
seg000:2853 ; ---------------------------------------------------------------------------
seg000:2853                 call    sub_2819        ; Routine called by jump table @ word_2A44
seg000:2856                 jb      short loc_2816
seg000:2858                 cmp     ds:0F42h, dl
seg000:285C                 jnb     short loc_27EA
seg000:285E                 push    dx
seg000:285F                 mov     dh, ds:0F42h
seg000:2863                 push    ax
seg000:2864                 call    sub_2293
seg000:2867                 mov     dh, ds:0F42h
seg000:286B                 mov     dl, ds:0F41h
seg000:286F                 push    dx
seg000:2870                 mov     dh, ds:0F59h
seg000:2874                 call    sub_20FE
seg000:2877                 pop     dx
seg000:2878                 pop     cx
seg000:2879                 push    dx
seg000:287A                 xor     ch, ch
seg000:287C
seg000:287C loc_287C:                               ; CODE XREF: seg000:2884j
seg000:287C                 push    cx
seg000:287D                 call    SCROLL__sub_3A40
seg000:2880                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:2883                 pop     cx
seg000:2884                 loop    loc_287C
seg000:2886                 pop     dx
seg000:2887                 call    sub_20FE
seg000:288A                 jmp     short loc_280D
seg000:288C ; ---------------------------------------------------------------------------
seg000:288C                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:288C                                         ; -----------------------------------------
seg000:288C                                         ; Routine called by jump table @ word_2A44
seg000:288C                                         ; -----------------------------------------
seg000:288F                 call    sub_224F
seg000:2892                 call    j_ROM_DisableCursor
seg000:2895                 mov     ah, 0Eh
seg000:2897                 mov     al, 45h ; 'E'
seg000:2899                 call    sub_2430
seg000:289C                 jmp     loc_4E
seg000:289F ; ---------------------------------------------------------------------------
seg000:289F                 call    near ptr 8033h  ; NVM ?
seg000:289F                                         ; -----------------------------------------
seg000:289F                                         ; Routine called by jump table @ word_2A44
seg000:289F                                         ; -----------------------------------------
seg000:28A2                 jmp     loc_4E
seg000:28A5 ; ---------------------------------------------------------------------------
seg000:28A5                 jmp     loc_4E          ; Routine called by jump table @ word_2A44
seg000:28A8
seg000:28A8 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:28A8
seg000:28A8
seg000:28A8 SET_EMULATION_FROM_NVM__sub_28A8 proc near ; CODE XREF: j_TERMINAL__sub_28A8j
seg000:28A8                                         ; sub_28C9:loc_2917j
seg000:28A8                 or      byte ptr ds:0F2Fh, 80h ;
seg000:28A8                                         ; Routine called by jump table @ word_2A44
seg000:28A8                                         ; - SETS  ds:0EDCh -
seg000:28A8                                         ;
seg000:28AD                 test    byte ptr es:88h, 1 ; 0x88 :EMULATION (0=VT52 1=ANSI)
seg000:28B3                 jnz     short loc_28BC  ;
seg000:28B3                                         ;
seg000:28B5                 mov     word ptr ds:0EDCh, 291Ch ; VT52
seg000:28BB                 retn
seg000:28BC ; ---------------------------------------------------------------------------
seg000:28BC
seg000:28BC loc_28BC:                               ; CODE XREF: SET_EMULATION_FROM_NVM__sub_28A8+Bj
seg000:28BC                 mov     word ptr ds:0EDCh, 295Fh ; ANSI
seg000:28C2                 retn
seg000:28C2 SET_EMULATION_FROM_NVM__sub_28A8 endp
seg000:28C2
seg000:28C3 ; ---------------------------------------------------------------------------
seg000:28C3 ; START OF FUNCTION CHUNK FOR sub_1D78
seg000:28C3
seg000:28C3 loc_28C3:                               ; CODE XREF: sub_1D78:loc_4Ej
seg000:28C3                                         ; sub_28C9:loc_2917j
seg000:28C3                 and     byte ptr ds:0F2Fh, 7Fh ; Routine called by jump table @ word_2A44
seg000:28C8                 retn
seg000:28C8 ; END OF FUNCTION CHUNK FOR sub_1D78
seg000:28C9
seg000:28C9 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:28C9
seg000:28C9
seg000:28C9 sub_28C9        proc near               ; CODE XREF: sub_54j
seg000:28C9
seg000:28C9 ; FUNCTION CHUNK AT seg000:0057 SIZE 00000003 BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:20F2 SIZE 0000000C BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:2157 SIZE 000000C6 BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:223B SIZE 00000014 BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:22E2 SIZE 0000001C BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:237F SIZE 00000006 BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:23D0 SIZE 00000006 BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:2597 SIZE 00000049 BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:25FC SIZE 0000001C BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:2672 SIZE 0000001D BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:26E2 SIZE 0000000D BYTES
seg000:28C9 ; FUNCTION CHUNK AT seg000:274D SIZE 0000001F BYTES
seg000:28C9
seg000:28C9                 and     al, 7Fh
seg000:28CB                 mov     bx, ds:0EDCh
seg000:28CF                 jmp     loc_28D3
seg000:28D2 ; ---------------------------------------------------------------------------
seg000:28D2
seg000:28D2 loc_28D2:                               ; CODE XREF: sub_28C9+1Aj
seg000:28D2                                         ; sub_28C9+1Dj
seg000:28D2                 inc     bx
seg000:28D3
seg000:28D3 loc_28D3:                               ; CODE XREF: sub_28C9+6j
seg000:28D3                 cmp     byte ptr cs:[bx], 0
seg000:28D7                 jz      short loc_28E8
seg000:28D9                 cmp     cs:[bx], al
seg000:28DC                 jz      short loc_28F8
seg000:28DE                 inc     bx
seg000:28DF                 test    byte ptr cs:[bx], 80h
seg000:28E3                 jz      short loc_28D2
seg000:28E5                 inc     bx
seg000:28E6                 jmp     short loc_28D2
seg000:28E8 ; ---------------------------------------------------------------------------
seg000:28E8
seg000:28E8 loc_28E8:                               ; CODE XREF: sub_28C9+Ej
seg000:28E8                                         ; sub_28C9+2Aj
seg000:28E8                                         ; sub_28C9+2Dj
seg000:28E8                 inc     bx
seg000:28E9                 cmp     al, cs:[bx]
seg000:28EC                 jbe     short loc_28F8
seg000:28EE                 inc     bx
seg000:28EF                 test    byte ptr cs:[bx], 80h
seg000:28F3                 jz      short loc_28E8
seg000:28F5                 inc     bx
seg000:28F6                 jmp     short loc_28E8
seg000:28F8 ; ---------------------------------------------------------------------------
seg000:28F8
seg000:28F8 loc_28F8:                               ; CODE XREF: sub_28C9+13j
seg000:28F8                                         ; sub_28C9+23j
seg000:28F8                 sub     ch, ch
seg000:28FA                 mov     cl, cs:[bx+1]
seg000:28FE                 add     cl, cl
seg000:2900                 mov     si, cx
seg000:2902                 jnb     short loc_2917
seg000:2904                 mov     cl, cs:[bx+2]
seg000:2908                 sub     ch, ch
seg000:290A                 shl     cx, 1
seg000:290C                 mov     di, cx
seg000:290E                 mov     dx, cs:[di+2A33h]
seg000:2913                 mov     ds:0EDCh, dx
seg000:2917
seg000:2917 loc_2917:                               ; CODE XREF: sub_28C9+39j
seg000:2917                 jmp     cs:word_2A44[si] ; SEE JUMP TABLE
seg000:2917 ; ---------------------------------------------------------------------------
seg000:291C                 db  1Bh                 ; Neither 8086 code nor a jump table. - UNKNOWN PATTERN -
seg000:291D                 db    2
seg000:291E                 db  3Ch ; <
seg000:291F                 db  0Ah
seg000:2920                 db  3Dh ; =
seg000:2921                 db    8
seg000:2922                 db  3Eh ; >
seg000:2923                 db    9
seg000:2924                 db  41h ; A
seg000:2925                 db  0Bh
seg000:2926                 db  42h ; B
seg000:2927                 db  0Ch
seg000:2928                 db  43h ; C
seg000:2929                 db  0Dh
seg000:292A                 db  44h ; D
seg000:292B                 db  0Eh
seg000:292C                 db  46h ; F
seg000:292D                 db  13h
seg000:292E                 db  47h ; G
seg000:292F                 db  14h
seg000:2930                 db  48h ; H
seg000:2931                 db  15h
seg000:2932                 db  49h ; I
seg000:2933                 db  16h
seg000:2934                 db  4Ah ; J
seg000:2935                 db  17h
seg000:2936                 db  4Bh ; K
seg000:2937                 db  18h
seg000:2938                 db  56h ; V
seg000:2939                 db  19h
seg000:293A                 db  57h ; W
seg000:293B                 db  1Ah
seg000:293C                 db  58h ; X
seg000:293D                 db  1Bh
seg000:293E                 db  59h ; Y
seg000:293F                 db  80h ; Ç
seg000:2940                 db    0
seg000:2941                 db  5Ah ; Z
seg000:2942                 db  1Ch
seg000:2943                 db  5Dh ; ]
seg000:2944                 db  1Dh
seg000:2945                 db  5Eh ; ^
seg000:2946                 db  1Eh
seg000:2947                 db  5Fh ; _
seg000:2948                 db  1Fh
seg000:2949                 db    0
seg000:294A                 db 0FFh
seg000:294B                 db    1
seg000:294C                 db  1Bh
seg000:294D                 db    2
seg000:294E                 db    0
seg000:294F                 db  1Fh
seg000:2950                 db    1
seg000:2951                 db  7Eh ; ~
seg000:2952                 db  83h ; â
seg000:2953                 db    1
seg000:2954                 db 0FFh
seg000:2955                 db    1
seg000:2956                 db  1Bh
seg000:2957                 db    2
seg000:2958                 db    0
seg000:2959                 db  1Fh
seg000:295A                 db    1
seg000:295B                 db  7Eh ; ~
seg000:295C                 db    4
seg000:295D                 db 0FFh
seg000:295E                 db    1
seg000:295F                 db  1Bh
seg000:2960                 db    2
seg000:2961                 db  23h ; #
seg000:2962                 db  80h ; Ç
seg000:2963                 db    2
seg000:2964                 db  28h ; (
seg000:2965                 db  80h ; Ç
seg000:2966                 db    3
seg000:2967                 db  29h ; )
seg000:2968                 db  80h ; Ç
seg000:2969                 db    4
seg000:296A                 db  37h ; 7
seg000:296B                 db  20h
seg000:296C                 db  38h ; 8
seg000:296D                 db  21h ; !
seg000:296E                 db  3Dh ; =
seg000:296F                 db    8
seg000:2970                 db  3Eh ; >
seg000:2971                 db    9
seg000:2972                 db  44h ; D
seg000:2973                 db  22h ; "
seg000:2974                 db  45h ; E
seg000:2975                 db  23h ; #
seg000:2976                 db  48h ; H
seg000:2977                 db  24h ; $
seg000:2978                 db  4Dh ; M
seg000:2979                 db  16h
seg000:297A                 db  4Eh ; N
seg000:297B                 db  25h ; %
seg000:297C                 db  4Fh ; O
seg000:297D                 db  26h ; &
seg000:297E                 db  5Ah ; Z
seg000:297F                 db  27h ; '
seg000:2980                 db  63h ; c
seg000:2981                 db  28h ; (
seg000:2982                 db  5Bh ; [
seg000:2983                 db  85h ; à
seg000:2984                 db    5
seg000:2985                 db    0
seg000:2986                 db 0FFh
seg000:2987                 db    1
seg000:2988                 db  1Bh
seg000:2989                 db    2
seg000:298A                 db  33h ; 3
seg000:298B                 db  29h ; )
seg000:298C                 db  34h ; 4
seg000:298D                 db  2Ah ; *
seg000:298E                 db  35h ; 5
seg000:298F                 db  2Bh ; +
seg000:2990                 db  36h ; 6
seg000:2991                 db  2Ch ; ,
seg000:2992                 db  38h ; 8
seg000:2993                 db  2Dh ; -
seg000:2994                 db    0
seg000:2995                 db 0FFh
seg000:2996                 db    1
seg000:2997                 db  1Bh
seg000:2998                 db    2
seg000:2999                 db  30h ; 0
seg000:299A                 db  2Eh ; .
seg000:299B                 db  31h ; 1
seg000:299C                 db  2Fh ; /
seg000:299D                 db  32h ; 2
seg000:299E                 db  30h ; 0
seg000:299F                 db  41h ; A
seg000:29A0                 db  31h ; 1
seg000:29A1                 db  42h ; B
seg000:29A2                 db  32h ; 2
seg000:29A3                 db    0
seg000:29A4                 db 0FFh
seg000:29A5                 db    1
seg000:29A6                 db  1Bh
seg000:29A7                 db    2
seg000:29A8                 db  30h ; 0
seg000:29A9                 db  33h ; 3
seg000:29AA                 db  31h ; 1
seg000:29AB                 db  34h ; 4
seg000:29AC                 db  32h ; 2
seg000:29AD                 db  35h ; 5
seg000:29AE                 db  41h ; A
seg000:29AF                 db  36h ; 6
seg000:29B0                 db  42h ; B
seg000:29B1                 db  37h ; 7
seg000:29B2                 db    0
seg000:29B3                 db 0FFh
seg000:29B4                 db    1
seg000:29B5                 db  1Bh
seg000:29B6                 db    2
seg000:29B7                 db  3Bh ; ;
seg000:29B8                 db  87h ; ç
seg000:29B9                 db    7
seg000:29BA                 db  3Fh ; ?
seg000:29BB                 db  80h ; Ç
seg000:29BC                 db    6
seg000:29BD                 db  41h ; A
seg000:29BE                 db  0Fh
seg000:29BF                 db  42h ; B
seg000:29C0                 db  10h
seg000:29C1                 db  43h ; C
seg000:29C2                 db  11h
seg000:29C3                 db  44h ; D
seg000:29C4                 db  12h
seg000:29C5                 db  48h ; H
seg000:29C6                 db  3Dh ; =
seg000:29C7                 db  4Ah ; J
seg000:29C8                 db  38h ; 8
seg000:29C9                 db  4Bh ; K
seg000:29CA                 db  39h ; 9
seg000:29CB                 db  4Ch ; L
seg000:29CC                 db  3Ah ; :
seg000:29CD                 db  4Dh ; M
seg000:29CE                 db  3Bh ; ;
seg000:29CF                 db  50h ; P
seg000:29D0                 db  3Ch ; <
seg000:29D1                 db  63h ; c
seg000:29D2                 db  27h ; '
seg000:29D3                 db  66h ; f
seg000:29D4                 db  3Dh ; =
seg000:29D5                 db  67h ; g
seg000:29D6                 db  3Eh ; >
seg000:29D7                 db  68h ; h
seg000:29D8                 db  3Fh ; ?
seg000:29D9                 db  69h ; i
seg000:29DA                 db  40h ; @
seg000:29DB                 db  6Ch ; l
seg000:29DC                 db  41h ; A
seg000:29DD                 db  6Dh ; m
seg000:29DE                 db  42h ; B
seg000:29DF                 db  72h ; r
seg000:29E0                 db  44h ; D
seg000:29E1                 db    0
seg000:29E2                 db  2Fh ; /
seg000:29E3                 db    1
seg000:29E4                 db  39h ; 9
seg000:29E5                 db  86h ; å
seg000:29E6                 db    7
seg000:29E7                 db 0FFh
seg000:29E8                 db    1
seg000:29E9                 db  1Bh
seg000:29EA                 db    2
seg000:29EB                 db  3Bh ; ;
seg000:29EC                 db  87h ; ç
seg000:29ED                 db    6
seg000:29EE                 db  68h ; h
seg000:29EF                 db  47h ; G
seg000:29F0                 db  69h ; i
seg000:29F1                 db  48h ; H
seg000:29F2                 db  6Ch ; l
seg000:29F3                 db  49h ; I
seg000:29F4                 db  6Eh ; n
seg000:29F5                 db  4Ah ; J
seg000:29F6                 db    0
seg000:29F7                 db  2Fh ; /
seg000:29F8                 db    1
seg000:29F9                 db  39h ; 9
seg000:29FA                 db  86h ; å
seg000:29FB                 db    6
seg000:29FC                 db 0FFh
seg000:29FD                 db    1
seg000:29FE                 db  1Bh
seg000:29FF                 db    2
seg000:2A00                 db  3Bh ; ;
seg000:2A01                 db  87h ; ç
seg000:2A02                 db    7
seg000:2A03                 db  41h ; A
seg000:2A04                 db  0Fh
seg000:2A05                 db  42h ; B
seg000:2A06                 db  10h
seg000:2A07                 db  43h ; C
seg000:2A08                 db  11h
seg000:2A09                 db  44h ; D
seg000:2A0A                 db  12h
seg000:2A0B                 db  48h ; H
seg000:2A0C                 db  3Dh ; =
seg000:2A0D                 db  4Ah ; J
seg000:2A0E                 db  38h ; 8
seg000:2A0F                 db  4Bh ; K
seg000:2A10                 db  39h ; 9
seg000:2A11                 db  4Ch ; L
seg000:2A12                 db  3Ah ; :
seg000:2A13                 db  4Dh ; M
seg000:2A14                 db  3Bh ; ;
seg000:2A15                 db  50h ; P
seg000:2A16                 db  3Ch ; <
seg000:2A17                 db  63h ; c
seg000:2A18                 db  27h ; '
seg000:2A19                 db  66h ; f
seg000:2A1A                 db  3Dh ; =
seg000:2A1B                 db  67h ; g
seg000:2A1C                 db  3Eh ; >
seg000:2A1D                 db  68h ; h
seg000:2A1E                 db  3Fh ; ?
seg000:2A1F                 db  69h ; i
seg000:2A20                 db  40h ; @
seg000:2A21                 db  6Ch ; l
seg000:2A22                 db  41h ; A
seg000:2A23                 db  6Dh ; m
seg000:2A24                 db  42h ; B
seg000:2A25                 db  6Eh ; n
seg000:2A26                 db  43h ; C
seg000:2A27                 db  72h ; r
seg000:2A28                 db  45h ; E
seg000:2A29                 db  79h ; y
seg000:2A2A                 db  46h ; F
seg000:2A2B                 db    0
seg000:2A2C                 db  2Fh ; /
seg000:2A2D                 db    1
seg000:2A2E                 db  39h ; 9
seg000:2A2F                 db  86h ; å
seg000:2A30                 db    7
seg000:2A31                 db 0FFh
seg000:2A32 word_2A32       dw 4C01h
seg000:2A34                 dw 5629h
seg000:2A36                 dw 8829h
seg000:2A38                 dw 9729h
seg000:2A3A                 dw 0A629h
seg000:2A3C                 dw 0B529h
seg000:2A3E                 dw 0E929h
seg000:2A40                 dw 0FE29h
seg000:2A42                 db  29h ; )
seg000:2A43 ; ---------------------------------------------------------------------------
seg000:2A43                 retn                    ; CODE XREF: sub_28C9:loc_2917j
seg000:2A43                                         ; Routine called by jump table @ word_2A44
seg000:2A43 ; ---------------------------------------------------------------------------
seg000:2A44 word_2A44       dw 2A43h                ; DATA XREF: sub_28C9:loc_2917r
seg000:2A46                 dw 28C3h                ; JUMP TABLE, referenced at offset $ 2917
seg000:2A46                                         ;
seg000:2A46                                         ; [ ADDRESSES HERE IN LOW ROM - between $ 2157 and $ 2d56 ]
seg000:2A46                                         ;
seg000:2A48                 dw 28A8h
seg000:2A4A                 dw 2ADAh
seg000:2A4C                 dw 2AE0h
seg000:2A4E                 db  57h,   0            ; F400 0057 = loc_2AFA
seg000:2A50                 dw 2B08h
seg000:2A52                 dw 2B36h
seg000:2A54                 dw 22EEh                ; OFFSET 22EE : set bit 1 in DS:1FF9
seg000:2A56                 dw 22F6h                ; OFFSET 22F6 : re-set bit 1 in DS:1FF9
seg000:2A58                 dw 22E2h
seg000:2A5A                 dw 215Ch
seg000:2A5C                 dw 2184h
seg000:2A5E                 dw 21C3h
seg000:2A60                 dw 21DFh
seg000:2A62                 dw 21FCh
seg000:2A64                 dw 220Eh
seg000:2A66                 dw 2213h
seg000:2A68                 dw 2218h
seg000:2A6A                 dw 267Fh
seg000:2A6C                 dw 2689h
seg000:2A6E                 dw 2157h
seg000:2A70                 db 2Dh, 0               ; F400 002d
seg000:2A72                 dw 23D0h
seg000:2A74                 dw 237Fh
seg000:2A76                 dw 25A9h
seg000:2A78                 dw 2604h
seg000:2A7A                 dw 25FCh
seg000:2A7C                 dw 26E2h
seg000:2A7E                 dw 2597h
seg000:2A80                 dw 25CCh
seg000:2A82                 dw 25C4h
seg000:2A84                 dw 2499h
seg000:2A86                 dw 24B4h
seg000:2A88                 db 24h, 0               ; F400 0024 : SCREEN TO PRINTER?  HARDCOPY?
seg000:2A8A                 db  2Ah,   0            ; F400 002a : CURSOR RELATED #2
seg000:2A8C                 db 69h, 0               ; F400 0069
seg000:2A8E                 db 60h, 0               ; F400 0060
seg000:2A90                 db 63h, 0               ; F400 0063
seg000:2A92                 dw 26D8h
seg000:2A94                 dw 289Fh
seg000:2A96                 dw 2458h
seg000:2A98                 dw 245Ch
seg000:2A9A                 dw 2460h
seg000:2A9C                 dw 2477h
seg000:2A9E                 dw 288Ch
seg000:2AA0                 dw 2641h
seg000:2AA2                 dw 2645h
seg000:2AA4                 dw 2645h
seg000:2AA6                 dw 2648h
seg000:2AA8                 dw 264Ch
seg000:2AAA                 dw 265Bh
seg000:2AAC                 dw 265Fh
seg000:2AAE                 dw 265Fh
seg000:2AB0                 dw 2662h
seg000:2AB2                 dw 2666h
seg000:2AB4                 dw 2B6Dh
seg000:2AB6                 dw 2B99h
seg000:2AB8                 dw 27DFh
seg000:2ABA                 dw 2853h
seg000:2ABC                 dw 276Ch
seg000:2ABE                 dw 221Dh
seg000:2AC0                 dw 2BC5h
seg000:2AC2                 dw 2C39h
seg000:2AC4                 dw 2BDBh
seg000:2AC6                 dw 2C73h
seg000:2AC8                 dw 2CADh
seg000:2ACA                 dw 2BF8h
seg000:2ACC                 dw 224Fh
seg000:2ACE                 dw 2254h
seg000:2AD0                 dw 28A5h
seg000:2AD2                 dw 2CEFh
seg000:2AD4                 dw 2C15h
seg000:2AD6                 dw 2D56h
seg000:2AD8                 dw 26A5h
seg000:2ADA ; ---------------------------------------------------------------------------
seg000:2ADA
seg000:2ADA loc_2ADA:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2ADA                 sub     al, 1Fh         ; Routine called by jump table @ word_2A44
seg000:2ADC                 mov     ds:0EE0h, al
seg000:2ADF                 retn
seg000:2AE0 ; ---------------------------------------------------------------------------
seg000:2AE0
seg000:2AE0 loc_2AE0:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2AE0                 sub     al, 1Fh         ; Routine called by jump table @ word_2A44
seg000:2AE2                 mov     dx, ds:0F41h
seg000:2AE6                 cmp     al, 50h ; 'P'
seg000:2AE8                 ja      short loc_2AEC  ;
seg000:2AE8                                         ;
seg000:2AEA                 mov     dl, al
seg000:2AEC
seg000:2AEC loc_2AEC:                               ; CODE XREF: sub_28C9+21Fj
seg000:2AEC                 mov     ah, ds:0EE0h
seg000:2AF0                 cmp     ah, 18h
seg000:2AF3                 ja      short loc_2AF7
seg000:2AF5                 mov     dh, ah
seg000:2AF7
seg000:2AF7 loc_2AF7:                               ; CODE XREF: sub_28C9+22Aj
seg000:2AF7                 jmp     loc_223B
seg000:2AFA ; ---------------------------------------------------------------------------
seg000:2AFA
seg000:2AFA loc_2AFA:                               ; CODE XREF: sub_28C9:loc_57j
seg000:2AFA                 xor     si, si          ; Routine called by jump table @ word_2A44 (via 0057)
seg000:2AFC                 mov     cx, 12h
seg000:2AFF
seg000:2AFF LOOP__loc_2AFF:                         ; CODE XREF: sub_28C9+23Cj
seg000:2AFF                 mov     byte ptr [si+0EDEh], 0
seg000:2B04                 inc     si
seg000:2B05                 loop    LOOP__loc_2AFF
seg000:2B07                 retn
seg000:2B08 ; ---------------------------------------------------------------------------
seg000:2B08
seg000:2B08 loc_2B08:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2B08                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2B0D                 jnz     short loc_2B13
seg000:2B0F                 inc     byte ptr ds:0EDEh
seg000:2B13
seg000:2B13 loc_2B13:                               ; CODE XREF: sub_28C9+244j
seg000:2B13                 sub     al, 30h ; '0'
seg000:2B15                 mov     dl, al
seg000:2B17                 sub     dh, dh
seg000:2B19                 mov     bl, ds:0EDEh
seg000:2B1D                 sub     bh, bh
seg000:2B1F                 dec     bx
seg000:2B20                 mov     al, [bx+0EE0h]
seg000:2B24                 mov     ah, 0Ah
seg000:2B26                 mul     ah
seg000:2B28                 add     ax, dx
seg000:2B2A                 cmp     ax, 0FEh ; '¦'
seg000:2B2D                 jbe     short loc_2B31  ;
seg000:2B2D                                         ;
seg000:2B2F                 mov     al, 0FFh
seg000:2B31
seg000:2B31 loc_2B31:                               ; CODE XREF: sub_28C9+264j
seg000:2B31                 mov     [bx+0EE0h], al
seg000:2B35                 retn
seg000:2B36 ; ---------------------------------------------------------------------------
seg000:2B36
seg000:2B36 loc_2B36:                               ; CODE XREF: sub_28C9:loc_2917j
seg000:2B36                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2B3B                 jnz     short loc_2B41
seg000:2B3D                 inc     byte ptr ds:0EDEh
seg000:2B41
seg000:2B41 loc_2B41:                               ; CODE XREF: sub_28C9+272j
seg000:2B41                 mov     al, ds:0EDEh
seg000:2B44                 inc     al
seg000:2B46                 cmp     al, 10h
seg000:2B48                 ja      short locret_2B4D
seg000:2B4A                 mov     ds:0EDEh, al
seg000:2B4D
seg000:2B4D locret_2B4D:                            ; CODE XREF: sub_28C9+27Fj
seg000:2B4D                 retn
seg000:2B4D sub_28C9        endp
seg000:2B4D
seg000:2B4E
seg000:2B4E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2B4E
seg000:2B4E
seg000:2B4E sub_2B4E        proc near               ; CODE XREF: sub_28C9-6C8p
seg000:2B4E                                         ; seg000:2227p
seg000:2B4E                                         ; seg000:loc_2230p
seg000:2B4E                                         ; sub_224F+13p sub_2281p
seg000:2B4E                                         ; seg000:276Fp sub_2819+3p
seg000:2B4E                                         ; seg000:2B6Dp
seg000:2B4E                                         ; seg000:loc_2B91p
seg000:2B4E                                         ; seg000:2B99p
seg000:2B4E                                         ; seg000:loc_2BBDp
seg000:2B4E                                         ; seg000:2BC5p
seg000:2B4E                                         ; seg000:2BDBp
seg000:2B4E                                         ; seg000:2BF8p
seg000:2B4E                                         ; seg000:2C15p
seg000:2B4E                                         ; seg000:loc_2C43p
seg000:2B4E                                         ; seg000:loc_2C7Dp
seg000:2B4E                                         ; seg000:loc_2CBAp
seg000:2B4E                                         ; seg000:loc_2CF9p
seg000:2B4E                                         ; seg000:loc_2D60p
seg000:2B4E                 mov     bl, ds:0EDFh
seg000:2B52                 cmp     bl, ds:0EDEh
seg000:2B56                 jnb     short loc_2B67
seg000:2B58                 sub     bh, bh
seg000:2B5A                 mov     al, [bx+0EE0h]
seg000:2B5E                 inc     bl
seg000:2B60                 mov     ds:0EDFh, bl
seg000:2B64                 sub     ah, ah
seg000:2B66                 retn
seg000:2B67 ; ---------------------------------------------------------------------------
seg000:2B67
seg000:2B67 loc_2B67:                               ; CODE XREF: sub_2B4E+8j
seg000:2B67                 sub     ah, ah
seg000:2B69                 add     ah, 1
seg000:2B6C                 retn
seg000:2B6C sub_2B4E        endp
seg000:2B6C
seg000:2B6D ; ---------------------------------------------------------------------------
seg000:2B6D                 call    sub_2B4E        ; Routine called by jump table @ word_2A44
seg000:2B70                 jz      short loc_2B78
seg000:2B72                 call    sub_23D6
seg000:2B75                 jmp     loc_4E
seg000:2B78 ; ---------------------------------------------------------------------------
seg000:2B78
seg000:2B78 loc_2B78:                               ; CODE XREF: seg000:2B70j
seg000:2B78                                         ; seg000:2B94j
seg000:2B78                 and     al, al
seg000:2B7A                 jnz     short loc_2B81
seg000:2B7C                 call    sub_23D6
seg000:2B7F                 jmp     short loc_2B91
seg000:2B81 ; ---------------------------------------------------------------------------
seg000:2B81
seg000:2B81 loc_2B81:                               ; CODE XREF: seg000:2B7Aj
seg000:2B81                 cmp     al, 1
seg000:2B83                 jnz     short loc_2B8A
seg000:2B85                 call    loc_2404
seg000:2B88                 jmp     short loc_2B91
seg000:2B8A ; ---------------------------------------------------------------------------
seg000:2B8A
seg000:2B8A loc_2B8A:                               ; CODE XREF: seg000:2B83j
seg000:2B8A                 cmp     al, 2
seg000:2B8C                 jnz     short loc_2B91
seg000:2B8E                 call    sub_2426
seg000:2B91
seg000:2B91 loc_2B91:                               ; CODE XREF: seg000:2B7Fj
seg000:2B91                                         ; seg000:2B88j
seg000:2B91                                         ; seg000:2B8Cj
seg000:2B91                 call    sub_2B4E
seg000:2B94                 jz      short loc_2B78  ;
seg000:2B94                                         ;
seg000:2B96                 jmp     loc_4E
seg000:2B99 ; ---------------------------------------------------------------------------
seg000:2B99                 call    sub_2B4E        ; Routine called by jump table @ word_2A44
seg000:2B9C                 jz      short loc_2BA4  ;
seg000:2B9C                                         ;
seg000:2B9E                 call    sub_2385
seg000:2BA1                 jmp     loc_4E
seg000:2BA4 ; ---------------------------------------------------------------------------
seg000:2BA4
seg000:2BA4 loc_2BA4:                               ; CODE XREF: seg000:2B9Cj
seg000:2BA4                                         ; seg000:2BC0j
seg000:2BA4                 and     al, al
seg000:2BA6                 jnz     short loc_2BAD  ;
seg000:2BA6                                         ;
seg000:2BA8                 call    sub_2385
seg000:2BAB                 jmp     short loc_2BBD
seg000:2BAD ; ---------------------------------------------------------------------------
seg000:2BAD
seg000:2BAD loc_2BAD:                               ; CODE XREF: seg000:2BA6j
seg000:2BAD                 cmp     al, 1
seg000:2BAF                 jnz     short loc_2BB6  ;
seg000:2BAF                                         ;
seg000:2BB1                 call    sub_23A6
seg000:2BB4                 jmp     short loc_2BBD
seg000:2BB6 ; ---------------------------------------------------------------------------
seg000:2BB6
seg000:2BB6 loc_2BB6:                               ; CODE XREF: seg000:2BAFj
seg000:2BB6                 cmp     al, 2
seg000:2BB8                 jnz     short loc_2BBD  ;
seg000:2BB8                                         ;
seg000:2BBA                 call    sub_23C2
seg000:2BBD
seg000:2BBD loc_2BBD:                               ; CODE XREF: seg000:2BABj
seg000:2BBD                                         ; seg000:2BB4j
seg000:2BBD                                         ; seg000:2BB8j
seg000:2BBD                 call    sub_2B4E
seg000:2BC0                 jz      short loc_2BA4  ;
seg000:2BC0                                         ;
seg000:2BC2                 jmp     loc_4E
seg000:2BC5 ; ---------------------------------------------------------------------------
seg000:2BC5                 call    sub_2B4E        ; Routine called by jump table @ word_2A44
seg000:2BC8                 jnz     short loc_2BCE  ;
seg000:2BC8                                         ;
seg000:2BCA                 and     al, al
seg000:2BCC                 jnz     short loc_2BD1
seg000:2BCE
seg000:2BCE loc_2BCE:                               ; CODE XREF: seg000:2BC8j
seg000:2BCE                 jmp     loc_2571
seg000:2BD1 ; ---------------------------------------------------------------------------
seg000:2BD1
seg000:2BD1 loc_2BD1:                               ; CODE XREF: seg000:2BCCj
seg000:2BD1                 cmp     al, 3
seg000:2BD3                 jnz     short loc_2BD8  ;
seg000:2BD3                                         ;
seg000:2BD5                 jmp     loc_2585
seg000:2BD8 ; ---------------------------------------------------------------------------
seg000:2BD8
seg000:2BD8 loc_2BD8:                               ; CODE XREF: seg000:2BD3j
seg000:2BD8                 jmp     loc_4E
seg000:2BDB ; ---------------------------------------------------------------------------
seg000:2BDB                 call    sub_2B4E        ; Routine called by jump table @ word_2A44
seg000:2BDE                 jnz     short loc_2BE4  ;
seg000:2BDE                                         ;
seg000:2BE0                 and     al, al
seg000:2BE2                 jnz     short loc_2BE7
seg000:2BE4
seg000:2BE4 loc_2BE4:                               ; CODE XREF: seg000:2BDEj
seg000:2BE4                 jmp     loc_2597
seg000:2BE7 ; ---------------------------------------------------------------------------
seg000:2BE7
seg000:2BE7 loc_2BE7:                               ; CODE XREF: seg000:2BE2j
seg000:2BE7                 cmp     al, 4
seg000:2BE9                 jnz     short loc_2BEE  ;
seg000:2BE9                                         ;
seg000:2BEB                 jmp     loc_25FC
seg000:2BEE ; ---------------------------------------------------------------------------
seg000:2BEE
seg000:2BEE loc_2BEE:                               ; CODE XREF: seg000:2BE9j
seg000:2BEE                 cmp     al, 5
seg000:2BF0                 jnz     short loc_2BF5
seg000:2BF2                 jmp     loc_2604
seg000:2BF5 ; ---------------------------------------------------------------------------
seg000:2BF5
seg000:2BF5 loc_2BF5:                               ; CODE XREF: seg000:2BF0j
seg000:2BF5                 jmp     loc_4E
seg000:2BF8 ; ---------------------------------------------------------------------------
seg000:2BF8                 call    sub_2B4E        ; Routine called by jump table @ word_2A44
seg000:2BFB                 jnz     short loc_2C01  ;
seg000:2BFB                                         ;
seg000:2BFD                 and     al, al
seg000:2BFF                 jnz     short loc_2C04
seg000:2C01
seg000:2C01 loc_2C01:                               ; CODE XREF: seg000:2BFBj
seg000:2C01                 jmp     loc_4E
seg000:2C04 ; ---------------------------------------------------------------------------
seg000:2C04
seg000:2C04 loc_2C04:                               ; CODE XREF: seg000:2BFFj
seg000:2C04                 cmp     al, 5
seg000:2C06                 jnz     short loc_2C0B  ;
seg000:2C06                                         ;
seg000:2C08                 jmp     loc_26CB
seg000:2C0B ; ---------------------------------------------------------------------------
seg000:2C0B
seg000:2C0B loc_2C0B:                               ; CODE XREF: seg000:2C06j
seg000:2C0B                 cmp     al, 6
seg000:2C0D                 jnz     short loc_2C12  ;
seg000:2C0D                                         ;
seg000:2C0F                 jmp     loc_26EF
seg000:2C12 ; ---------------------------------------------------------------------------
seg000:2C12
seg000:2C12 loc_2C12:                               ; CODE XREF: seg000:2C0Dj
seg000:2C12                 jmp     loc_4E
seg000:2C15 ; ---------------------------------------------------------------------------
seg000:2C15                 call    sub_2B4E        ; Routine called by jump table @ word_2A44
seg000:2C18                 jnz     short loc_2C1E  ;
seg000:2C18                                         ;
seg000:2C1A                 and     al, al
seg000:2C1C                 jnz     short loc_2C21
seg000:2C1E
seg000:2C1E loc_2C1E:                               ; CODE XREF: seg000:2C18j
seg000:2C1E                 jmp     loc_4E
seg000:2C21 ; ---------------------------------------------------------------------------
seg000:2C21
seg000:2C21 loc_2C21:                               ; CODE XREF: seg000:2C1Cj
seg000:2C21                 cmp     al, 1
seg000:2C23                 jnz     short loc_2C28  ;
seg000:2C23                                         ;
seg000:2C25                 jmp     loc_25A9
seg000:2C28 ; ---------------------------------------------------------------------------
seg000:2C28
seg000:2C28 loc_2C28:                               ; CODE XREF: seg000:2C23j
seg000:2C28                 cmp     al, 4
seg000:2C2A                 jnz     short loc_2C2F  ;
seg000:2C2A                                         ;
seg000:2C2C                 jmp     loc_25C4
seg000:2C2F ; ---------------------------------------------------------------------------
seg000:2C2F
seg000:2C2F loc_2C2F:                               ; CODE XREF: seg000:2C2Aj
seg000:2C2F                 cmp     al, 5
seg000:2C31                 jnz     short loc_2C36  ;
seg000:2C31                                         ;
seg000:2C33                 jmp     loc_25CC
seg000:2C36 ; ---------------------------------------------------------------------------
seg000:2C36
seg000:2C36 loc_2C36:                               ; CODE XREF: seg000:2C31j
seg000:2C36                 jmp     loc_4E
seg000:2C39 ; ---------------------------------------------------------------------------
seg000:2C39                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2C3E                 jnz     short loc_2C43  ;
seg000:2C3E                                         ;
seg000:2C40                 jmp     loc_4E
seg000:2C43 ; ---------------------------------------------------------------------------
seg000:2C43
seg000:2C43 loc_2C43:                               ; CODE XREF: seg000:2C3Ej
seg000:2C43                                         ; seg000:2C4Dj
seg000:2C43                                         ; seg000:2C56j
seg000:2C43                                         ; seg000:2C5Fj
seg000:2C43                                         ; seg000:2C68j
seg000:2C43                                         ; seg000:2C6Cj
seg000:2C43                                         ; seg000:2C71j
seg000:2C43                 call    sub_2B4E
seg000:2C46                 jz      short loc_2C4B  ;
seg000:2C46                                         ;
seg000:2C48                 jmp     loc_4E
seg000:2C4B ; ---------------------------------------------------------------------------
seg000:2C4B
seg000:2C4B loc_2C4B:                               ; CODE XREF: seg000:2C46j
seg000:2C4B                 and     al, al
seg000:2C4D                 jz      short loc_2C43  ;
seg000:2C4D                                         ;
seg000:2C4F                 cmp     al, 2
seg000:2C51                 jnz     short loc_2C58  ;
seg000:2C51                                         ;
seg000:2C53                 call    LED_WAIT_ON__sub_24F0 ; light WAIT led on keyboard?
seg000:2C56                 jmp     short loc_2C43
seg000:2C58 ; ---------------------------------------------------------------------------
seg000:2C58
seg000:2C58 loc_2C58:                               ; CODE XREF: seg000:2C51j
seg000:2C58                 cmp     al, 4
seg000:2C5A                 jnz     short loc_2C61  ;
seg000:2C5A                                         ;
seg000:2C5C                 call    sub_2355
seg000:2C5F                 jmp     short loc_2C43
seg000:2C61 ; ---------------------------------------------------------------------------
seg000:2C61
seg000:2C61 loc_2C61:                               ; CODE XREF: seg000:2C5Aj
seg000:2C61                 cmp     al, 0Ch
seg000:2C63                 jnz     short loc_2C6A  ;
seg000:2C63                                         ;
seg000:2C65                 call    sub_2363
seg000:2C68                 jmp     short loc_2C43
seg000:2C6A ; ---------------------------------------------------------------------------
seg000:2C6A
seg000:2C6A loc_2C6A:                               ; CODE XREF: seg000:2C63j
seg000:2C6A                 cmp     al, 14h
seg000:2C6C                 jnz     short loc_2C43  ;
seg000:2C6C                                         ;
seg000:2C6E                 call    sub_2371
seg000:2C71                 jmp     short loc_2C43
seg000:2C73 ; ---------------------------------------------------------------------------
seg000:2C73                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2C78                 jnz     short loc_2C7D  ;
seg000:2C78                                         ;
seg000:2C7A                 jmp     loc_4E
seg000:2C7D ; ---------------------------------------------------------------------------
seg000:2C7D
seg000:2C7D loc_2C7D:                               ; CODE XREF: seg000:2C78j
seg000:2C7D                                         ; seg000:2C87j
seg000:2C7D                                         ; seg000:2C90j
seg000:2C7D                                         ; seg000:2C99j
seg000:2C7D                                         ; seg000:2CA2j
seg000:2C7D                                         ; seg000:2CA6j
seg000:2C7D                                         ; seg000:2CABj
seg000:2C7D                 call    sub_2B4E
seg000:2C80                 jz      short loc_2C85  ;
seg000:2C80                                         ;
seg000:2C82                 jmp     loc_4E
seg000:2C85 ; ---------------------------------------------------------------------------
seg000:2C85
seg000:2C85 loc_2C85:                               ; CODE XREF: seg000:2C80j
seg000:2C85                 and     al, al
seg000:2C87                 jz      short loc_2C7D  ;
seg000:2C87                                         ;
seg000:2C89                 cmp     al, 2
seg000:2C8B                 jnz     short loc_2C92  ;
seg000:2C8B                                         ;
seg000:2C8D                 call    CLR_WAIT_LED__sub_24FC ; clear WAIT led on keyboard?
seg000:2C90                 jmp     short loc_2C7D
seg000:2C92 ; ---------------------------------------------------------------------------
seg000:2C92
seg000:2C92 loc_2C92:                               ; CODE XREF: seg000:2C8Bj
seg000:2C92                 cmp     al, 4
seg000:2C94                 jnz     short loc_2C9B  ;
seg000:2C94                                         ;
seg000:2C96                 call    sub_235C
seg000:2C99                 jmp     short loc_2C7D
seg000:2C9B ; ---------------------------------------------------------------------------
seg000:2C9B
seg000:2C9B loc_2C9B:                               ; CODE XREF: seg000:2C94j
seg000:2C9B                 cmp     al, 0Ch
seg000:2C9D                 jnz     short loc_2CA4  ;
seg000:2C9D                                         ;
seg000:2C9F                 call    sub_236A
seg000:2CA2                 jmp     short loc_2C7D
seg000:2CA4 ; ---------------------------------------------------------------------------
seg000:2CA4
seg000:2CA4 loc_2CA4:                               ; CODE XREF: seg000:2C9Dj
seg000:2CA4                 cmp     al, 14h
seg000:2CA6                 jnz     short loc_2C7D  ;
seg000:2CA6                                         ;
seg000:2CA8                 call    sub_2378
seg000:2CAB                 jmp     short loc_2C7D
seg000:2CAD ; ---------------------------------------------------------------------------
seg000:2CAD                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2CB2                 jnz     short loc_2CBA  ;
seg000:2CB2                                         ;
seg000:2CB4                 call    sub_247B
seg000:2CB7                 jmp     loc_4E
seg000:2CBA ; ---------------------------------------------------------------------------
seg000:2CBA
seg000:2CBA loc_2CBA:                               ; CODE XREF: seg000:2CB2j
seg000:2CBA                                         ; seg000:2CC9j
seg000:2CBA                                         ; seg000:2CD2j
seg000:2CBA                                         ; seg000:2CDBj
seg000:2CBA                                         ; seg000:2CE4j
seg000:2CBA                                         ; seg000:2CE8j
seg000:2CBA                                         ; seg000:2CEDj
seg000:2CBA                 call    sub_2B4E
seg000:2CBD                 jz      short loc_2CC2  ;
seg000:2CBD                                         ;
seg000:2CBF                 jmp     loc_4E
seg000:2CC2 ; ---------------------------------------------------------------------------
seg000:2CC2
seg000:2CC2 loc_2CC2:                               ; CODE XREF: seg000:2CBDj
seg000:2CC2                 and     al, al
seg000:2CC4                 jnz     short loc_2CCB  ;
seg000:2CC4                                         ;
seg000:2CC6                 call    sub_247B
seg000:2CC9                 jmp     short loc_2CBA
seg000:2CCB ; ---------------------------------------------------------------------------
seg000:2CCB
seg000:2CCB loc_2CCB:                               ; CODE XREF: seg000:2CC4j
seg000:2CCB                 cmp     al, 1
seg000:2CCD                 jnz     short loc_2CD4  ;
seg000:2CCD                                         ;
seg000:2CCF                 call    sub_2481
seg000:2CD2                 jmp     short loc_2CBA
seg000:2CD4 ; ---------------------------------------------------------------------------
seg000:2CD4
seg000:2CD4 loc_2CD4:                               ; CODE XREF: seg000:2CCDj
seg000:2CD4                 cmp     al, 4
seg000:2CD6                 jnz     short loc_2CDD  ;
seg000:2CD6                                         ;
seg000:2CD8                 call    sub_2487
seg000:2CDB                 jmp     short loc_2CBA
seg000:2CDD ; ---------------------------------------------------------------------------
seg000:2CDD
seg000:2CDD loc_2CDD:                               ; CODE XREF: seg000:2CD6j
seg000:2CDD                 cmp     al, 5
seg000:2CDF                 jnz     short loc_2CE6  ;
seg000:2CDF                                         ;
seg000:2CE1                 call    sub_248D
seg000:2CE4                 jmp     short loc_2CBA
seg000:2CE6 ; ---------------------------------------------------------------------------
seg000:2CE6
seg000:2CE6 loc_2CE6:                               ; CODE XREF: seg000:2CDFj
seg000:2CE6                 cmp     al, 7
seg000:2CE8                 jnz     short loc_2CBA  ;
seg000:2CE8                                         ;
seg000:2CEA                 call    sub_2493
seg000:2CED                 jmp     short loc_2CBA
seg000:2CEF ; ---------------------------------------------------------------------------
seg000:2CEF                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2CF4                 jnz     short loc_2CF9  ;
seg000:2CF4                                         ;
seg000:2CF6                 jmp     loc_4E
seg000:2CF9 ; ---------------------------------------------------------------------------
seg000:2CF9
seg000:2CF9 loc_2CF9:                               ; CODE XREF: seg000:2CF4j
seg000:2CF9                                         ; seg000:2D03j
seg000:2CF9                                         ; seg000:2D0Cj
seg000:2CF9                                         ; seg000:2D15j
seg000:2CF9                                         ; seg000:2D1Ej
seg000:2CF9                                         ; seg000:2D27j
seg000:2CF9                                         ; seg000:2D30j
seg000:2CF9                                         ; seg000:2D39j
seg000:2CF9                                         ; seg000:2D42j
seg000:2CF9                                         ; seg000:2D4Bj
seg000:2CF9                                         ; seg000:2D4Fj
seg000:2CF9                                         ; seg000:2D54j
seg000:2CF9                 call    sub_2B4E
seg000:2CFC                 jz      short loc_2D01  ;
seg000:2CFC                                         ;
seg000:2CFE                 jmp     loc_4E
seg000:2D01 ; ---------------------------------------------------------------------------
seg000:2D01
seg000:2D01 loc_2D01:                               ; CODE XREF: seg000:2CFCj
seg000:2D01                 and     al, al
seg000:2D03                 jz      short loc_2CF9  ;
seg000:2D03                                         ;
seg000:2D05                 cmp     al, 1
seg000:2D07                 jnz     short loc_2D0E  ;
seg000:2D07                                         ;
seg000:2D09                 call    sub_22FE
seg000:2D0C                 jmp     short loc_2CF9
seg000:2D0E ; ---------------------------------------------------------------------------
seg000:2D0E
seg000:2D0E loc_2D0E:                               ; CODE XREF: seg000:2D07j
seg000:2D0E                 cmp     al, 3
seg000:2D10                 jnz     short loc_2D17  ;
seg000:2D10                                         ;
seg000:2D12                 call    SET_132__sub_2508
seg000:2D15                 jmp     short loc_2CF9
seg000:2D17 ; ---------------------------------------------------------------------------
seg000:2D17
seg000:2D17 loc_2D17:                               ; CODE XREF: seg000:2D10j
seg000:2D17                 cmp     al, 4
seg000:2D19                 jnz     short loc_2D20  ;
seg000:2D19                                         ;
seg000:2D1B                 call    SET_SMOOTH_SCROLL__sub_230A
seg000:2D1E                 jmp     short loc_2CF9
seg000:2D20 ; ---------------------------------------------------------------------------
seg000:2D20
seg000:2D20 loc_2D20:                               ; CODE XREF: seg000:2D19j
seg000:2D20                 cmp     al, 5
seg000:2D22                 jnz     short loc_2D29  ;
seg000:2D22                                         ;
seg000:2D24                 call    SET_DC012_REV_FIELD_ON__sub_231E
seg000:2D27                 jmp     short loc_2CF9
seg000:2D29 ; ---------------------------------------------------------------------------
seg000:2D29
seg000:2D29 loc_2D29:                               ; CODE XREF: seg000:2D22j
seg000:2D29                 cmp     al, 6
seg000:2D2B                 jnz     short loc_2D32  ;
seg000:2D2B                                         ;
seg000:2D2D                 call    SET_DS_F44__sub_22DA
seg000:2D30                 jmp     short loc_2CF9
seg000:2D32 ; ---------------------------------------------------------------------------
seg000:2D32
seg000:2D32 loc_2D32:                               ; CODE XREF: seg000:2D2Bj
seg000:2D32                 cmp     al, 7
seg000:2D34                 jnz     short loc_2D3B  ;
seg000:2D34                                         ;
seg000:2D36                 call    SET_AUTOWRAP_NVM_8D__sub_2335
seg000:2D39                 jmp     short loc_2CF9
seg000:2D3B ; ---------------------------------------------------------------------------
seg000:2D3B
seg000:2D3B loc_2D3B:                               ; CODE XREF: seg000:2D34j
seg000:2D3B                 cmp     al, 8
seg000:2D3D                 jnz     short loc_2D44  ;
seg000:2D3D                                         ;
seg000:2D3F                 call    AUTO_REPEAT_ON__sub_254F
seg000:2D42                 jmp     short loc_2CF9
seg000:2D44 ; ---------------------------------------------------------------------------
seg000:2D44
seg000:2D44 loc_2D44:                               ; CODE XREF: seg000:2D3Dj
seg000:2D44                 cmp     al, 12h
seg000:2D46                 jnz     short loc_2D4D  ;
seg000:2D46                                         ;
seg000:2D48                 call    sub_25E0
seg000:2D4B                 jmp     short loc_2CF9
seg000:2D4D ; ---------------------------------------------------------------------------
seg000:2D4D
seg000:2D4D loc_2D4D:                               ; CODE XREF: seg000:2D46j
seg000:2D4D                 cmp     al, 13h
seg000:2D4F                 jnz     short loc_2CF9  ;
seg000:2D4F                                         ;
seg000:2D51                 call    sub_25EE
seg000:2D54                 jmp     short loc_2CF9
seg000:2D56 ; ---------------------------------------------------------------------------
seg000:2D56                 cmp     byte ptr ds:0EDEh, 0 ; Routine called by jump table @ word_2A44
seg000:2D5B                 jnz     short loc_2D60  ;
seg000:2D5B                                         ;
seg000:2D5D                 jmp     loc_4E
seg000:2D60 ; ---------------------------------------------------------------------------
seg000:2D60
seg000:2D60 loc_2D60:                               ; CODE XREF: seg000:2D5Bj
seg000:2D60                                         ; seg000:2D6Aj
seg000:2D60                                         ; seg000:2D73j
seg000:2D60                                         ; seg000:2D7Cj
seg000:2D60                                         ; seg000:2D85j
seg000:2D60                                         ; seg000:2D8Ej
seg000:2D60                                         ; seg000:2D97j
seg000:2D60                                         ; seg000:2DA0j
seg000:2D60                                         ; seg000:2DA9j
seg000:2D60                                         ; seg000:2DB2j
seg000:2D60                                         ; seg000:2DBBj
seg000:2D60                                         ; seg000:2DBFj
seg000:2D60                                         ; seg000:2DC4j
seg000:2D60                 call    sub_2B4E
seg000:2D63                 jz      short loc_2D68  ;
seg000:2D63                                         ;
seg000:2D65                 jmp     loc_4E
seg000:2D68 ; ---------------------------------------------------------------------------
seg000:2D68
seg000:2D68 loc_2D68:                               ; CODE XREF: seg000:2D63j
seg000:2D68                 and     al, al
seg000:2D6A                 jz      short loc_2D60  ;
seg000:2D6A                                         ;
seg000:2D6C                 cmp     al, 1
seg000:2D6E                 jnz     short loc_2D75  ;
seg000:2D6E                                         ;
seg000:2D70                 call    sub_2304
seg000:2D73                 jmp     short loc_2D60
seg000:2D75 ; ---------------------------------------------------------------------------
seg000:2D75
seg000:2D75 loc_2D75:                               ; CODE XREF: seg000:2D6Ej
seg000:2D75                 cmp     al, 2
seg000:2D77                 jnz     short loc_2D7E  ;
seg000:2D77                                         ;
seg000:2D79                 call    SET_VT52_EMULATION__sub_22C9 ; Set VT-52 emulation. Then query NVM for US or UK charset.
seg000:2D7C                 jmp     short loc_2D60
seg000:2D7E ; ---------------------------------------------------------------------------
seg000:2D7E
seg000:2D7E loc_2D7E:                               ; CODE XREF: seg000:2D77j
seg000:2D7E                 cmp     al, 3
seg000:2D80                 jnz     short loc_2D87  ;
seg000:2D80                                         ;
seg000:2D82                 call    SET_SCREEN_WIDTH_80__sub_2544
seg000:2D85                 jmp     short loc_2D60
seg000:2D87 ; ---------------------------------------------------------------------------
seg000:2D87
seg000:2D87 loc_2D87:                               ; CODE XREF: seg000:2D80j
seg000:2D87                 cmp     al, 4
seg000:2D89                 jnz     short loc_2D90
seg000:2D8B                 call    SET_JUMP_SCROLL__NVM_84__sub_2314
seg000:2D8E                 jmp     short loc_2D60
seg000:2D90 ; ---------------------------------------------------------------------------
seg000:2D90
seg000:2D90 loc_2D90:                               ; CODE XREF: seg000:2D89j
seg000:2D90                 cmp     al, 5
seg000:2D92                 jnz     short loc_2D99  ;
seg000:2D92                                         ;
seg000:2D94                 call    SET_DC012_REV_FIELD_OFF__loc_2328
seg000:2D97                 jmp     short loc_2D60
seg000:2D99 ; ---------------------------------------------------------------------------
seg000:2D99
seg000:2D99 loc_2D99:                               ; CODE XREF: seg000:2D92j
seg000:2D99                 cmp     al, 6
seg000:2D9B                 jnz     short loc_2DA2  ;
seg000:2D9B                                         ;
seg000:2D9D                 call    RESET_DS_F44__sub_22D2
seg000:2DA0                 jmp     short loc_2D60
seg000:2DA2 ; ---------------------------------------------------------------------------
seg000:2DA2
seg000:2DA2 loc_2DA2:                               ; CODE XREF: seg000:2D9Bj
seg000:2DA2                 cmp     al, 7
seg000:2DA4                 jnz     short loc_2DAB  ;
seg000:2DA4                                         ;
seg000:2DA6                 call    RESET_AUTOWRAP_NVM_8D__sub_233C
seg000:2DA9                 jmp     short loc_2D60
seg000:2DAB ; ---------------------------------------------------------------------------
seg000:2DAB
seg000:2DAB loc_2DAB:                               ; CODE XREF: seg000:2DA4j
seg000:2DAB                 cmp     al, 8
seg000:2DAD                 jnz     short loc_2DB4
seg000:2DAF                 call    AUTO_REPEAT_OFF__sub_2556
seg000:2DB2                 jmp     short loc_2D60
seg000:2DB4 ; ---------------------------------------------------------------------------
seg000:2DB4
seg000:2DB4 loc_2DB4:                               ; CODE XREF: seg000:2DADj
seg000:2DB4                 cmp     al, 12h
seg000:2DB6                 jnz     short loc_2DBD
seg000:2DB8                 call    sub_25E7
seg000:2DBB                 jmp     short loc_2D60
seg000:2DBD ; ---------------------------------------------------------------------------
seg000:2DBD
seg000:2DBD loc_2DBD:                               ; CODE XREF: seg000:2DB6j
seg000:2DBD                 cmp     al, 13h
seg000:2DBF                 jnz     short loc_2D60
seg000:2DC1                 call    sub_25F5
seg000:2DC4                 jmp     short loc_2D60
seg000:2DC6
seg000:2DC6 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2DC6
seg000:2DC6
seg000:2DC6 sub_2DC6        proc near               ; CODE XREF: sub_84:loc_38ABp
seg000:2DC6                 cmp     byte ptr ds:0F54h, 0FFh
seg000:2DCB                 jz      short loc_2DD0  ;
seg000:2DCB                                         ;
seg000:2DCD                 jmp     near ptr 8006h  ; ROM_ConsoleOut     /* AL<-ASCII char
seg000:2DD0 ; ---------------------------------------------------------------------------
seg000:2DD0
seg000:2DD0 loc_2DD0:                               ; CODE XREF: sub_2DC6+5j
seg000:2DD0                 mov     cl, al
seg000:2DD2                 mov     bx, ds:0F55h
seg000:2DD6                 shl     bx, 1
seg000:2DD8                 jmp     cs:off_2DDD[bx]
seg000:2DD8 ; ---------------------------------------------------------------------------
seg000:2DDD off_2DDD        dw offset loc_2DE5      ; DATA XREF: sub_2DC6+12r
seg000:2DDF                 dw offset loc_2DF4
seg000:2DE1                 dw offset loc_2E0A
seg000:2DE3                 dw offset loc_2E17
seg000:2DE5 ; ---------------------------------------------------------------------------
seg000:2DE5
seg000:2DE5 loc_2DE5:                               ; CODE XREF: sub_2DC6+12j
seg000:2DE5                                         ; sub_2DC6+86j
seg000:2DE5                                         ; DATA XREF: sub_2DC6:off_2DDDo
seg000:2DE5                 cmp     cl, 1Bh
seg000:2DE8                 jz      short loc_2DEF  ;
seg000:2DE8                                         ;
seg000:2DEA                 mov     al, cl
seg000:2DEC                 jmp     near ptr 8045h  ; FC045 - * SEND BYTE TO PRINTER PORT *  ( PARAMETER: AL )
seg000:2DEC                                         ; - see same JMP in seg000:2E39
seg000:2DEF ; ---------------------------------------------------------------------------
seg000:2DEF
seg000:2DEF loc_2DEF:                               ; CODE XREF: sub_2DC6+22j
seg000:2DEF                                         ; sub_2DC6+39j
seg000:2DEF                                         ; sub_2DC6+4Dj
seg000:2DEF                 inc     word ptr ds:0F55h
seg000:2DF3                 retn
seg000:2DF4 ; ---------------------------------------------------------------------------
seg000:2DF4
seg000:2DF4 loc_2DF4:                               ; CODE XREF: sub_2DC6+12j
seg000:2DF4                                         ; DATA XREF: sub_2DC6+19o
seg000:2DF4                 test    byte ptr es:88h, 1 ; 0x88 :EMULATION (0=VT52 1=ANSI)
seg000:2DFA                 jz      short VT52__loc_2E03 ;
seg000:2DFA                                         ;
seg000:2DFC                 cmp     cl, 5Bh ; '['
seg000:2DFF                 jz      short loc_2DEF  ;
seg000:2DFF                                         ;
seg000:2E01                 jmp     short loc_2E28
seg000:2E03 ; ---------------------------------------------------------------------------
seg000:2E03
seg000:2E03 VT52__loc_2E03:                         ; CODE XREF: sub_2DC6+34j
seg000:2E03                 cmp     cl, 58h ; 'X'
seg000:2E06                 jz      short loc_2E1C  ;
seg000:2E06                                         ;
seg000:2E08                 jmp     short loc_2E28
seg000:2E0A ; ---------------------------------------------------------------------------
seg000:2E0A
seg000:2E0A loc_2E0A:                               ; CODE XREF: sub_2DC6+12j
seg000:2E0A                                         ; DATA XREF: sub_2DC6+1Bo
seg000:2E0A                 cmp     cl, 30h ; '0'
seg000:2E0D                 jnz     short loc_2E10  ;
seg000:2E0D                                         ;
seg000:2E0F                 retn
seg000:2E10 ; ---------------------------------------------------------------------------
seg000:2E10
seg000:2E10 loc_2E10:                               ; CODE XREF: sub_2DC6+47j
seg000:2E10                 cmp     cl, 34h ; '4'
seg000:2E13                 jz      short loc_2DEF  ;
seg000:2E13                                         ;
seg000:2E15                 jmp     short loc_2E28
seg000:2E17 ; ---------------------------------------------------------------------------
seg000:2E17
seg000:2E17 loc_2E17:                               ; CODE XREF: sub_2DC6+12j
seg000:2E17                                         ; DATA XREF: sub_2DC6+1Do
seg000:2E17                 cmp     cl, 69h ; 'i'
seg000:2E1A                 jnz     short loc_2E28
seg000:2E1C
seg000:2E1C loc_2E1C:                               ; CODE XREF: sub_2DC6+40j
seg000:2E1C                 mov     byte ptr ds:0F54h, 0
seg000:2E21                 mov     word ptr ds:0F55h, 0
seg000:2E27                 retn
seg000:2E28 ; ---------------------------------------------------------------------------
seg000:2E28
seg000:2E28 loc_2E28:                               ; CODE XREF: sub_2DC6+3Bj
seg000:2E28                                         ; sub_2DC6+42j
seg000:2E28                                         ; sub_2DC6+4Fj
seg000:2E28                                         ; sub_2DC6+54j
seg000:2E28                 cmp     cl, 1Ah
seg000:2E2B                 jz      short loc_2E3C  ;
seg000:2E2B                                         ;
seg000:2E2D                 cmp     cl, 18h
seg000:2E30                 jz      short loc_2E3C  ;
seg000:2E30                                         ;
seg000:2E32                 cmp     cl, 20h ; ' '
seg000:2E35                 ja      short loc_2E3C  ;
seg000:2E35                                         ;
seg000:2E37                 mov     al, cl
seg000:2E39                 jmp     near ptr 8045h  ; FC045 - * SEND BYTE TO PRINTER PORT *  ( PARAMETER: AL )
seg000:2E3C ; ---------------------------------------------------------------------------
seg000:2E3C
seg000:2E3C loc_2E3C:                               ; CODE XREF: sub_2DC6+65j
seg000:2E3C                                         ; sub_2DC6+6Aj
seg000:2E3C                                         ; sub_2DC6+6Fj
seg000:2E3C                 mov     si, 2E4Eh
seg000:2E3F
seg000:2E3F loc_2E3F:                               ; CODE XREF: sub_2DC6+84j
seg000:2E3F                 mov     al, cs:[si]
seg000:2E42                 call    near ptr 8045h  ; FC045 - * SEND BYTE TO PRINTER PORT *  ( PARAMETER: AL )
seg000:2E45                 inc     si
seg000:2E46                 dec     word ptr ds:0F55h
seg000:2E4A                 jnz     short loc_2E3F  ;
seg000:2E4A                                         ;
seg000:2E4C                 jmp     short loc_2DE5
seg000:2E4C sub_2DC6        endp
seg000:2E4C
seg000:2E4E ; ---------------------------------------------------------------------------
seg000:2E4E                 sbb     bx, [bp+di+34h]
seg000:2E4E ; ---------------------------------------------------------------------------
seg000:2E51                 db  69h ; i
seg000:2E52
seg000:2E52 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:2E52
seg000:2E52
seg000:2E52 sub_2E52        proc near               ; CODE XREF: sub_84:loc_382Bp
seg000:2E52                                         ; sub_84:loc_384Dp
seg000:2E52                 in      al, 2           ; SUBROUTINE: serial communication (reads & writes comm status register)
seg000:2E52                                         ;
seg000:2E52                                         ; [02] COMMUNICATIONS STATUS REGISTER - PAGE 154 (**** READ **** )
seg000:2E52                                         ;         SHOWN IN 4-30 and in 4-16 (page 154)
seg000:2E52                                         ;         Used to read status of SERIAL port, IRQ line of each CPU, and MHFU logic enable signal.
seg000:2E52                                         ;
seg000:2E52                                         ; # VALUE
seg000:2E52                                         ; 0 1     COMM RI (represents the state of RING INDICATOR - RI)
seg000:2E52                                         ; 1 2     COMM SI/SCF (state of SPEED INDICATOR LINE -or- SECONDARY RECEIVE LINE SIGNAL DETECT)
seg000:2E52                                         ; 2 4     COMM DSR (state of DATA SET READY)
seg000:2E52                                         ; 3 8     COMM CTS (state of CLEAR TO SEND)
seg000:2E52                                         ; 4 $10   COMM RLSD (RECEIVE LINE SIGNAL DETECT)
seg000:2E54                 mov     dl, al
seg000:2E56                 xor     dl, 0FFh        ; INVERT BITS
seg000:2E59                 and     dl, 1Eh         ; MASK 00011110 (dont care for RI)
seg000:2E5C                 test    byte ptr es:9Fh, 1
seg000:2E62                 jz      short loc_2E7E  ;
seg000:2E62                                         ;
seg000:2E64                 cli                     ; inhibit interrupts.
seg000:2E65                 test    byte ptr ds:0FE5h, 80h
seg000:2E6A                 mov     byte ptr ds:0FE5h, 0
seg000:2E6F                 mov     byte ptr ds:0FE8h, 0
seg000:2E74                 sti                     ; allow interrupts.
seg000:2E75                 jnz     short LOOP__loc_2E78 ;
seg000:2E75                                         ;
seg000:2E77                 retn
seg000:2E78 ; ---------------------------------------------------------------------------
seg000:2E78
seg000:2E78 LOOP__loc_2E78:                         ; CODE XREF: sub_2E52+23j
seg000:2E78                                         ; sub_2E52+5Aj
seg000:2E78                                         ; sub_2E52+66j
seg000:2E78                                         ; sub_2E52+6Dj
seg000:2E78                 mov     bx, 2F85h
seg000:2E7B                 jmp     loc_2F07
seg000:2E7E ; ---------------------------------------------------------------------------
seg000:2E7E
seg000:2E7E loc_2E7E:                               ; CODE XREF: sub_2E52+10j
seg000:2E7E                 cmp     byte ptr ds:0FEEh, 1
seg000:2E83                 jnz     short loc_2E8F  ;
seg000:2E83                                         ;
seg000:2E85                 test    dl, 2
seg000:2E88                 jz      short loc_2E8F  ;
seg000:2E88                                         ;
seg000:2E8A                 mov     al, 88h ; 'ê'   ; Set 1200 / 1200 bps
seg000:2E8C                 call    TX_RX_RATE_from_AL__sub_31BE ; set transmit / receive BIT RATE(s)
seg000:2E8F
seg000:2E8F loc_2E8F:                               ; CODE XREF: sub_2E52+31j
seg000:2E8F                                         ; sub_2E52+36j
seg000:2E8F                 cmp     word ptr ds:0FE9h, 0
seg000:2E94                 jnz     short loc_2E99
seg000:2E96                 or      dl, 1
seg000:2E99
seg000:2E99 loc_2E99:                               ; CODE XREF: sub_2E52+42j
seg000:2E99                 cli                     ; inhibit interrupts.
seg000:2E9A                 rcl     byte ptr ds:0FE5h, 1
seg000:2E9E                 mov     al, ds:0FE8h
seg000:2EA1                 mov     byte ptr ds:0FE5h, 0
seg000:2EA6                 mov     byte ptr ds:0FE8h, 0
seg000:2EAB                 sti                     ; allow interrupts.
seg000:2EAC                 jb      short LOOP__loc_2E78 ;
seg000:2EAC                                         ;
seg000:2EAE                 rcl     al, 1
seg000:2EB0                 jnb     short loc_2ECB  ;
seg000:2EB0                                         ;
seg000:2EB2                 test    byte ptr es:9Ah, 1 ; 0x9A DISCON CHAR USE (0=DISABLE 1=ENABLE)
seg000:2EB8                 jz      short LOOP__loc_2E78 ;
seg000:2EB8                                         ;
seg000:2EBA                 test    byte ptr ds:0FECh, 20h
seg000:2EBF                 jz      short LOOP__loc_2E78 ;
seg000:2EBF                                         ;
seg000:2EC1                 mov     al, 4
seg000:2EC3                 call    sub_33FF
seg000:2EC6                 mov     bx, 2F79h
seg000:2EC9                 jmp     short loc_2F07
seg000:2ECB ; ---------------------------------------------------------------------------
seg000:2ECB
seg000:2ECB loc_2ECB:                               ; CODE XREF: sub_2E52+5Ej
seg000:2ECB                 or      dl, al
seg000:2ECD                 call    sub_34D7
seg000:2ED0                 jz      short loc_2ED5  ;
seg000:2ED0                                         ;
seg000:2ED2                 or      dl, 20h
seg000:2ED5
seg000:2ED5 loc_2ED5:                               ; CODE XREF: sub_2E52+7Ej
seg000:2ED5                 mov     bx, ds:0FE6h
seg000:2ED9                 test    byte ptr cs:[bx], 0C0h
seg000:2EDD                 jz      short loc_2EE2  ;
seg000:2EDD                                         ;
seg000:2EDF                 add     bx, 2
seg000:2EE2
seg000:2EE2 loc_2EE2:                               ; CODE XREF: sub_2E52+8Bj
seg000:2EE2                 xor     dl, cs:[bx+1]
seg000:2EE6                 xor     dl, 0FFh
seg000:2EE9                 mov     cl, cs:[bx+2]
seg000:2EED                 and     dl, cl
seg000:2EEF                 jnz     short loc_2EF2
seg000:2EF1                 retn
seg000:2EF2 ; ---------------------------------------------------------------------------
seg000:2EF2
seg000:2EF2 loc_2EF2:                               ; CODE XREF: sub_2E52+9Dj
seg000:2EF2                 add     bx, 1
seg000:2EF5
seg000:2EF5 loc_2EF5:                               ; CODE XREF: sub_2E52+B0j
seg000:2EF5                 add     bx, 2
seg000:2EF8
seg000:2EF8 loc_2EF8:                               ; CODE XREF: sub_2E52+ACj
seg000:2EF8                 rcl     cl, 1
seg000:2EFA                 jb      short loc_2F00
seg000:2EFC                 rcl     dl, 1
seg000:2EFE                 jmp     short loc_2EF8
seg000:2F00 ; ---------------------------------------------------------------------------
seg000:2F00
seg000:2F00 loc_2F00:                               ; CODE XREF: sub_2E52+A8j
seg000:2F00                 rcl     dl, 1
seg000:2F02                 jnb     short loc_2EF5
seg000:2F04                 mov     bx, cs:[bx]
seg000:2F07
seg000:2F07 loc_2F07:                               ; CODE XREF: sub_2E52+29j
seg000:2F07                                         ; sub_2E52+77j
seg000:2F07                                         ; sub_2E52+120j
seg000:2F07                                         ; sub_2E52+125j
seg000:2F07                 mov     ds:0FE6h, bx
seg000:2F0B                 cmp     byte ptr cs:[bx], 0FFh
seg000:2F0F                 jz      short loc_2F68  ;
seg000:2F0F                                         ;
seg000:2F11                 mov     al, cs:[bx]
seg000:2F14                 mov     dh, al
seg000:2F16                 and     al, 0Eh         ; MASK 1110
seg000:2F18                 mov     ah, es:0A2h
seg000:2F1D                 and     ah, 0Fh         ; MASK 1111
seg000:2F20                 cmp     ah, 8
seg000:2F23                 jb      short loc_2F27
seg000:2F25                 or      al, 1           ; SPEED SELECT flag in [02] will be 0 after next XOR
seg000:2F27
seg000:2F27 loc_2F27:                               ; CODE XREF: sub_2E52+D1j
seg000:2F27                 xor     al, 0FFh        ; * invert *
seg000:2F29                 out     2, al           ; [02] COMMUNICATIONS CONTROL REGISTER - PAGE 155 (**** WRITE **** )
seg000:2F29                                         ;      SHOWN IN 4-31, bits in 4-17 = PAGE 155
seg000:2F29                                         ;         Used to set / write MODEM (SERIAL) + DIAGNOSTIC LEDs :
seg000:2F29                                         ; 0 1     COMM SPD SEL H (controls SPEED SELECT line on COMM port)
seg000:2F29                                         ; 1 2     COMM SRTS H (controls SECONDARY REQUEST TO SEND line on COMM port)
seg000:2F29                                         ; 2 4     COMM DTR L
seg000:2F29                                         ; 3 8     COMM RTS
seg000:2F29                                         ; 4 $10   LED D3 (LSB)
seg000:2F29                                         ; 5 $20   LED D6
seg000:2F29                                         ; 6 $40   LED D4
seg000:2F29                                         ; 7 $80   LED D5
seg000:2F2B                 sub     ax, ax
seg000:2F2D                 test    dh, 0C0h
seg000:2F30                 jz      short loc_2F5E  ;
seg000:2F30                                         ;
seg000:2F32                 test    byte ptr es:91h, 1 ; NVM 0x91 : POWER (0=60 Hz 1=50 Hz)
seg000:2F38                 jnz     short loc_2F3B
seg000:2F3A                 inc     bx
seg000:2F3B
seg000:2F3B loc_2F3B:                               ; CODE XREF: sub_2E52+E6j
seg000:2F3B                 mov     al, cs:[bx+1]
seg000:2F3F                 test    dh, 80h
seg000:2F42                 jz      short loc_2F4C  ;
seg000:2F42                                         ;
seg000:2F44                 shl     ax, 1
seg000:2F46                 shl     ax, 1
seg000:2F48                 shl     ax, 1
seg000:2F4A                 shl     ax, 1
seg000:2F4C
seg000:2F4C loc_2F4C:                               ; CODE XREF: sub_2E52+F0j
seg000:2F4C                 cli                     ; inhibit interrupts.
seg000:2F4D                 mov     ds:0FE9h, ax
seg000:2F50                 test    dh, 1
seg000:2F53                 jz      short loc_2F5D  ;
seg000:2F53                                         ;
seg000:2F55                 mov     ds:0ED3h, ax
seg000:2F58                 sub     al, al
seg000:2F5A                 call    COMM_CTRL_STATUS__sub_34BB
seg000:2F5D
seg000:2F5D loc_2F5D:                               ; CODE XREF: sub_2E52+101j
seg000:2F5D                 sti                     ; allow interrupts.
seg000:2F5E
seg000:2F5E loc_2F5E:                               ; CODE XREF: sub_2E52+DEj
seg000:2F5E                 and     dh, 30h
seg000:2F61                 mov     ds:0FECh, dh
seg000:2F65                 jmp     WAIT_LED_ON_or_OFF__sub_30CA
seg000:2F68 ; ---------------------------------------------------------------------------
seg000:2F68
seg000:2F68 loc_2F68:                               ; CODE XREF: sub_2E52+BDj
seg000:2F68                 call    word ptr cs:[bx+1]
seg000:2F6C                 jz      short loc_2F74  ;
seg000:2F6C                                         ;
seg000:2F6E                 mov     bx, cs:[bx+3]
seg000:2F72                 jmp     short loc_2F07
seg000:2F74 ; ---------------------------------------------------------------------------
seg000:2F74
seg000:2F74 loc_2F74:                               ; CODE XREF: sub_2E52+11Aj
seg000:2F74                 add     bx, 5
seg000:2F77                 jmp     short loc_2F07
seg000:2F77 sub_2E52        endp
seg000:2F77
seg000:2F77 ; ---------------------------------------------------------------------------
seg000:2F79                 db  6Ch ; l
seg000:2F7A                 db  0Bh
seg000:2F7B                 db  0Dh
seg000:2F7C                 db    1
seg000:2F7D                 db    1
seg000:2F7E                 db 80h,2Fh              ; 0 ; $2f80 (?)
seg000:2F80                 db  2Ch ; ,
seg000:2F81                 db  20h
seg000:2F82                 db  20h
seg000:2F83                 db  85h ; à
seg000:2F84                 db  2Fh ; /
seg000:2F85                 db  40h ; @
seg000:2F86                 db  0Bh
seg000:2F87                 db  0Dh
seg000:2F88                 db    1
seg000:2F89                 db    1
seg000:2F8A                 db 8Ch,2Fh              ; 0 ; $2f8c (?)
seg000:2F8C                 db  40h ; @
seg000:2F8D                 db  5Ah ; Z
seg000:2F8E                 db  6Ch ; l
seg000:2F8F                 db    1
seg000:2F90                 db    5
seg000:2F91                 db  95h ; ò
seg000:2F92                 db  2Fh ; /
seg000:2F93                 db 95h,2Fh              ; 0 ; $2f95 (?)
seg000:2F95                 db 0FFh
seg000:2F96                 db 0A2h ; ó
seg000:2F97                 db  30h ; 0
seg000:2F98                 db 0A4h ; ñ
seg000:2F99                 db  2Fh ; /
seg000:2F9A                 db 0FFh
seg000:2F9B                 db  5Ch ; \
seg000:2F9C                 db  30h ; 0
seg000:2F9D                 db 9Fh,2Fh              ; 0 ; $2f9f (?)
seg000:2F9F                 db  3Ch ; <
seg000:2FA0                 db  80h ; Ç
seg000:2FA1                 db  80h ; Ç
seg000:2FA2                 db  49h ; I
seg000:2FA3                 db  30h ; 0
seg000:2FA4                 db  0Ch
seg000:2FA5                 db    4
seg000:2FA6                 db    4
seg000:2FA7                 db 0A9h,2Fh             ; 0 ; $2fa9 (?)
seg000:2FA9                 db 0FFh
seg000:2FAA                 db 0B0h ; ¦
seg000:2FAB                 db  30h ; 0
seg000:2FAC                 db 0AEh ; «
seg000:2FAD                 db  2Fh ; /
seg000:2FAE                 db  4Ch ; L
seg000:2FAF                 db  19h
seg000:2FB0                 db  1Eh
seg000:2FB1                 db    1
seg000:2FB2                 db    1
seg000:2FB3                 db 0B5h,2Fh             ; 0 ; $2fb5 (?)
seg000:2FB5                 db  8Ch ; î
seg000:2FB6                 db  5Eh ; ^
seg000:2FB7                 db  70h ; p
seg000:2FB8                 db  11h
seg000:2FB9                 db  11h
seg000:2FBA                 db 0BEh ; +
seg000:2FBB                 db  2Fh ; /
seg000:2FBC                 db  85h ; à
seg000:2FBD                 db  2Fh ; /
seg000:2FBE                 db  1Ch
seg000:2FBF                 db    9
seg000:2FC0                 db    9
seg000:2FC1                 db 0C5h,2Fh             ; 0 ; $2fc5 (?)
seg000:2FC3                 db  85h ; à
seg000:2FC4                 db  2Fh ; /
seg000:2FC5                 db 0FFh
seg000:2FC6                 db  5Ch ; \
seg000:2FC7                 db  30h ; 0
seg000:2FC8                 db 0D1h ; -
seg000:2FC9                 db  2Fh ; /
seg000:2FCA                 db  5Ch ; \
seg000:2FCB                 db  19h
seg000:2FCC                 db  1Eh
seg000:2FCD                 db    1
seg000:2FCE                 db    1
seg000:2FCF                 db 0D1h,2Fh             ; 0 ; $2fd1 (?)
seg000:2FD1                 db  3Ch ; <
seg000:2FD2                 db  80h ; Ç
seg000:2FD3                 db  9Ch ; £
seg000:2FD4                 db  23h ; #
seg000:2FD5                 db  30h ; 0
seg000:2FD6                 db 0DCh ; _
seg000:2FD7                 db  2Fh ; /
seg000:2FD8                 db 0FFh
seg000:2FD9                 db  2Fh ; /
seg000:2FDA                 db  85h ; à
seg000:2FDB                 db  2Fh ; /
seg000:2FDC                 db 0FFh
seg000:2FDD                 db  9Bh ; ¢
seg000:2FDE                 db  30h ; 0
seg000:2FDF                 db 0F0h ; =
seg000:2FE0                 db  2Fh ; /
seg000:2FE1                 db  6Ch ; l
seg000:2FE2                 db    3
seg000:2FE3                 db    4
seg000:2FE4                 db  91h ; æ
seg000:2FE5                 db  9Dh ; ¥
seg000:2FE6                 db  36h ; 6
seg000:2FE7                 db  30h ; 0
seg000:2FE8                 db 0D1h ; -
seg000:2FE9                 db  2Fh ; /
seg000:2FEA                 db  0Dh
seg000:2FEB                 db  30h ; 0
seg000:2FEC                 db  85h ; à
seg000:2FED                 db  2Fh ; /
seg000:2FEE                 db  85h ; à
seg000:2FEF                 db  2Fh ; /
seg000:2FF0                 db  6Ch ; l
seg000:2FF1                 db  64h ; d
seg000:2FF2                 db  78h ; x
seg000:2FF3                 db  91h ; æ
seg000:2FF4                 db  9Dh ; ¥
seg000:2FF5                 db  36h ; 6
seg000:2FF6                 db  30h ; 0
seg000:2FF7                 db 0D1h ; -
seg000:2FF8                 db  2Fh ; /
seg000:2FF9                 db  18h
seg000:2FFA                 db  30h ; 0
seg000:2FFB                 db  85h ; à
seg000:2FFC                 db  2Fh ; /
seg000:2FFD                 db  85h ; à
seg000:2FFE                 db  2Fh ; /
seg000:2FFF                 db  1Ch
seg000:3000                 db    8
seg000:3001                 db  1Ch
seg000:3002                 db    8
seg000:3003                 db  30h ; 0
seg000:3004                 db 0D1h ; -
seg000:3005                 db  2Fh ; /
seg000:3006                 db  85h ; à
seg000:3007                 db  2Fh ; /
seg000:3008 word_3008       dw 9BFFh                ; DATA XREF: sub_CC2+5w
seg000:300A                 dw 1830h
seg000:300C                 dw 4C30h
seg000:300E                 dw 403h
seg000:3010                 dw 1511h
seg000:3012                 dw 2FFFh
seg000:3014                 dw 2F85h
seg000:3016                 dw 2F85h
seg000:3018                 dw 644Ch
seg000:301A                 dw 1178h
seg000:301C                 dw 0FF15h
seg000:301E                 dw 852Fh
seg000:3020                 dw 852Fh
seg000:3022                 dw 1C2Fh
seg000:3024                 dw 2020h
seg000:3026                 dw 3028h
seg000:3028                 dw 0E5Dh
seg000:302A unk_302A        db  10h                 ; DATA XREF: seg000:0A4Ew
seg000:302A                                         ; INIT_132cols_60Hz_NI__sub_AE2:VIDEO_VFR_ERROR10__loc_B17w
seg000:302A                                         ; INIT_132cols_60Hz_NI__sub_AE2:loc_B25w
seg000:302A                                         ; SET_DIAG_LEDs_EMIT_STRING_may_HANG__sub_B4C+8r
seg000:302A                                         ; sub_84+C37w
seg000:302B                 db    1
seg000:302C unk_302C        db    1                 ; DATA XREF: sub_CC2+Fw
seg000:302C                                         ; sub_CC2+57w sub_D48+11r
seg000:302D                 db  2Fh ; /
seg000:302E                 db  30h ; 0
seg000:302F                 db  5Ch ; \
seg000:3030 unk_3030        db    5                 ; DATA XREF: seg000:1701w
seg000:3030                                         ; seg000:1711r
seg000:3030                                         ; TEST_PRN__sub_1718+5w
seg000:3030                                         ; TEST_PRN__sub_1718+17r
seg000:3030                                         ; TEST_COMM___sub_195A+3Fr
seg000:3030                                         ; TEST_COMM___sub_195A+51w
seg000:3030                                         ; NEXT_TEST_KBD__sub_19B2+76r
seg000:3031 unk_3031        db    6                 ; DATA XREF: INIT_132cols_60Hz_NI__sub_AE2+1Fr
seg000:3031                                         ; INIT_132cols_60Hz_NI__sub_AE2+2Cr
seg000:3031                                         ; sub_B2C+1w
seg000:3031                                         ; sub_B2C:loc_B38r
seg000:3031                                         ; sub_C06+1Ew
seg000:3031                                         ; sub_C06:loc_C53r
seg000:3031                                         ; seg000:175Dw
seg000:3031                                         ; seg000:186Br
seg000:3031                                         ; sub_18D4+14r
seg000:3031                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45r
seg000:3031                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45:loc_1A4Cr
seg000:3031                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+39r
seg000:3032                 db    1
seg000:3033 unk_3033        db    1                 ; DATA XREF: seg000:18B6r
seg000:3033                                         ; seg000:18BDw
seg000:3033                                         ; TEST_COMM___sub_195A+5w
seg000:3033                                         ; NEXT_TEST_KBD__sub_19B2+Ew
seg000:3033                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+1Dr
seg000:3034 unk_3034        db 0D1h ; -             ; DATA XREF: seg000:1896r
seg000:3034                                         ; seg000:189Dw
seg000:3035 unk_3035        db  2Fh ; /             ; DATA XREF: TEST_PRN__sub_1718+9w
seg000:3035                                         ; TEST_PRN__sub_1718+1Br
seg000:3035                                         ; seg000:1875w
seg000:3035                                         ; seg000:18A7w
seg000:3035                                         ; seg000:18C7w
seg000:3035                                         ; TEST_COMM___sub_195A+8w
seg000:3035                                         ; TEST_COMM___sub_195A+30r
seg000:3035                                         ; NEXT_TEST_KBD__sub_19B2+1Ew
seg000:3035                                         ; NEXT_TEST_KBD__sub_19B2+5Dr
seg000:3035                                         ; NEXT_TEST_KBD__sub_19B2+67r
seg000:3035                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45:LOOP_IF_NO_ERROR__loc_1A55r
seg000:3035                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+3Fw
seg000:3035                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45:ERROR_BIT5__loc_1AB5w
seg000:3035                                         ;
seg000:3035                                         ; Values here might be used for evaluating keyboard responses;
seg000:3035                                         ; - see for example code around 1a45 (RBLOW.16K)
seg000:3035                                         ;
seg000:3036 unk_3036        db  0Ch                 ; DATA XREF: seg000:1871w
seg000:3036                                         ; seg000:1892r
seg000:3036                                         ; seg000:18A1r
seg000:3036                                         ; seg000:18B2r
seg000:3036                                         ; seg000:18C1r
seg000:3036                                         ; sub_18D4+10w
seg000:3036                                         ; KBD_PRN_COM_DIAG_3035__sub_1A45+2Ar
seg000:3037 unk_3037        db  20h                 ; DATA XREF: seg000:184Ar
seg000:3037                                         ; seg000:1851w
seg000:3037                                         ; NEXT_TEST_KBD__sub_19B2+16w
seg000:3038 unk_3038        db  20h                 ; DATA XREF: seg000:1855r
seg000:3038                                         ; NEXT_TEST_KBD__sub_19B2+1Bw
seg000:3039 byte_3039       db 3Bh,30h              ; 0 ; DATA XREF: seg000:186Ew
seg000:3039                                         ;                                     $303b (?)
seg000:303B unk_303B        db  4Dh ; M             ; DATA XREF: seg000:loc_1867w
seg000:303B                                         ; NEXT_TEST_KBD__sub_19B2+11w
seg000:303C unk_303C        db  0Eh                 ; DATA XREF: seg000:1837w
seg000:303C                                         ; $303c is XORed by code @ 1aa9
seg000:303D                 db  10h
seg000:303E                 db    1
seg000:303F                 db    1
seg000:3040                 db 42h,30h              ; 0 ; $3042 (?)
seg000:3042                 db  4Ch ; L
seg000:3043                 db    5
seg000:3044                 db    6
seg000:3045                 db    1
seg000:3046                 db    1
seg000:3047                 db 0DCh ; _
seg000:3048                 db  2Fh ; /
seg000:3049                 db  1Ch
seg000:304A                 db  20h
seg000:304B                 db  20h
seg000:304C                 db 4Eh,30h              ; 0 ; $304e (?)
seg000:304E                 db  5Dh ; ]
seg000:304F                 db  0Eh
seg000:3050                 db  10h
seg000:3051                 db    1
seg000:3052                 db    1
seg000:3053                 db 55h,30h              ; 0 ; $3055 (?)
seg000:3055                 db  5Ch ; \
seg000:3056                 db    5
seg000:3057                 db    6
seg000:3058                 db    1
seg000:3059                 db    1
seg000:305A                 db  9Fh ; ƒ
seg000:305B                 db  2Fh ; /
seg000:305C                 db 0F6h ; ÷
seg000:305D                 db    6
seg000:305E                 db 0EBh ; d
seg000:305F                 db  0Fh
seg000:3060                 db    1
seg000:3061                 db  74h ; t
seg000:3062                 db    1
seg000:3063                 db 0C3h ; +
seg000:3064                 db  80h ; Ç
seg000:3065                 db  0Eh
seg000:3066                 db 0EBh ; d
seg000:3067                 db  0Fh
seg000:3068                 db    1
seg000:3069                 db 0C6h ; ¦
seg000:306A                 db    6
seg000:306B                 db 0CCh ; ¦
seg000:306C                 db  0Fh
seg000:306D                 db    0
seg000:306E                 db  26h ; &
seg000:306F                 db 0F6h ; ÷
seg000:3070                 db    6
seg000:3071                 db  94h ; ö
seg000:3072                 db    0
seg000:3073                 db    1
seg000:3074                 db  74h ; t
seg000:3075                 db  0Ah
seg000:3076                 db 0C6h ; ¦
seg000:3077                 db    6
seg000:3078                 db 0B7h ; +
seg000:3079                 db  0Fh
seg000:307A                 db    1
seg000:307B                 db 0C6h ; ¦
seg000:307C                 db    6
seg000:307D                 db 0B8h ; +
seg000:307E                 db  0Fh
seg000:307F                 db  11h
seg000:3080                 db  26h ; &
seg000:3081                 db 0F6h ; ÷
seg000:3082                 db    6
seg000:3083                 db  99h ; Ö
seg000:3084                 db    0
seg000:3085                 db    1
seg000:3086                 db  74h ; t
seg000:3087                 db  10h
seg000:3088                 db  53h ; S
seg000:3089                 db  52h ; R
seg000:308A                 db 0BBh ; +
seg000:308B                 db 0D0h ; -
seg000:308C                 db  0Fh
seg000:308D                 db 0E8h ; F
seg000:308E                 db  62h ; b
seg000:308F                 db    0
seg000:3090                 db 0A0h ; á
seg000:3091                 db 0D0h ; -
seg000:3092                 db  0Fh
seg000:3093                 db 0A2h ; ó
seg000:3094                 db 0CFh ; -
seg000:3095                 db  0Fh
seg000:3096                 db  5Ah ; Z
seg000:3097                 db  5Bh ; [
seg000:3098                 db  28h ; (
seg000:3099                 db 0C0h ; +
seg000:309A                 db 0C3h ; +
seg000:309B                 db  26h ; &
seg000:309C                 db 0F6h ; ÷
seg000:309D                 db    6
seg000:309E                 db  9Bh ; ¢
seg000:309F                 db    0
seg000:30A0                 db    1
seg000:30A1                 db 0C3h ; +
seg000:30A2                 db  80h ; Ç
seg000:30A3                 db  26h ; &
seg000:30A4                 db 0EBh ; d
seg000:30A5                 db  0Fh
seg000:30A6                 db 0F2h ; =
seg000:30A7                 db 0E8h ; F
seg000:30A8                 db 0A1h ; í
seg000:30A9                 db  4Fh ; O
seg000:30AA                 db  80h ; Ç
seg000:30AB                 db  3Eh ; >
seg000:30AC                 db 0EEh ; e
seg000:30AD                 db  0Fh
seg000:30AE                 db    0
seg000:30AF                 db 0C3h ; +
seg000:30B0                 db  53h ; S
seg000:30B1                 db  52h ; R
seg000:30B2                 db 0E8h ; F
seg000:30B3                 db  66h ; f
seg000:30B4                 db  4Fh ; O
seg000:30B5                 db 0E8h ; F
seg000:30B6                 db 0BFh ; +
seg000:30B7                 db    0
seg000:30B8                 db 0E8h ; F
seg000:30B9                 db 0F4h ; (
seg000:30BA                 db    0
seg000:30BB                 db 0E8h ; F
seg000:30BC                 db  78h ; x
seg000:30BD                 db  4Fh ; O
seg000:30BE                 db 0E8h ; F
seg000:30BF                 db  35h ; 5
seg000:30C0                 db 0F2h ; =
seg000:30C1                 db 0E8h ; F
seg000:30C2                 db  40h ; @
seg000:30C3                 db 0F2h ; =
seg000:30C4                 db 0E8h ; F
seg000:30C5                 db  95h ; ò
seg000:30C6                 db 0F2h ; =
seg000:30C7                 db  5Ah ; Z
seg000:30C8                 db  5Bh ; [
seg000:30C9                 db 0C3h ; +
seg000:30CA
seg000:30CA ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:30CA
seg000:30CA
seg000:30CA WAIT_LED_ON_or_OFF__sub_30CA proc near  ; CODE XREF: sub_2E52+113j
seg000:30CA                                         ; sub_84+3769p
seg000:30CA                 test    byte ptr es:9Fh, 1
seg000:30D0                 jnz     short loc_30E3  ;
seg000:30D0                                         ;
seg000:30D2                 test    byte ptr ds:0FECh, 20h
seg000:30D7                 jnz     short loc_30E3
seg000:30D9                 cli                     ;
seg000:30D9                                         ;
seg000:30DA                 or      byte ptr ds:0F90h, 80h
seg000:30DF                 mov     al, 13h         ; $13 = light LEDs
seg000:30E1                 jmp     short LED_ON__loc_30EB
seg000:30E3 ; ---------------------------------------------------------------------------
seg000:30E3
seg000:30E3 loc_30E3:                               ; CODE XREF: WAIT_LED_ON_or_OFF__sub_30CA+6j
seg000:30E3                                         ; WAIT_LED_ON_or_OFF__sub_30CA+Dj
seg000:30E3                 cli
seg000:30E4                 and     byte ptr ds:0F90h, 7Fh
seg000:30E9                 mov     al, 11h         ; $11 = turn off LEDs
seg000:30EB
seg000:30EB LED_ON__loc_30EB:                       ; CODE XREF: WAIT_LED_ON_or_OFF__sub_30CA+17j
seg000:30EB                 mov     ah, 81h ; 'ü'   ; * WAIT LED *
seg000:30ED                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:30F0                 sti
seg000:30F1                 retn
seg000:30F1 WAIT_LED_ON_or_OFF__sub_30CA endp
seg000:30F1
seg000:30F2
seg000:30F2 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:30F2
seg000:30F2
seg000:30F2 sub_30F2        proc near               ; CODE XREF: sub_5Aj
seg000:30F2                 mov     di, 0AEh ; '«'
seg000:30F5                 mov     dl, es:[di]
seg000:30F8                 mov     dh, es:[di+1]
seg000:30FC                 and     dl, 0Fh
seg000:30FF                 shl     dh, 1
seg000:3101                 shl     dh, 1
seg000:3103                 shl     dh, 1
seg000:3105                 shl     dh, 1
seg000:3107                 or      dh, dl
seg000:3109                 mov     si, bx
seg000:310B                 mov     bx, 1
seg000:310E
seg000:310E loc_310E:                               ; CODE XREF: sub_30F2+3Fj
seg000:310E                 shl     bx, 1
seg000:3110                 mov     al, es:[bx+di]
seg000:3113                 and     al, 0Fh
seg000:3115                 mov     ah, es:[bx+di+1]
seg000:3119                 shl     ah, 1
seg000:311B                 shl     ah, 1
seg000:311D                 shl     ah, 1
seg000:311F                 shl     ah, 1
seg000:3121                 or      ah, al
seg000:3123                 shr     bx, 1
seg000:3125                 cmp     dh, ah
seg000:3127                 jz      short loc_3133
seg000:3129                 mov     [bx+si], ah
seg000:312B                 cmp     bl, 14h
seg000:312E                 jz      short loc_3134
seg000:3130                 inc     bx
seg000:3131                 jmp     short loc_310E
seg000:3133 ; ---------------------------------------------------------------------------
seg000:3133
seg000:3133 loc_3133:                               ; CODE XREF: sub_30F2+35j
seg000:3133                 dec     bx
seg000:3134
seg000:3134 loc_3134:                               ; CODE XREF: sub_30F2+3Cj
seg000:3134                 mov     [si], bl
seg000:3136                 retn
seg000:3136 sub_30F2        endp
seg000:3136
seg000:3137 ; ---------------------------------------------------------------------------
seg000:3137                 mov     al, 0FFh
seg000:3139                 jmp     COMM_CTRL_STATUS__sub_34BB
seg000:313C ; ---------------------------------------------------------------------------
seg000:313C                 dec     word ptr ds:0FE9h
seg000:3140                 jns     short locret_3146
seg000:3142                 inc     word ptr ds:0FE9h
seg000:3146
seg000:3146 locret_3146:                            ; CODE XREF: seg000:3140j
seg000:3146                 retn
seg000:3147 ; ---------------------------------------------------------------------------
seg000:3147                 inc     bp
seg000:3148                 inc     di
seg000:3149                 inc     sp
seg000:314A                 inc     sp
seg000:314B                 inc     sp
seg000:314C                 inc     bp
seg000:314D                 inc     di
seg000:314E                 inc     sp
seg000:314F                 dec     bp
seg000:3150                 dec     di
seg000:3151                 dec     sp
seg000:3152                 dec     sp
seg000:3153                 dec     sp
seg000:3154                 dec     bp
seg000:3155                 dec     di
seg000:3156                 dec     sp
seg000:3157
seg000:3157 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3157
seg000:3157
seg000:3157 ROM_Initialize7201__3157 proc near      ; CODE XREF: sub_1D78+39p
seg000:3157                                         ; ROM_Initialize7201__1F09j
seg000:3157                                         ; sub_84+378Dp
seg000:3157                 in      al, 0Ah         ; ------------------------------------------------------
seg000:3157                                         ; "Initialize 7201 to NVM values"     0x16  /* DL<-0
seg000:3157                                         ; ------------------------------------------------------
seg000:3157                                         ;
seg000:3157                                         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:3157                                         ;      See TABLE 4-29 and 4-15
seg000:3157                                         ; #       VALUE
seg000:3157                                         ; 0       1       ZRESET L (represents the state of bit 0 of the 8088 diagnostic write register)
seg000:3157                                         ; 1-3     -       state of W13, W14 and W15 MANUFACTURING TEST JUMPERS (normally high = 1)
seg000:3157                                         ; ...
seg000:3159                 test    al, 4           ; W14 ?
seg000:315B                 jz      short W13_W14_ABORT__locret_3176
seg000:315D                 test    dl, 2
seg000:3160                 jnz     short W13_W14_ABORT__locret_3176 ;
seg000:3160                                         ;
seg000:3162                 call    HOUSEKEEP_CON_TERM__sub_3177
seg000:3165                 call    HANDLE_BITRATES_NVRAM__sub_31A4
seg000:3168                 call    CONTROL_STATUS__sub_31C1
seg000:316B                 in      al, 43h
seg000:316D                 test    al, 20h
seg000:316F                 jz      short W13_W14_ABORT__locret_3176 ;
seg000:316F                                         ;
seg000:3171                 or      byte ptr ds:1EF8h, 18h
seg000:3176
seg000:3176 W13_W14_ABORT__locret_3176:             ; CODE XREF: ROM_Initialize7201__3157+4j
seg000:3176                                         ; ROM_Initialize7201__3157+9j
seg000:3176                                         ; ROM_Initialize7201__3157+18j
seg000:3176                 retn
seg000:3176 ROM_Initialize7201__3157 endp
seg000:3176
seg000:3177
seg000:3177 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3177
seg000:3177
seg000:3177 HOUSEKEEP_CON_TERM__sub_3177 proc near  ; CODE XREF: ROM_Initialize7201__3157+Bp
seg000:3177                 test    word ptr ds:1FFEh, 1 ; are we in CONSOLE or TERMINAL MODE ?
seg000:317D                 jz      short loc_3199  ;
seg000:317D                                         ;
seg000:317F                 push    ds              ; Initialize 5000, 5001, 5003, 5006 in first bank
seg000:3180                 xor     ax, ax
seg000:3182                 mov     ds, ax
seg000:3184                 assume es:nothing, ds:nothing
seg000:3184                 and     byte ptr ds:5000h, 88h ; 10001000 zero all bits except bits 3 + 7
seg000:3189                 mov     ds:5006h, al    ; zero -> 5006
seg000:318C                 mov     word ptr ds:5001h, 5200h ; ?
seg000:3192                 mov     word ptr ds:5003h, 5200h ; ?
seg000:3198                 pop     ds
seg000:3199
seg000:3199 loc_3199:                               ; CODE XREF: HOUSEKEEP_CON_TERM__sub_3177+6j
seg000:3199                 and     byte ptr ds:loc_F65+1, 88h
seg000:319E                 mov     byte ptr ds:loc_F6B, 11h
seg000:31A3                 retn
seg000:31A3 HOUSEKEEP_CON_TERM__sub_3177 endp
seg000:31A3
seg000:31A4
seg000:31A4 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:31A4
seg000:31A4
seg000:31A4                 public HANDLE_BITRATES_NVRAM__sub_31A4
seg000:31A4 HANDLE_BITRATES_NVRAM__sub_31A4 proc near
seg000:31A4                                         ; CODE XREF: j_PRINTER_BITRATE__sub_31A4j
seg000:31A4                                         ; ROM_Initialize7201__3157+Ep
seg000:31A4                 mov     al, byte ptr es:loc_A6 ; NVRAM $a6: PRINTER: Baud rate send + receive (2 = 300 etc.)
seg000:31A8                 and     al, 7
seg000:31AA                 out     0Eh, al         ; Communicates with PORT 0e
seg000:31AA                                         ; = PRINTER BIT RATE REGISTER /  WO.
seg000:31AC                 call    PRINTERCONTROL_STATUS__sub_3219
seg000:31AF                 mov     al, byte ptr es:loc_A2 ; NVRAM $a2: Communications baud rate RECEIVE (8 = 1200 etc.)
seg000:31B3                 mov     cl, 4
seg000:31B5                 shl     al, cl
seg000:31B7                 mov     ah, byte ptr es:loc_A0+1 ; NVRAM $a1: Communications baud rate SEND (8 = 1200 etc.)
seg000:31BC                 shr     ax, cl
seg000:31BC HANDLE_BITRATES_NVRAM__sub_31A4 endp
seg000:31BC
seg000:31BE
seg000:31BE ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:31BE
seg000:31BE
seg000:31BE TX_RX_RATE_from_AL__sub_31BE proc near  ; CODE XREF: sub_2E52+3Ap
seg000:31BE                 out     6, al           ; --------------------------------------------
seg000:31BE                                         ;  Set transmit / receive BIT RATE(s) from AL
seg000:31BE                                         ; --------------------------------------------
seg000:31BE                                         ; [06] : Communication bit rates (see PAGE 21 of PC 100 SYSTEM SPEC)
seg000:31BE                                         ; VALUES 0...F represent BIT RATES from 50 - 19200.
seg000:31BE                                         ;
seg000:31BE                                         ; LOW NIBBLE = TRANSMIT CLOCK
seg000:31BE                                         ; HIGH NIBBLE = RECEIVE CLOCK
seg000:31C0                 retn
seg000:31C0 TX_RX_RATE_from_AL__sub_31BE endp
seg000:31C0
seg000:31C1
seg000:31C1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:31C1
seg000:31C1
seg000:31C1                 public CONTROL_STATUS__sub_31C1
seg000:31C1 CONTROL_STATUS__sub_31C1 proc near      ; CODE XREF: j_COMM_CTRL_STATUS__sub_31C1j
seg000:31C1                                         ; ROM_Initialize7201__3157+11p
seg000:31C1                 pushf
seg000:31C2                 cli
seg000:31C3                 mov     dx, 42h ; 'B'
seg000:31C6                 test    byte ptr ds:loc_F8F+1, 4
seg000:31CB                 jnz     short LOB__loc_31D0 ;
seg000:31CB                                         ;
seg000:31CD                 mov     al, 18h
seg000:31CF                 out     dx, al          ; Communicates with PORT 42 (hex).
seg000:31CF                                         ; = COMM CONTROL / STATUS REGISTER (7201) RO/WO.
seg000:31D0
seg000:31D0 LOB__loc_31D0:                          ; CODE XREF: CONTROL_STATUS__sub_31C1+Aj
seg000:31D0                 mov     cl, byte ptr es:loc_A0 ; NVRAM $a0 : Data bits / Parity (1,2...)
seg000:31D5                 and     cl, 0Fh
seg000:31D8                 mov     al, 2
seg000:31DA                 out     dx, al
seg000:31DB                 mov     al, 10h
seg000:31DD                 out     dx, al
seg000:31DE                 call    SETUP_PORT_PROPERTIES__sub_3267
seg000:31E1                 test    word ptr ds:loc_1FFE, 1 ; are we in CONSOLE or TERMINAL MODE ?
seg000:31E7                 jz      short loc_3217  ;
seg000:31E7                                         ;
seg000:31E9                 push    ds
seg000:31EA                 xor     ax, ax
seg000:31EC                 mov     ds, ax
seg000:31EE                 mov     ds:5005h, ch
seg000:31F2                 and     byte ptr ds:5000h, 0F7h ; 11110111 / mask bit 3
seg000:31F7                 cmp     cl, 3
seg000:31FA                 ja      short loc_3201  ;
seg000:31FA                                         ;
seg000:31FC                 or      byte ptr ds:5000h, 8 ; set bit 3
seg000:3201
seg000:3201 loc_3201:                               ; CODE XREF: CONTROL_STATUS__sub_31C1+39j
seg000:3201                 and     byte ptr ds:5000h, 7Fh ; mask bit 7
seg000:3206                 cmp     cl, 4
seg000:3209                 jnz     short loc_3210  ;
seg000:3209                                         ;
seg000:320B                 or      byte ptr ds:5000h, 80h ; set bit 7
seg000:3210
seg000:3210 loc_3210:                               ; CODE XREF: CONTROL_STATUS__sub_31C1+48j
seg000:3210                 mov     al, 1
seg000:3212                 out     dx, al
seg000:3213                 mov     al, 10h
seg000:3215                 out     dx, al
seg000:3216                 pop     ds
seg000:3217
seg000:3217 loc_3217:                               ; CODE XREF: CONTROL_STATUS__sub_31C1+26j
seg000:3217                 popf
seg000:3218                 retn
seg000:3218 CONTROL_STATUS__sub_31C1 endp
seg000:3218
seg000:3219
seg000:3219 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3219
seg000:3219
seg000:3219 PRINTERCONTROL_STATUS__sub_3219 proc near
seg000:3219                                         ; CODE XREF: j_PRINTERCONTROL_STATUS__sub_3219j
seg000:3219                                         ; HANDLE_BITRATES_NVRAM__sub_31A4+8p
seg000:3219                 pushf
seg000:321A                 cli
seg000:321B                 mov     dx, 43h ; 'C'
seg000:321E                 test    byte ptr ds:loc_F8F+1, 4
seg000:3223                 jnz     short loc_3228  ;
seg000:3223                                         ;
seg000:3225                 mov     al, 18h
seg000:3227                 out     dx, al          ; Communicates with PORT 43 (hex).
seg000:3227                                         ; = PRINTER CONTROL / STATUS REGISTER (7201)  RO/WO.
seg000:3228
seg000:3228 loc_3228:                               ; CODE XREF: PRINTERCONTROL_STATUS__sub_3219+Aj
seg000:3228                 mov     cl, byte ptr es:loc_A4+1 ; Data bits / Parity (0 = 70, 1 = 7E , 2 = 7N, 3 = 7M, 4 = 7S, 5 = 8O, 6 = 8E,  7 = 8N)
seg000:322D                 and     cl, 0Fh
seg000:3230                 call    SETUP_PORT_PROPERTIES__sub_3267 ;
seg000:3230                                         ;
seg000:3233                 test    word ptr ds:loc_1FFE, 1 ; are we in CONSOLE or TERMINAL MODE ?
seg000:3239                 jz      short loc_325F  ;
seg000:3239                                         ;
seg000:323B                 and     byte ptr ds:loc_F65+1, 0F7h ; 11110111 / mask bit 3
seg000:3240                 cmp     cl, 3
seg000:3243                 ja      short loc_324A  ;
seg000:3243                                         ;
seg000:3245                 or      byte ptr ds:loc_F65+1, 8 ; set bit 3
seg000:324A
seg000:324A loc_324A:                               ; CODE XREF: PRINTERCONTROL_STATUS__sub_3219+2Aj
seg000:324A                 and     byte ptr ds:loc_F65+1, 7Fh ; mask bit 7
seg000:324F                 cmp     cl, 4
seg000:3252                 jnz     short loc_3259  ;
seg000:3252                                         ;
seg000:3254                 or      byte ptr ds:loc_F65+1, 80h ; set bit 7
seg000:3259
seg000:3259 loc_3259:                               ; CODE XREF: PRINTERCONTROL_STATUS__sub_3219+39j
seg000:3259                 mov     al, 1
seg000:325B                 out     dx, al
seg000:325C                 mov     al, 15h
seg000:325E                 out     dx, al
seg000:325F
seg000:325F loc_325F:                               ; CODE XREF: PRINTERCONTROL_STATUS__sub_3219+20j
seg000:325F                 mov     al, 2
seg000:3261                 out     dx, al
seg000:3262                 xor     al, al
seg000:3264                 out     dx, al
seg000:3265                 popf
seg000:3266                 retn
seg000:3266 PRINTERCONTROL_STATUS__sub_3219 endp
seg000:3266
seg000:3267
seg000:3267 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3267
seg000:3267
seg000:3267                 public SETUP_PORT_PROPERTIES__sub_3267
seg000:3267 SETUP_PORT_PROPERTIES__sub_3267 proc near
seg000:3267                                         ; CODE XREF: CONTROL_STATUS__sub_31C1+1Dp
seg000:3267                                         ; PRINTERCONTROL_STATUS__sub_3219+17p
seg000:3267                 mov     al, 4           ; Routine pokes 7201 chip with suitable params.
seg000:3267                                         ;
seg000:3267                                         ; Also sets up 'Send Break', 'Request to Send' and 'Data Terminal Ready'
seg000:3269                 out     dx, al
seg000:326A                 mov     al, cl          ; CL = info about how many bits (7/8) are used and how parity is evaluated.
seg000:326C                 mov     bx, 3147h
seg000:326F                 cmp     dx, 43h ; 'C'
seg000:3272                 jnz     short COMM__loc_3281 ;
seg000:3272                                         ;
seg000:3274                 test    byte ptr es:loc_A6, 7 ; NVRAM $a6: PRINTER: Baud rate send / receive (2 = 300 etc.)
seg000:327A                 jnz     short loc_328C
seg000:327C                 add     bx, 8
seg000:327F                 jmp     short loc_328C
seg000:3281 ; ---------------------------------------------------------------------------
seg000:3281
seg000:3281 COMM__loc_3281:                         ; CODE XREF: SETUP_PORT_PROPERTIES__sub_3267+Bj
seg000:3281                 test    byte ptr es:loc_93+4, 1 ; NVRAM $97 : Stop Bits Modem (zero => 1 stop bit; 1 = 2 stop bits)
seg000:3287                 jz      short loc_328C
seg000:3289                 add     bx, 8
seg000:328C
seg000:328C loc_328C:                               ; CODE XREF: SETUP_PORT_PROPERTIES__sub_3267+13j
seg000:328C                                         ; SETUP_PORT_PROPERTIES__sub_3267+18j
seg000:328C                                         ; SETUP_PORT_PROPERTIES__sub_3267+20j
seg000:328C                 xlat    byte ptr cs:[bx]
seg000:328E                 out     dx, al
seg000:328F                 mov     al, 3
seg000:3291                 out     dx, al
seg000:3292                 cmp     cl, 2
seg000:3295                 mov     al, 0C1h ; '-'
seg000:3297                 ja      short loc_329B  ;
seg000:3297                                         ;
seg000:3299                 mov     al, 41h ; 'A'
seg000:329B
seg000:329B loc_329B:                               ; CODE XREF: SETUP_PORT_PROPERTIES__sub_3267+30j
seg000:329B                 out     dx, al
seg000:329C                 mov     al, 5
seg000:329E                 out     dx, al
seg000:329F                 cmp     cl, 2
seg000:32A2                 mov     al, 68h ; 'h'
seg000:32A4                 ja      short loc_32A8  ;
seg000:32A4                                         ;
seg000:32A6                 mov     al, 28h ; '('
seg000:32A8
seg000:32A8 loc_32A8:                               ; CODE XREF: SETUP_PORT_PROPERTIES__sub_3267+3Dj
seg000:32A8                 out     dx, al
seg000:32A9                 mov     ch, al
seg000:32AB                 retn
seg000:32AB SETUP_PORT_PROPERTIES__sub_3267 endp
seg000:32AB
seg000:32AB ; ---------------------------------------------------------------------------
seg000:32AC byte_32AC       db  10h, 33h            ; [ COMM./PRINTER (7201) INTERRUPT ROUTINES ]
seg000:32AC                                         ; JUMP TABLE ranging from $3310 to $33d6
seg000:32AC                                         ;
seg000:32AC                                         ; - used in CODE BELOW as offset $32ac
seg000:32AE                 db  24h, 33h
seg000:32B0                 db  11h, 33h
seg000:32B2                 db  3Dh, 33h
seg000:32B4                 db  10h, 33h
seg000:32B6                 db  10h, 33h
seg000:32B8                 db  4Ah, 33h
seg000:32BA                 db 0D6h, 33h
seg000:32BC ; ---------------------------------------------------------------------------
seg000:32BC                 push    ax              ; <======  $32bc = COMM./PRINTER (7201) INTERRUPT
seg000:32BC                                         ; (IRQ vector set in TABLE 1)
seg000:32BC                                         ;
seg000:32BC                                         ; Uses a jump table in LOW ROM with 8 possible jump targets (locations)
seg000:32BD                 push    bx              ; *******************************************
seg000:32BD                                         ; ** PRINTER CONTROL / STATUS (hard coded) **
seg000:32BD                                         ; *******************************************
seg000:32BE                 push    dx
seg000:32BF                 push    ds
seg000:32C0                 push    es
seg000:32C1                 mov     ax, 0EE00h
seg000:32C4                 mov     es, ax
seg000:32C6                 assume es:nothing
seg000:32C6                 xor     ax, ax
seg000:32C8                 mov     ds, ax
seg000:32CA                 mov     al, 2
seg000:32CC                 out     43h, al         ; to Printer Control/Status (R/W register)
seg000:32CE                 in      al, 43h         ; from Printer Status
seg000:32D0                 shl     al, 1
seg000:32D2                 mov     bx, ax
seg000:32D4                 call    word ptr cs:[bx+32ACh] ; SEE JUMP TABLE ABOVE
seg000:32D9                 mov     al, 38h ; '8'
seg000:32DB                 out     42h, al
seg000:32DD                 pop     es
seg000:32DE                 assume es:nothing
seg000:32DE                 pop     ds
seg000:32DF                 pop     dx
seg000:32E0                 pop     bx
seg000:32E1                 pop     ax
seg000:32E2                 iret
seg000:32E3
seg000:32E3 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:32E3
seg000:32E3
seg000:32E3 PRN_CTRL_STATUS__sub_32E3 proc near     ; CODE XREF: j_PRN_CTRL_STATUS__sub_32E3j
seg000:32E3                 cmp     byte ptr ds:loc_F6B, 13h
seg000:32E8                 jz      short loc_32F9
seg000:32EA                 test    byte ptr ds:loc_1EF7+1, 8
seg000:32EF                 jz      short loc_32F9
seg000:32F1                 in      al, 43h         ; Gets data from port 43 (hex).
seg000:32F1                                         ; = PRINTER CONTROL / STATUS REGISTER (7201);   RO/WO.
seg000:32F3                 test    al, 4
seg000:32F5                 jz      short loc_32F9
seg000:32F7                 stc
seg000:32F8                 retn
seg000:32F9 ; ---------------------------------------------------------------------------
seg000:32F9
seg000:32F9 loc_32F9:                               ; CODE XREF: PRN_CTRL_STATUS__sub_32E3+5j
seg000:32F9                                         ; PRN_CTRL_STATUS__sub_32E3+Cj
seg000:32F9                                         ; PRN_CTRL_STATUS__sub_32E3+12j
seg000:32F9                 clc
seg000:32FA                 retn
seg000:32FA PRN_CTRL_STATUS__sub_32E3 endp
seg000:32FA
seg000:32FB
seg000:32FB ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:32FB
seg000:32FB
seg000:32FB                 public PRN__sub_32FB
seg000:32FB PRN__sub_32FB   proc near               ; CODE XREF: j_PRN__sub_32FBj
seg000:32FB                 test    byte ptr ds:loc_F65+1, 8
seg000:3300                 jz      short PRN__loc_3304
seg000:3302                 or      al, 80h
seg000:3304
seg000:3304 PRN__loc_3304:                          ; CODE XREF: PRN__sub_32FB+5j
seg000:3304                 test    byte ptr ds:loc_F65+1, 80h
seg000:3309                 jz      short PRN__loc_330D
seg000:330B                 and     al, 7Fh
seg000:330D
seg000:330D PRN__loc_330D:                          ; CODE XREF: PRN__sub_32FB+Ej
seg000:330D                 out     41h, al         ; Writes to port 41 (hex).
seg000:330D                                         ; = PRINTER DATA REGISTER (7201);   RO/WO.
seg000:330F                 retn
seg000:330F PRN__sub_32FB   endp
seg000:330F
seg000:3310 ; ---------------------------------------------------------------------------
seg000:3310                 retn                    ; *********************************************
seg000:3310                                         ; *  COMM./PRINTER (7201) INTERRUPT ROUTINES  *
seg000:3310                                         ; *  - ranging from $3310 to $33d6            *
seg000:3310                                         ; *********************************************
seg000:3310                                         ;
seg000:3310                                         ; $3310 used in JUMP TABLE above.
seg000:3311 ; ---------------------------------------------------------------------------
seg000:3311                 in      al, 41h         ; ******************************************
seg000:3311                                         ; ** Get printer data (from R/W register) **
seg000:3311                                         ; **    $3311 used in JUMP TABLE above.   **
seg000:3311                                         ; ******************************************
seg000:3313                 and     al, 7Fh
seg000:3315                 cmp     al, 11h
seg000:3317                 jnz     short loc_331B  ;
seg000:3317                                         ;
seg000:3319                 jmp     short loc_331F
seg000:331B ; ---------------------------------------------------------------------------
seg000:331B
seg000:331B loc_331B:                               ; CODE XREF: seg000:3317j
seg000:331B                 cmp     al, 13h
seg000:331D                 jnz     short locret_3323
seg000:331F
seg000:331F loc_331F:                               ; CODE XREF: seg000:3319j
seg000:331F                 mov     byte ptr es:loc_F6B, al ; Scratch RAM usage?
seg000:3323
seg000:3323 locret_3323:                            ; CODE XREF: seg000:331Dj
seg000:3323                 retn
seg000:3324 ; ---------------------------------------------------------------------------
seg000:3324                 in      al, 43h         ; ********************************************
seg000:3324                                         ; ** Get printer status (from R/W register) **
seg000:3324                                         ; **    $3324 used in JUMP TABLE above.     **
seg000:3324                                         ; ********************************************
seg000:3326                 test    al, 20h
seg000:3328                 jnz     short loc_3332
seg000:332A                 and     byte ptr es:loc_1EF7+1, 0F7h ; Scratch RAM usage?
seg000:3330                 jmp     short loc_3338
seg000:3332 ; ---------------------------------------------------------------------------
seg000:3332
seg000:3332 loc_3332:                               ; CODE XREF: seg000:3328j
seg000:3332                 or      byte ptr es:loc_1EF7+1, 18h
seg000:3338
seg000:3338 loc_3338:                               ; CODE XREF: seg000:3330j
seg000:3338                 mov     al, 10h
seg000:333A                 out     43h, al         ; to Printer Control/Status (R/W register)
seg000:333C                 retn
seg000:333D ; ---------------------------------------------------------------------------
seg000:333D                 in      al, 41h         ; ******************************************
seg000:333D                                         ; ** Get printer data (from R/W register) **
seg000:333D                                         ; **    $333d used in JUMP TABLE above.   **
seg000:333D                                         ; ******************************************
seg000:333F                 mov     byte ptr es:loc_F6B, 11h ; Scratch RAM usage?
seg000:3345                 mov     al, 30h ; '0'
seg000:3347                 out     43h, al         ; to Printer Control/Status (R/W register)
seg000:3349                 retn                    ;
seg000:3349                                         ; $334a used in JUMP TABLE above.
seg000:334A
seg000:334A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:334A
seg000:334A
seg000:334A sub_334A        proc near               ; CODE XREF: seg000:33EEp
seg000:334A                 in      al, 40h         ; ************************************************
seg000:334A                                         ; ** Get communication data (from R/W register) **
seg000:334A                                         ; ************************************************
seg000:334C                 test    byte ptr ds:5000h, 88h
seg000:3351                 jz      short loc_3355  ;
seg000:3351                                         ;
seg000:3353                 and     al, 7Fh
seg000:3355
seg000:3355 loc_3355:                               ; CODE XREF: sub_334A+7j
seg000:3355                 cmp     al, 7Fh ; ''
seg000:3357                 jz      short loc_33CB
seg000:3359                 cmp     al, 0
seg000:335B                 jz      short loc_33CB  ;
seg000:335B                                         ;
seg000:335D                 push    ds
seg000:335E                 mov     bx, 0ED00h
seg000:3361                 mov     ds, bx
seg000:3363                 assume ds:nothing
seg000:3363                 test    byte ptr ds:94h, 1
seg000:3368                 pop     ds
seg000:3369                 assume ds:nothing
seg000:3369                 jz      short loc_3383  ;
seg000:3369                                         ;
seg000:336B                 cmp     al, 11h
seg000:336D                 jnz     short loc_3377  ;
seg000:336D                                         ;
seg000:336F                 and     byte ptr es:loc_FEB, 0FBh ; Scratch RAM usage?
seg000:3375                 jmp     short loc_33CB
seg000:3377 ; ---------------------------------------------------------------------------
seg000:3377
seg000:3377 loc_3377:                               ; CODE XREF: sub_334A+23j
seg000:3377                 cmp     al, 13h
seg000:3379                 jnz     short INVOKED_BY_IRQ__sub_3389 ;
seg000:3379                                         ;
seg000:337B                 or      byte ptr es:loc_FEB, 4 ; Scratch RAM usage?
seg000:3381                 jmp     short loc_33CB
seg000:3383 ; ---------------------------------------------------------------------------
seg000:3383
seg000:3383 loc_3383:                               ; CODE XREF: sub_334A+1Fj
seg000:3383                 and     byte ptr es:loc_FEB, 0FBh
seg000:3383 sub_334A        endp
seg000:3383
seg000:3389
seg000:3389 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3389
seg000:3389
seg000:3389                 public INVOKED_BY_IRQ__sub_3389
seg000:3389 INVOKED_BY_IRQ__sub_3389 proc near      ; CODE XREF: sub_334A+2Fj
seg000:3389                                         ; seg000:33F7p
seg000:3389                 test    byte ptr es:loc_FEB+1, 10h ; Scratch RAM usage?
seg000:338F                 jz      short loc_33CB  ;
seg000:338F                                         ;
seg000:3391                 cmp     byte ptr ds:5006h, 0FEh ; '¦'
seg000:3396                 jnb     short loc_33CB  ;
seg000:3396                                         ;
seg000:3398                 mov     bx, ds:5003h
seg000:339C                 inc     byte ptr ds:5006h
seg000:33A0                 test    byte ptr ds:5000h, 1
seg000:33A5                 jnz     short loc_33B3  ;
seg000:33A5                                         ;
seg000:33A7                 cmp     byte ptr ds:5006h, 9Ch ; '£'
seg000:33AC                 jnz     short loc_33B3
seg000:33AE                 or      byte ptr ds:5000h, 20h
seg000:33B3
seg000:33B3 loc_33B3:                               ; CODE XREF: INVOKED_BY_IRQ__sub_3389+1Cj
seg000:33B3                                         ; INVOKED_BY_IRQ__sub_3389+23j
seg000:33B3                 cmp     byte ptr ds:5006h, 0FEh ; '¦'
seg000:33B8                 jb      short loc_33C1  ;
seg000:33B8                                         ;
seg000:33BA                 or      byte ptr ds:5000h, 20h
seg000:33BF                 mov     al, 1Ah
seg000:33C1
seg000:33C1 loc_33C1:                               ; CODE XREF: INVOKED_BY_IRQ__sub_3389+2Fj
seg000:33C1                 mov     [bx], al
seg000:33C3                 inc     bx
seg000:33C4                 and     bh, 0FEh
seg000:33C7                 mov     ds:5003h, bx
seg000:33CB
seg000:33CB loc_33CB:                               ; CODE XREF: sub_334A+Dj
seg000:33CB                                         ; sub_334A+11j
seg000:33CB                                         ; sub_334A+2Bj
seg000:33CB                                         ; sub_334A+37j
seg000:33CB                                         ; INVOKED_BY_IRQ__sub_3389+6j
seg000:33CB                                         ; INVOKED_BY_IRQ__sub_3389+Dj
seg000:33CB                 test    byte ptr ds:5000h, 20h
seg000:33D0                 jz      short locret_33D5
seg000:33D2                 call    XON_XOFF__sub_3431
seg000:33D5
seg000:33D5 locret_33D5:                            ; CODE XREF: INVOKED_BY_IRQ__sub_3389+47j
seg000:33D5                 retn
seg000:33D5 INVOKED_BY_IRQ__sub_3389 endp
seg000:33D5
seg000:33D6 ; ---------------------------------------------------------------------------
seg000:33D6                 push    ds              ; ******************************************
seg000:33D6                                         ; ** Handle Communications Control/Status **
seg000:33D6                                         ; **    $33d6 used in JUMP TABLE above.   **
seg000:33D6                                         ; ******************************************
seg000:33D7                 mov     ax, 0ED00h
seg000:33DA                 mov     ds, ax
seg000:33DC                 assume ds:nothing
seg000:33DC                 test    byte ptr ds:98h, 1
seg000:33E1                 pop     ds
seg000:33E2                 assume ds:nothing
seg000:33E2                 jnz     short COMM_DATA_n_CTRL__loc_33F3 ;
seg000:33E2                                         ;
seg000:33E4                 mov     al, 1
seg000:33E6                 out     42h, al         ; to Communications Control/Status (R/W register)
seg000:33E6                                         ;
seg000:33E8                 in      al, 42h         ; get comm. status from Communications Control/Status (R/W register)
seg000:33EA                 test    al, 60h
seg000:33EC                 jnz     short COMM_DATA_n_CTRL__loc_33F3 ;
seg000:33EC                                         ;
seg000:33EE                 call    sub_334A
seg000:33F1                 jmp     short loc_33FA
seg000:33F3 ; ---------------------------------------------------------------------------
seg000:33F3
seg000:33F3                 public COMM_DATA_n_CTRL__loc_33F3
seg000:33F3 COMM_DATA_n_CTRL__loc_33F3:             ; CODE XREF: seg000:33E2j
seg000:33F3                                         ; seg000:33ECj
seg000:33F3                 in      al, 40h         ; ************************************************
seg000:33F3                                         ; ** Get / handle Communications Data + Control **
seg000:33F3                                         ; ************************************************
seg000:33F3                                         ;
seg000:33F5                 mov     al, 1Ah
seg000:33F7                 call    INVOKED_BY_IRQ__sub_3389
seg000:33FA
seg000:33FA loc_33FA:                               ; CODE XREF: seg000:33F1j
seg000:33FA                 mov     al, 30h ; '0'
seg000:33FC                 out     42h, al         ; to Communications Control/Status (R/W register)
seg000:33FE                 retn                    ; *********************************************
seg000:33FE                                         ; *                 END OF                    *
seg000:33FE                                         ; *  COMM./PRINTER (7201) INTERRUPT ROUTINES  *
seg000:33FE                                         ; *********************************************
seg000:33FE                                         ;
seg000:33FF
seg000:33FF ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:33FF
seg000:33FF
seg000:33FF sub_33FF        proc near               ; CODE XREF: sub_2E52+71p
seg000:33FF                                         ; sub_84:LOOP___loc_387Bp
seg000:33FF                 push    ax
seg000:3400                 push    dx
seg000:3401                 push    ds
seg000:3402                 mov     dl, al
seg000:3404                 xor     ax, ax
seg000:3406                 mov     ds, ax
seg000:3408                 call    CHECK_COMM_STATUS___sub_340F
seg000:340B                 pop     ds
seg000:340C                 pop     dx
seg000:340D                 pop     ax
seg000:340E                 retn
seg000:340E sub_33FF        endp
seg000:340E
seg000:340F
seg000:340F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:340F
seg000:340F
seg000:340F                 public CHECK_COMM_STATUS___sub_340F
seg000:340F CHECK_COMM_STATUS___sub_340F proc near  ; CODE XREF: sub_33FF+9p
seg000:340F                                         ; XON_XOFF__sub_3431+1Ap
seg000:340F                                         ; XON_XOFF__sub_3431+34p
seg000:340F                 in      al, 42h         ; from 0x42  COMMUNICATIONS CONTROL / STATUS REGISTER (MPSC)
seg000:3411                 test    al, 4
seg000:3413                 jnz     short loc_3417
seg000:3415                 clc
seg000:3416                 retn
seg000:3417 ; ---------------------------------------------------------------------------
seg000:3417
seg000:3417 loc_3417:                               ; CODE XREF: CHECK_COMM_STATUS___sub_340F+4j
seg000:3417                 test    byte ptr ds:5000h, 8
seg000:341C                 jz      short loc_3421
seg000:341E                 or      dl, 80h
seg000:3421
seg000:3421 loc_3421:                               ; CODE XREF: CHECK_COMM_STATUS___sub_340F+Dj
seg000:3421                 test    byte ptr ds:5000h, 80h
seg000:3426                 jz      short loc_342B
seg000:3428                 and     dl, 7Fh
seg000:342B
seg000:342B loc_342B:                               ; CODE XREF: CHECK_COMM_STATUS___sub_340F+17j
seg000:342B                 mov     al, dl
seg000:342D                 out     40h, al         ; Communications Data (R/W register)
seg000:342F                 stc
seg000:3430                 retn
seg000:3430 CHECK_COMM_STATUS___sub_340F endp
seg000:3430
seg000:3431
seg000:3431 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3431
seg000:3431
seg000:3431 XON_XOFF__sub_3431 proc near            ; CODE XREF: INVOKED_BY_IRQ__sub_3389+49p
seg000:3431                                         ; COMM__sub_3474+8p
seg000:3431                 push    es
seg000:3432                 push    ax
seg000:3433                 mov     dh, dl
seg000:3435                 mov     ax, 0ED00h
seg000:3438                 mov     es, ax
seg000:343A                 assume es:nothing
seg000:343A                 test    byte ptr es:94h, 1 ; 0x94 AUTO XON/XOFF (0=OFF / 1 = ON)
seg000:3440                 jz      short NO_AUTOXONXOFF__loc_346F ;
seg000:3440                                         ;
seg000:3442                 test    byte ptr ds:5000h, 20h
seg000:3447                 jz      short loc_345C  ;
seg000:3447                                         ;
seg000:3449                 mov     dl, 13h
seg000:344B                 call    CHECK_COMM_STATUS___sub_340F
seg000:344E                 jnb     short NO_AUTOXONXOFF__loc_346F ;
seg000:344E                                         ;
seg000:3450                 and     byte ptr ds:5000h, 0DFh
seg000:3455                 or      byte ptr ds:5000h, 1
seg000:345A                 jmp     short NO_AUTOXONXOFF__loc_346F
seg000:345C ; ---------------------------------------------------------------------------
seg000:345C
seg000:345C loc_345C:                               ; CODE XREF: XON_XOFF__sub_3431+16j
seg000:345C                 test    byte ptr ds:5000h, 40h
seg000:3461                 jz      short NO_AUTOXONXOFF__loc_346F ;
seg000:3461                                         ;
seg000:3463                 mov     dl, 11h
seg000:3465                 call    CHECK_COMM_STATUS___sub_340F
seg000:3468                 jnb     short NO_AUTOXONXOFF__loc_346F ;
seg000:3468                                         ;
seg000:346A                 and     byte ptr ds:5000h, 9Eh
seg000:346F
seg000:346F NO_AUTOXONXOFF__loc_346F:               ; CODE XREF: XON_XOFF__sub_3431+Fj
seg000:346F                                         ; XON_XOFF__sub_3431+1Dj
seg000:346F                                         ; XON_XOFF__sub_3431+29j
seg000:346F                                         ; XON_XOFF__sub_3431+30j
seg000:346F                                         ; XON_XOFF__sub_3431+37j
seg000:346F                 mov     dl, dh
seg000:3471                 pop     ax
seg000:3472                 pop     es
seg000:3473                 assume es:nothing
seg000:3473                 retn
seg000:3473 XON_XOFF__sub_3431 endp
seg000:3473
seg000:3474
seg000:3474 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3474
seg000:3474
seg000:3474 COMM__sub_3474  proc near               ; CODE XREF: sub_84:NO_ECHO__loc_388Fp
seg000:3474                 push    ds
seg000:3475                 push    es
seg000:3476                 push    ds
seg000:3477                 pop     es
seg000:3478                 xor     ax, ax
seg000:347A                 mov     ds, ax
seg000:347C                 call    XON_XOFF__sub_3431
seg000:347F                 mov     bx, ds:5001h
seg000:3483                 cmp     byte ptr ds:5006h, 0
seg000:3488                 jnz     short COMM2__loc_348E ;
seg000:3488                                         ;
seg000:348A                 clc
seg000:348B                 pop     es
seg000:348C                 pop     ds
seg000:348D                 retn
seg000:348E ; ---------------------------------------------------------------------------
seg000:348E
seg000:348E COMM2__loc_348E:                        ; CODE XREF: COMM__sub_3474+14j
seg000:348E                 mov     al, [bx]
seg000:3490                 inc     bx
seg000:3491                 dec     byte ptr ds:5006h
seg000:3495                 and     bh, 0FEh
seg000:3498                 mov     ds:5001h, bx
seg000:349C                 test    byte ptr es:loc_FEB, 8 ; Scratch RAM usage?
seg000:34A2                 jnz     short loc_34B7  ;
seg000:34A2                                         ;
seg000:34A4                 cmp     byte ptr ds:5006h, 20h ; ' '
seg000:34A9                 ja      short loc_34B7
seg000:34AB                 test    byte ptr ds:5000h, 1
seg000:34B0                 jz      short loc_34B7
seg000:34B2                 or      byte ptr ds:5000h, 40h
seg000:34B7
seg000:34B7 loc_34B7:                               ; CODE XREF: COMM__sub_3474+2Ej
seg000:34B7                                         ; COMM__sub_3474+35j
seg000:34B7                                         ; COMM__sub_3474+3Cj
seg000:34B7                 stc
seg000:34B8                 pop     es
seg000:34B9                 pop     ds
seg000:34BA                 retn
seg000:34BA COMM__sub_3474  endp
seg000:34BA
seg000:34BB
seg000:34BB ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:34BB
seg000:34BB
seg000:34BB                 public COMM_CTRL_STATUS__sub_34BB
seg000:34BB COMM_CTRL_STATUS__sub_34BB proc near    ; CODE XREF: sub_2E52+108p
seg000:34BB                                         ; seg000:3139j
seg000:34BB                 pushf
seg000:34BC                 cli
seg000:34BD                 push    ds
seg000:34BE                 push    ax
seg000:34BF                 mov     ax, 0
seg000:34C2                 mov     ds, ax
seg000:34C4                 mov     al, 5
seg000:34C6                 out     42h, al         ; -> 0x42  COMMUNICATIONS CONTROL / STATUS REGISTER (MPSC)
seg000:34C8                 pop     ax
seg000:34C9                 cmp     al, 0
seg000:34CB                 mov     al, ds:5005h
seg000:34CE                 jnz     short loc_34D2  ;
seg000:34CE                                         ;
seg000:34D0                 or      al, 10h
seg000:34D2
seg000:34D2 loc_34D2:                               ; CODE XREF: COMM_CTRL_STATUS__sub_34BB+13j
seg000:34D2                 out     42h, al         ; -> 0x42  COMMUNICATIONS CONTROL / STATUS REGISTER (MPSC)
seg000:34D4                 pop     ds
seg000:34D5                 popf
seg000:34D6                 retn
seg000:34D6 COMM_CTRL_STATUS__sub_34BB endp
seg000:34D6
seg000:34D7
seg000:34D7 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:34D7
seg000:34D7
seg000:34D7 sub_34D7        proc near               ; CODE XREF: sub_2E52+7Bp
seg000:34D7                 pushf
seg000:34D8                 cli
seg000:34D9                 mov     al, 1
seg000:34DB                 out     42h, al         ; -> 0x42  COMMUNICATIONS CONTROL / STATUS REGISTER (MPSC)
seg000:34DD                 in      al, 42h
seg000:34DF                 test    al, 1
seg000:34E1                 popf
seg000:34E2                 retn
seg000:34E2 sub_34D7        endp
seg000:34E2
seg000:34E3 ; ---------------------------------------------------------------------------
seg000:34E3                 iret                    ; $34e3 used as VECTOR (table 1)
seg000:34E3 ; ---------------------------------------------------------------------------
seg000:34E4                 db 0FFh, 36h            ; See jump @ OFFSET 35E8
seg000:34E4                 db 0F4h, 34h
seg000:34E4                 db    9, 80h
seg000:34E4                 db  88h, 37h
seg000:34E4                 db  93h, 37h
seg000:34E4                 db 0F4h, 34h
seg000:34E4                 db  3Ch, 31h
seg000:34E4                 db  37h, 31h
seg000:34F4                 db 0C3h ; +
seg000:34F5 ; ---------------------------------------------------------------------------
seg000:34F5                 push    ax              ; <=== Vertical Frequency Interrupt (highest priority) - VECTOR ADDRESS $80 = $34F5
seg000:34F5                                         ;
seg000:34F5                                         ; (IRQ vector set in TABLE 1)
seg000:34F6                 push    bx
seg000:34F7                 push    ds
seg000:34F8                 mov     ax, 0EE00h
seg000:34FB                 mov     ds, ax
seg000:34FD                 assume ds:nothing
seg000:34FD                 test    word ptr ds:1EF6h, 2
seg000:3503                 jz      short loc_3508  ;
seg000:3503                                         ;
seg000:3505                 jmp     loc_36C4        ; TOGGLE BLINK FLIP-FLOP / CLEAR VERTICAL FREQUENCY INTERRUPT
seg000:3508 ; ---------------------------------------------------------------------------
seg000:3508
seg000:3508 loc_3508:                               ; CODE XREF: seg000:3503j
seg000:3508                 or      word ptr ds:1EF6h, 2
seg000:350E                 mov     ax, ss
seg000:3510                 mov     bx, sp
seg000:3512                 cmp     ax, 0EE00h
seg000:3515                 jz      short loc_352C  ;
seg000:3515                                         ;
seg000:3517                 mov     sp, 0EE00h
seg000:351A                 mov     ss, sp
seg000:351C                 mov     sp, ds:1FF7h
seg000:3520                 push    word ptr ds:1EF6h
seg000:3524                 or      word ptr ds:1EF6h, 1
seg000:352A                 jmp     short loc_3536
seg000:352C ; ---------------------------------------------------------------------------
seg000:352C
seg000:352C loc_352C:                               ; CODE XREF: seg000:3515j
seg000:352C                 push    word ptr ds:1EF6h
seg000:3530                 and     word ptr ds:1EF6h, 0FFFEh
seg000:3536
seg000:3536 loc_3536:                               ; CODE XREF: seg000:352Aj
seg000:3536                 push    ax
seg000:3537                 push    bx
seg000:3538                 test    byte ptr ds:1EF5h, 8
seg000:353D                 jz      short loc_3542  ;
seg000:353D                                         ;
seg000:353F                 call    DS_HOUSEKEEPING1__sub_3C78
seg000:3542
seg000:3542 loc_3542:                               ; CODE XREF: seg000:353Dj
seg000:3542                 test    byte ptr ds:1EF5h, 2
seg000:3547                 jz      short loc_355C  ;
seg000:3547                                         ;
seg000:3549                 call    DS_HOUSEKEEPING2__sub_3C23
seg000:354C                 call    j_ROM_EnableCursor
seg000:354F                 mov     byte ptr ds:0ED7h, 3Eh ; '>'
seg000:3554                 mov     byte ptr ds:1EF5h, 0
seg000:3559                 call    j_SWITCH_HOLDSCREEN__sub_3C34
seg000:355C
seg000:355C loc_355C:                               ; CODE XREF: seg000:3547j
seg000:355C                 inc     byte ptr ds:0ED7h
seg000:3560                 test    byte ptr ds:0F2Ch, 1
seg000:3565                 jz      short loc_3573  ;
seg000:3565                                         ;
seg000:3567                 test    byte ptr ds:0F2Ch, 2
seg000:356C                 jz      short TO_KBD_BUFF__loc_3590 ;
seg000:356C                                         ;
seg000:356E                 and     byte ptr ds:0F2Ch, 0FCh
seg000:3573
seg000:3573 loc_3573:                               ; CODE XREF: seg000:3565j
seg000:3573                 mov     al, ds:0ED7h
seg000:3576                 and     al, 3Fh
seg000:3578                 cmp     al, 2Ah ; '*'
seg000:357A                 mov     al, ds:0EDAh
seg000:357D                 jns     short loc_3583  ;
seg000:357D                                         ;
seg000:357F                 xor     al, ds:0F2Dh
seg000:3583
seg000:3583 loc_3583:                               ; CODE XREF: seg000:357Dj
seg000:3583                 mov     bx, ds:0ED8h
seg000:3587                 mov     [bx+1000h], al
seg000:358B                 and     byte ptr ds:0F2Ch, 0FEh
seg000:3590
seg000:3590 TO_KBD_BUFF__loc_3590:                  ; CODE XREF: seg000:356Cj
seg000:3590                 push    cx
seg000:3591                 push    dx
seg000:3592                 push    si
seg000:3593                 push    di
seg000:3594                 push    bp
seg000:3595                 push    ds
seg000:3596                 push    es
seg000:3597                 mov     ax, 0ED00h
seg000:359A                 mov     es, ax
seg000:359C                 assume es:nothing
seg000:359C                 mov     al, 9           ; 09 => CLEAR VERTICAL FREQUENCY INTERRUPT
seg000:359C                                         ;
seg000:359E                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:359E                                         ;
seg000:35A0                 sti
seg000:35A1                 test    byte ptr es:89h, 1 ; 0x89 : AUTO RPT (0=OFF 1=ON)
seg000:35A1                                         ;
seg000:35A1                                         ;         Repeat key at a rate of 30 cps when key is held down more than one-half second.
seg000:35A1                                         ;         Affects all keys except SET-UP, ESC, NO-SCROLL, TAB, RETURN, CTRL + any key.
seg000:35A7                 jz      short NO_AUTOREPEAT__loc_35DC ;
seg000:35A7                                         ;
seg000:35A9                 test    byte ptr ds:0F90h, 8 ;   00001000 - BIT 3 must be ZERO.
seg000:35AE                 jnz     short NO_AUTOREPEAT__loc_35DC ;
seg000:35AE                                         ;
seg000:35B0                 test    byte ptr ds:0F90h, 40h ; 01000000 - BIT 6 must be NON-ZERO
seg000:35B5                 jz      short NO_AUTOREPEAT__loc_35DC ;
seg000:35B5                                         ;
seg000:35B7                 cmp     byte ptr ds:0F6Ch, 0Eh ; 0E = EMPTY.  00 = FULL (number of characters in the buffer)
seg000:35BC                 jnz     short NO_AUTOREPEAT__loc_35DC ;
seg000:35BC                                         ;
seg000:35BE                 dec     byte ptr ds:0F69h
seg000:35C2                 jnz     short NO_AUTOREPEAT__loc_35DC ;
seg000:35C2                                         ;
seg000:35C4                 test    word ptr ds:0F8Fh, 8000h ; EEF8F => HIGH BYTE (WILL BE PUT INTO KEYBOARD BUFFER)
seg000:35CA                 jnz     short loc_35D7  ;
seg000:35CA                                         ;
seg000:35CC                 mov     al, ds:0F6Ah    ; EEF6A => * LOW * BYTE (WILL BE PUT INTO KEYBOARD BUFFER)
seg000:35CF                 call    near ptr 802Dh  ; AL_to_KBD_BUFF_0F71_ff__sub_2AC7
seg000:35CF                                         ;
seg000:35CF                                         ; Move value from AL (and AH = value from EEF8F)
seg000:35CF                                         ;  to (2-BYTE) KEYBOARD BUFFER
seg000:35CF                                         ;  ranging from 0f71 - 0f8d.
seg000:35CF                                         ;
seg000:35CF                                         ;  EEF6C = 0e (=> empty)
seg000:35CF                                         ;  EEF6C = 00 (=> FULL)
seg000:35CF                                         ;
seg000:35D2                 mov     al, 9Fh ; 'ƒ'   ; $9f = Sound Keyclick ( keyboard command )
seg000:35D4                 call    near ptr 8021h  ; ==> SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND
seg000:35D4                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:35D7
seg000:35D7 loc_35D7:                               ; CODE XREF: seg000:35CAj
seg000:35D7                 mov     byte ptr ds:0F69h, 2
seg000:35DC
seg000:35DC NO_AUTOREPEAT__loc_35DC:                ; CODE XREF: seg000:35A7j
seg000:35DC                                         ; seg000:35AEj
seg000:35DC                                         ; seg000:35B5j
seg000:35DC                                         ; seg000:35BCj
seg000:35DC                                         ; seg000:35C2j
seg000:35DC                 xor     di, di
seg000:35DE                 mov     cx, 8
seg000:35E1
seg000:35E1 LOOP__loc_35E1:                         ; CODE XREF: seg000:35F8j
seg000:35E1                 dec     word ptr [di+0EC5h]
seg000:35E5                 jnz     short loc_35F0  ;
seg000:35E5                                         ;
seg000:35E7                 push    cx
seg000:35E8                 call    word ptr cs:[di+34E4h] ; *** USES JUMP TABLE @ OFFSET 34E4
seg000:35E8                                         ; DI specifies the offset (x 2)
seg000:35ED                 pop     cx
seg000:35EE                 jmp     short OVER__loc_35F6
seg000:35F0 ; ---------------------------------------------------------------------------
seg000:35F0
seg000:35F0 loc_35F0:                               ; CODE XREF: seg000:35E5j
seg000:35F0                 jns     short OVER__loc_35F6
seg000:35F2                 inc     word ptr [di+0EC5h]
seg000:35F6
seg000:35F6 OVER__loc_35F6:                         ; CODE XREF: seg000:35EEj
seg000:35F6                                         ; seg000:loc_35F0j
seg000:35F6                 inc     di
seg000:35F7                 inc     di
seg000:35F8                 loop    LOOP__loc_35E1  ;
seg000:35F8                                         ;
seg000:35FA                 test    byte ptr ds:0F44h, 4 ; [ RELOCATED VECTORS EE00:0F44h ] : test bit 2.
seg000:35FA                                         ;      See  ROM_ChangeVectorMap__1F66
seg000:35FF                 jnz     short loc_3605  ;
seg000:35FF                                         ;
seg000:3601                 int     2Ch
seg000:3603                 jmp     short KBD_loc_3607
seg000:3605 ; ---------------------------------------------------------------------------
seg000:3605
seg000:3605 loc_3605:                               ; CODE XREF: seg000:35FFj
seg000:3605                 int     0ACh
seg000:3607
seg000:3607 KBD_loc_3607:                           ; CODE XREF: seg000:3603j
seg000:3607                 mov     bx, 1FF9h
seg000:360A                 test    byte ptr [bx], 20h ; EE00:1FF9
seg000:360D                 jz      short KBD_8251_IS_UP__loc_3638 ; Check bit 5 (value $20) in EE00:1ff9.  When set, 8251 UART has to be initialized.
seg000:360D                                         ;
seg000:360F                 dec     byte ptr ds:0F91h
seg000:3613                 jnz     short near ptr KBD_HOP__sub_368F ;
seg000:3613                                         ;
seg000:3615                 cli
seg000:3616                 call    near ptr 801Eh  ; SENDS COMMANDS TO PORT 11 (right before keyboard power up)
seg000:3619                 mov     byte ptr ds:0F91h, 3Ch ; '<'
seg000:361E                 in      al, 11h
seg000:3620                 test    al, 40h
seg000:3622                 jz      short KBD_POWERUP1__loc_3634 ;
seg000:3622                                         ;
seg000:3624                 mov     al, 10h
seg000:3626                 test    byte ptr ds:0F44h, 4 ; [ RELOCATED VECTORS EE00:0F44h ] : test bit 2.
seg000:3626                                         ;      See  ROM_ChangeVectorMap__1F66
seg000:362B                 jnz     short loc_362F  ;
seg000:362B                                         ;
seg000:362D                 or      al, 2
seg000:362F
seg000:362F loc_362F:                               ; CODE XREF: seg000:362Bj
seg000:362F                 out     11h, al         ; [11] : KEYBOARD INTERFACE
seg000:3631                 sti
seg000:3632                 jmp     short near ptr KBD_HOP__sub_368F
seg000:3634 ; ---------------------------------------------------------------------------
seg000:3634
seg000:3634 KBD_POWERUP1__loc_3634:                 ; CODE XREF: seg000:3622j
seg000:3634                 sti
seg000:3635                 call    INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC
seg000:3638
seg000:3638 KBD_8251_IS_UP__loc_3638:               ; CODE XREF: seg000:360Dj
seg000:3638                 test    byte ptr [bx], 4 ; Check bit 2 (value 4) in EE00:1ff9.  When set, we need to power up.
seg000:363B                 jz      short KBD_NO_POWERUP__loc_364B ;
seg000:363B                                         ;
seg000:363D                 and     byte ptr [bx], 0FBh
seg000:3640                 call    near ptr 801Eh  ; SENDS COMMANDS TO PORT 11 (right before keyboard power up)
seg000:3640                                         ;
seg000:3643                 mov     al, 0FDh ; '²'  ; $fd = JUMP TO POWER UP (command)
seg000:3645                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:3645                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:3645                                         ;
seg000:3648                 or      byte ptr [bx], 2 ; EE00:1ff9
seg000:364B
seg000:364B KBD_NO_POWERUP__loc_364B:               ; CODE XREF: seg000:363Bj
seg000:364B                 test    byte ptr [bx], 2 ; Check bit 1 (value 2) in EE00:1ff9.  When set, more work is to do (housekeeping?)
seg000:364E                 jz      short loc_367B  ;
seg000:364E                                         ;
seg000:3650                 dec     byte ptr ds:0F92h ; ee000:0f92 : flag or counter not used elsewhere (?)
seg000:3654                 jnz     short near ptr KBD_HOP__sub_368F ;
seg000:3654                                         ;
seg000:3656                 and     byte ptr [bx], 0FDh ; only when ee000:0f92 contained 1 continue here.
seg000:3659                 test    byte ptr [bx], 40h
seg000:365C                 jnz     short loc_3687  ;
seg000:365C                                         ;
seg000:365E                 cmp     byte ptr ds:0F94h, 0FFh
seg000:3663                 jz      short KBD_CHECKS__loc_3673 ;
seg000:3663                                         ;
seg000:3665                 or      byte ptr [bx], 8
seg000:3668                 and     byte ptr [bx], 3Fh
seg000:366B                 call    loc_36EA        ; initialize some variables
seg000:366B                                         ;
seg000:366E                 call    near ptr 8015h  ; Keyboard - bell & keyclick (settings / and or volume?)
seg000:366E                                         ; - USED ONCE (here) during power up.
seg000:3671                 jmp     short near ptr KBD_HOP__sub_368F
seg000:3673 ; ---------------------------------------------------------------------------
seg000:3673
seg000:3673 KBD_CHECKS__loc_3673:                   ; CODE XREF: seg000:3663j
seg000:3673                 test    byte ptr [bx], 10h ; Check bit 4 (value 0x10) in EE00:1ff9.  When set...
seg000:3676                 jz      short loc_3687  ;
seg000:3676                                         ;
seg000:3678                 call    near ptr 8030h  ; Keyboard diagnostics (may give ERROR 13 if certain cond. are met)
seg000:3678                                         ; - USED ONCE (here) during power up.
seg000:367B
seg000:367B loc_367B:                               ; CODE XREF: seg000:364Ej
seg000:367B                 test    byte ptr [bx], 8 ; Check bit 3 (value 0x08) in EE00:1ff9.
seg000:367E                 jz      short loc_3687  ;
seg000:367E                                         ;
seg000:3680                 cmp     byte ptr ds:0F94h, 0FFh
seg000:3685                 jz      short near ptr KBD_HOP__sub_368F
seg000:3687
seg000:3687 loc_3687:                               ; CODE XREF: seg000:365Cj
seg000:3687                                         ; seg000:3676j
seg000:3687                                         ; seg000:367Ej
seg000:3687                 test    byte ptr [bx], 10h ; Check bit 4 (value 0x10) in EE00:1ff9.
seg000:368A                 jnz     short near ptr KBD_HOP__sub_368F ;
seg000:368A                                         ;
seg000:368C                 call    INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC
seg000:368F
seg000:368F ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:368F
seg000:368F
seg000:368F KBD_HOP__sub_368F proc far              ; CODE XREF: j_KBD__sub_368Fj
seg000:368F                                         ; seg000:3613j
seg000:368F                                         ; seg000:3632j
seg000:368F                                         ; seg000:3654j
seg000:368F                                         ; seg000:3671j
seg000:368F                                         ; seg000:3685j
seg000:368F                                         ; seg000:368Aj
seg000:368F                 cli
seg000:3690                 test    byte ptr ds:0F90h, 2
seg000:3695                 jz      short loc_36A3  ;
seg000:3695                                         ;
seg000:3697                 test    byte ptr ds:1EF5h, 10h
seg000:369C                 jnz     short loc_36A3  ;
seg000:369C                                         ;
seg000:369E                 mov     al, 7Fh ; ''
seg000:36A0                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:36A0                                         ;
seg000:36A0                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:36A3
seg000:36A3 loc_36A3:                               ; CODE XREF: KBD_HOP__sub_368F+6j
seg000:36A3                                         ; KBD_HOP__sub_368F+Dj
seg000:36A3                 pop     es
seg000:36A4                 assume es:nothing
seg000:36A4                 pop     ds
seg000:36A5                 assume ds:nothing
seg000:36A5                 pop     bp
seg000:36A6                 pop     di
seg000:36A7                 pop     si
seg000:36A8                 pop     dx
seg000:36A9                 pop     cx
seg000:36AA                 pop     bx
seg000:36AB                 pop     ax
seg000:36AC                 test    word ptr ds:loc_1EF6, 1 ; DS:1EF6
seg000:36B2                 pop     word ptr ds:loc_1EF6
seg000:36B6                 jz      short loc_36BC  ;
seg000:36B6                                         ;
seg000:36B8                 mov     ss, ax
seg000:36BA                 mov     sp, bx
seg000:36BC
seg000:36BC loc_36BC:                               ; CODE XREF: KBD_HOP__sub_368F+27j
seg000:36BC                 and     word ptr ds:loc_1EF6, 0FFFDh
seg000:36C2                 jmp     short loc_36D1
seg000:36C4 ; ---------------------------------------------------------------------------
seg000:36C4
seg000:36C4 loc_36C4:                               ; CODE XREF: seg000:3505j
seg000:36C4                 dec     word ptr ds:loc_ECA+1 ; DS:0ECB
seg000:36C8                 jnz     short loc_36CD  ;
seg000:36C8                                         ;
seg000:36CA                 call    TOGGLE_BLINK_FLIP_FLOP__3788
seg000:36CD
seg000:36CD loc_36CD:                               ; CODE XREF: KBD_HOP__sub_368F+39j
seg000:36CD                 mov     al, 9           ; 09 => CLEAR VERTICAL FREQUENCY INTERRUPT
seg000:36CF                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:36CF                                         ;
seg000:36D1
seg000:36D1 loc_36D1:                               ; CODE XREF: KBD_HOP__sub_368F+33j
seg000:36D1                 pop     ds
seg000:36D2                 pop     bx
seg000:36D3                 pop     ax
seg000:36D4                 iret
seg000:36D4 KBD_HOP__sub_368F endp ; sp =  1Ah
seg000:36D4
seg000:36D5 ; ---------------------------------------------------------------------------
seg000:36D5                 iret                    ; $36d5 (IRQ vector set in TABLE 1)
seg000:36D6 ; ---------------------------------------------------------------------------
seg000:36D6                 iret
seg000:36D7 ; ---------------------------------------------------------------------------
seg000:36D7                 push    ax              ; <===== $36d7 = Interrupt from Z80A (lowest priority)
seg000:36D7                                         ; (IRQ vector set in TABLE 1)
seg000:36D8                 in      al, 0
seg000:36DA                 pop     ax
seg000:36DB                 iret
seg000:36DC
seg000:36DC ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:36DC
seg000:36DC
seg000:36DC INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC proc near
seg000:36DC                                         ; CODE XREF: j_HOUSEKEEPING_DS_KBD_or_CON__sub_36DCj
seg000:36DC                                         ; seg000:3635p
seg000:36DC                                         ; seg000:368Cp
seg000:36DC                 mov     bx, 1FF9h
seg000:36DF                 and     byte ptr [bx], 95h ; 10010101
seg000:36E2                 or      byte ptr [bx], 4
seg000:36E5                 mov     byte ptr ds:loc_F92, 8
seg000:36EA
seg000:36EA loc_36EA:                               ; CODE XREF: seg000:366Bp
seg000:36EA                 mov     byte ptr ds:loc_F92+2, 0FFh ; DS:0F94
seg000:36EF                 mov     byte ptr ds:loc_F92+1, 0 ; DS:0F93
seg000:36F4                 call    near ptr 801Bh  ; FC01B - INITIALIZE VARIABLES (for terminal emulation?)
seg000:36F7                 mov     byte ptr ds:loc_F8F, 0
seg000:36FC                 jmp     near ptr 8027h  ; FC027
seg000:36FC INIT_HOUSEKEEPING_DS_KBD_or_CON__sub_36DC endp
seg000:36FC
seg000:36FF ; ---------------------------------------------------------------------------
seg000:36FF                 test    byte ptr es:loc_8E+2, 1 ; 0x90 AUTO SCREEN BLANK (0=OFF 1=ON)
seg000:3705                 jz      short loc_374B  ;
seg000:3705                                         ;
seg000:3707                 dec     byte ptr ds:loc_ED4+1 ; DS:0ED5
seg000:370B                 jge     short loc_374B  ;
seg000:370B                                         ;
seg000:370D                 call    DC012_REVERSE_FIELD_OFF__sub_1B65
seg000:3710                 mov     bx, 0EC1h
seg000:3713                 mov     byte ptr [bx], 80h ; 'Ç'
seg000:3716                 mov     byte ptr [bx+1000h], 0FAh ; '·'
seg000:371B                 mov     byte ptr [bx+1], 0FFh
seg000:371F                 mov     byte ptr [bx+1001h], 0
seg000:3724                 mov     word ptr [bx+2], 6
seg000:3729                 mov     word ptr [bx+1002h], 6
seg000:372F                 mov     ax, word ptr ds:j_SHORT_SELFTEST__loc_150+1
seg000:3732                 mov     word ptr ds:loc_1EC5+1, ax ; DS:1EC6
seg000:3735                 mov     ax, word ptr ds:loc_1004
seg000:3738                 mov     word ptr ds:ROM_ClearLeds__1EC3+1, ax
seg000:373B                 mov     word ptr ds:j_SHORT_SELFTEST__loc_150+1, bx
seg000:373F                 mov     word ptr ds:loc_1004, 6
seg000:3745                 or      byte ptr ds:loc_F2E+1, 2 ; DS:0F2F
seg000:374A                 retn
seg000:374B ; ---------------------------------------------------------------------------
seg000:374B
seg000:374B loc_374B:                               ; CODE XREF: seg000:3705j
seg000:374B                                         ; seg000:370Bj
seg000:374B                 mov     word ptr ds:loc_EC4+1, 25E0h
seg000:3751                 retn
seg000:3752
seg000:3752 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3752
seg000:3752
seg000:3752 REVERSE_FIELD__sub_3752 proc near       ; CODE XREF: j_REVERSE_FIELD__sub_3752j
seg000:3752                 test    byte ptr ds:loc_F2E+1, 2 ; DS:0F2F
seg000:3757                 jz      short loc_3777  ;
seg000:3757                                         ;
seg000:3759                 push    ax
seg000:375A                 push    bx
seg000:375B                 push    es
seg000:375C                 mov     ax, 0ED00h
seg000:375F                 mov     es, ax
seg000:3761                 assume es:nothing
seg000:3761                 mov     bx, word ptr ds:loc_1EC5+1
seg000:3765                 mov     word ptr ds:j_SHORT_SELFTEST__loc_150+1, bx
seg000:3769                 mov     bx, word ptr ds:ROM_ClearLeds__1EC3+1
seg000:376D                 mov     word ptr ds:loc_1004, bx
seg000:3771                 call    j_DC012_REVERSE_FIELD_NVM8A
seg000:3774                 pop     es
seg000:3775                 assume es:nothing
seg000:3775                 pop     bx
seg000:3776                 pop     ax
seg000:3777
seg000:3777 loc_3777:                               ; CODE XREF: REVERSE_FIELD__sub_3752+5j
seg000:3777                 mov     word ptr ds:loc_EC4+1, 25E0h ; DS:0EC5
seg000:377D                 mov     byte ptr ds:loc_ED4+1, 0Bh ; DS:0ED5
seg000:3782                 and     byte ptr ds:loc_F2E+1, 0FDh ; DS:0F2F
seg000:3787                 retn
seg000:3787 REVERSE_FIELD__sub_3752 endp
seg000:3787
seg000:3788
seg000:3788 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3788
seg000:3788
seg000:3788 TOGGLE_BLINK_FLIP_FLOP__3788 proc near  ; CODE XREF: KBD_HOP__sub_368F+3Bp
seg000:3788                 mov     al, 8           ; 08 => TOGGLE BLINK FLIP-FLOP
seg000:3788                                         ;
seg000:378A                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:378A                                         ;
seg000:378C                 mov     word ptr ds:loc_ECA+1, 3Fh ; '?'
seg000:3792                 retn
seg000:3792 TOGGLE_BLINK_FLIP_FLOP__3788 endp
seg000:3792
seg000:3793 ; ---------------------------------------------------------------------------
seg000:3793 ; START OF FUNCTION CHUNK FOR sub_3AB5
seg000:3793
seg000:3793 SCROLL__loc_3793:                       ; CODE XREF: sub_3AB5+16Bj
seg000:3793                 test    byte ptr ds:loc_1EF5, 4
seg000:3798                 jz      short locret_37CF ;
seg000:3798                                         ;
seg000:379A                 mov     ax, word ptr ds:loc_1EE7+1
seg000:379D                 mov     word ptr ds:loc_ECC+1, ax
seg000:37A0                 mov     al, byte ptr ds:loc_F2E+2 ; DS:0F30
seg000:37A3                 add     al, byte ptr ds:loc_F2E
seg000:37A7                 cmp     al, 0
seg000:37A9                 jz      short loc_37B1  ;
seg000:37A9                                         ;
seg000:37AB                 cmp     al, 0Ah
seg000:37AD                 jnz     short loc_37BB  ;
seg000:37AD                                         ;
seg000:37AF                 xor     al, al
seg000:37B1
seg000:37B1 loc_37B1:                               ; CODE XREF: sub_3AB5-30Cj
seg000:37B1                 or      byte ptr ds:loc_1EF5, 2
seg000:37B6                 and     byte ptr ds:loc_1EF5, 0FBh
seg000:37BB
seg000:37BB loc_37BB:                               ; CODE XREF: sub_3AB5-308j
seg000:37BB                 mov     byte ptr ds:loc_F2E+2, al ; DS:0F30
seg000:37BE                 and     al, 3           ; AND MASK: scroll latch LSB values 0-3
seg000:37C0                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:37C0                                         ;
seg000:37C2                 mov     al, byte ptr ds:loc_F2E+2 ; DS:0F30
seg000:37C5                 mov     cl, 2
seg000:37C7                 shr     al, cl          ; DIVIDE al BY 4
seg000:37C9                 and     al, 3           ; AND MASK: scroll latch LSB values 0-3
seg000:37CB                 or      al, 4           ; 04 = SET SCROLL LATCH MSBs to 00
seg000:37CB                                         ;
seg000:37CD                 out     0Ch, al         ; [0c] : DC012 VIDEO CONROL (*** WRITE-ONLY ***)
seg000:37CF
seg000:37CF locret_37CF:                            ; CODE XREF: sub_3AB5-31Dj
seg000:37CF                 retn
seg000:37CF ; END OF FUNCTION CHUNK FOR sub_3AB5
seg000:37D0 ; ---------------------------------------------------------------------------
seg000:37D0 ; START OF FUNCTION CHUNK FOR sub_84
seg000:37D0
seg000:37D0 TERMINAL_MODE__loc_37D0:                ; CODE XREF: sub_84+3B9j
seg000:37D0                 or      byte ptr ds:loc_1FFE, 1 ; are we in CONSOLE or TERMINAL MODE ?
seg000:37D5                 mov     byte ptr ds:loc_FED+1, 0FFh
seg000:37DA                 jmp     short loc_37E3
seg000:37DC ; ---------------------------------------------------------------------------
seg000:37DC
seg000:37DC loc_37DC:                               ; CODE XREF: sub_84:loc_3844j
seg000:37DC                                         ; sub_84:loc_38A8j
seg000:37DC                                         ; sub_84+382Aj
seg000:37DC                 test    byte ptr ds:loc_1EF7+1, 40h
seg000:37E1                 jz      short loc_3830
seg000:37E3
seg000:37E3 loc_37E3:                               ; CODE XREF: sub_84+3756j
seg000:37E3                 and     byte ptr ds:loc_1EF7+1, 0BFh
seg000:37E8                 and     byte ptr ds:loc_FEB, 0FBh
seg000:37ED                 call    WAIT_LED_ON_or_OFF__sub_30CA
seg000:37F0                 mov     al, byte ptr es:loc_A2+1 ; 0xA3 : FDXA Protocol = 00, FDXB = 01, FDXC = 02
seg000:37F4                 and     al, 0Fh
seg000:37F6                 cmp     al, 2
seg000:37F8                 jnz     short NOT_FDXC__loc_37FC ;
seg000:37F8                                         ;
seg000:37FA                 dec     al
seg000:37FC
seg000:37FC NOT_FDXC__loc_37FC:                     ; CODE XREF: sub_84+3774j
seg000:37FC                 cmp     al, byte ptr ds:loc_FED+1
seg000:3800                 jz      short loc_381A  ;
seg000:3800                                         ;
seg000:3802                 or      byte ptr ds:loc_FE4+1, 80h
seg000:3807                 mov     byte ptr ds:loc_FED+1, al
seg000:380A                 and     byte ptr ds:loc_1EF7+1, 5Dh
seg000:380F                 sub     dl, dl
seg000:3811                 call    ROM_Initialize7201__3157 ; "Initialize 7201 to NVM values"
seg000:3814                 call    near ptr 801Bh  ; CON_INIT_VARS__sub_27FF ; INITIALIZE VARIABLES (for terminal emulation?)
seg000:3817                 call    near ptr 8036h  ; INITIALIZE keyboard related variables (?). Also used @ offset 1dae
seg000:381A
seg000:381A loc_381A:                               ; CODE XREF: sub_84+377Cj
seg000:381A                 test    byte ptr es:loc_9D+2, 1
seg000:3820                 jz      short loc_384D  ;
seg000:3820                                         ;
seg000:3822                 cmp     al, 0
seg000:3824                 jz      short loc_3838  ;
seg000:3824                                         ;
seg000:3826                 or      byte ptr ds:loc_FE4+1, 80h
seg000:382B
seg000:382B loc_382B:                               ;
seg000:382B                 call    sub_2E52        ; Serial communication (reads & writes comm status register)
seg000:382E                 jmp     short loc_3838
seg000:3830 ; ---------------------------------------------------------------------------
seg000:3830
seg000:3830 loc_3830:                               ; CODE XREF: sub_84+375Dj
seg000:3830                 test    byte ptr es:loc_9D+2, 1 ; NVRAM $9f : ??
seg000:3836                 jz      short loc_3846
seg000:3838
seg000:3838 loc_3838:                               ; CODE XREF: sub_84+37A0j
seg000:3838                                         ; sub_84+37AAj
seg000:3838                 call    KEYB_IN_AL__sub_38B1
seg000:383B                 jnb     short loc_3844  ;
seg000:383B                                         ;
seg000:383D                 and     dl, dl
seg000:383F                 jnz     short loc_3844  ;
seg000:383F                                         ;
seg000:3841                 call    near ptr 8006h  ; ROM_ConsoleOut     /* AL<-ASCII char
seg000:3844
seg000:3844 loc_3844:                               ; CODE XREF: sub_84+37B7j
seg000:3844                                         ; sub_84+37BBj
seg000:3844                 jmp     short loc_37DC
seg000:3846 ; ---------------------------------------------------------------------------
seg000:3846
seg000:3846 loc_3846:                               ; CODE XREF: sub_84+37B2j
seg000:3846                 cmp     word ptr ds:loc_ED0+1, 0
seg000:384B                 jnz     short NO_ECHO__loc_388F
seg000:384D
seg000:384D loc_384D:                               ; CODE XREF: sub_84+379Cj
seg000:384D                 call    sub_2E52        ; Serial communication (reads & writes comm status register)
seg000:3850                 mov     word ptr ds:loc_ED0+1, 1
seg000:3856                 test    byte ptr ds:loc_FEB+1, 20h
seg000:385B                 jz      short NO_ECHO__loc_388F ;
seg000:385B                                         ;
seg000:385D                 test    byte ptr ds:loc_FEB, 4
seg000:3862                 jnz     short NO_ECHO__loc_388F ;
seg000:3862                                         ;
seg000:3864                 call    KEYB_IN_AL__sub_38B1
seg000:3867                 jnb     short NO_ECHO__loc_388F ;
seg000:3867                                         ;
seg000:3869                 cmp     al, 11h
seg000:386B                 jnz     short loc_3872  ;
seg000:386B                                         ;
seg000:386D                 and     byte ptr ds:loc_FEB, 0F7h
seg000:3872
seg000:3872 loc_3872:                               ; CODE XREF: sub_84+37E7j
seg000:3872                 cmp     al, 13h
seg000:3874                 jnz     short LOOP___loc_387B ;
seg000:3874                                         ;
seg000:3876                 or      byte ptr ds:loc_FEB, 8
seg000:387B
seg000:387B LOOP___loc_387B:                        ; CODE XREF: sub_84+37F0j
seg000:387B                                         ; sub_84+37FAj
seg000:387B                 call    sub_33FF
seg000:387E                 jnb     short LOOP___loc_387B ;
seg000:387E                                         ;
seg000:3880                 test    byte ptr es:loc_93+2, 1 ; 0x95 LOCAL ECHO (0=OFF / 1 = ON)
seg000:3886                 jz      short NO_ECHO__loc_388F ;
seg000:3886                                         ;
seg000:3888                 and     dl, dl
seg000:388A                 jnz     short NO_ECHO__loc_388F ;
seg000:388A                                         ;
seg000:388C                 call    near ptr 8006h  ; ROM_ConsoleOut     /* AL<-ASCII char
seg000:388F
seg000:388F NO_ECHO__loc_388F:                      ; CODE XREF: sub_84+37C7j
seg000:388F                                         ; sub_84+37D7j
seg000:388F                                         ; sub_84+37DEj
seg000:388F                                         ; sub_84+37E3j
seg000:388F                                         ; sub_84+3802j
seg000:388F                                         ; sub_84+3806j
seg000:388F                 call    COMM__sub_3474
seg000:3892                 jnb     short loc_38A8  ;
seg000:3892                                         ;
seg000:3894                 test    byte ptr es:loc_98+2, 1 ; 9A:  DISCONNECT CHAR.(0 = off)
seg000:389A                 jz      short loc_38AB  ;
seg000:389A                                         ;
seg000:389C                 cmp     al, 4
seg000:389E                 jnz     short loc_38AB  ;
seg000:389E                                         ;
seg000:38A0                 or      byte ptr ds:loc_FE4+1, 80h
seg000:38A5                 call    sub_391E
seg000:38A8
seg000:38A8 loc_38A8:                               ; CODE XREF: sub_84+380Ej
seg000:38A8                 jmp     loc_37DC
seg000:38AB ; ---------------------------------------------------------------------------
seg000:38AB
seg000:38AB loc_38AB:                               ; CODE XREF: sub_84+3816j
seg000:38AB                                         ; sub_84+381Aj
seg000:38AB                 call    sub_2DC6
seg000:38AE                 jmp     loc_37DC
seg000:38AE ; END OF FUNCTION CHUNK FOR sub_84
seg000:38B1
seg000:38B1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:38B1
seg000:38B1
seg000:38B1 KEYB_IN_AL__sub_38B1 proc near          ; CODE XREF: sub_84:loc_3838p
seg000:38B1                                         ; sub_84+37E0p
seg000:38B1                                         ; KEYB_IN_AL__sub_38B1+15j
seg000:38B1                                         ; KEYB_IN_AL__sub_38B1+21j
seg000:38B1                                         ; KEYB_IN_AL__sub_38B1+26j
seg000:38B1                                         ; KEYB_IN_AL__sub_38B1+49j
seg000:38B1                                         ; KEYB_IN_AL__sub_38B1+50j
seg000:38B1                 call    near ptr 803Ch  ; KEYBOARD INPUT => AL
seg000:38B4                 jb      short loc_38B7
seg000:38B6                 retn
seg000:38B7 ; ---------------------------------------------------------------------------
seg000:38B7
seg000:38B7 loc_38B7:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+3j
seg000:38B7                 and     cl, cl
seg000:38B9                 jz      short loc_38BD
seg000:38BB                 stc
seg000:38BC                 retn
seg000:38BD ; ---------------------------------------------------------------------------
seg000:38BD
seg000:38BD loc_38BD:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+8j
seg000:38BD                 cmp     al, 85h ; 'à'
seg000:38BF                 jnz     short loc_38DE  ;
seg000:38BF                                         ;
seg000:38C1                 test    byte ptr ds:loc_1EF7+1, 8
seg000:38C6                 jz      short KEYB_IN_AL__sub_38B1 ;
seg000:38C6                                         ;
seg000:38C8                 test    ah, 4
seg000:38CB                 jz      short loc_38D4  ;
seg000:38CB                                         ;
seg000:38CD                 xor     byte ptr ds:loc_ED4+2, 0FFh
seg000:38D2                 jmp     short KEYB_IN_AL__sub_38B1
seg000:38D4 ; ---------------------------------------------------------------------------
seg000:38D4
seg000:38D4 loc_38D4:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+1Aj
seg000:38D4                 test    ah, 2
seg000:38D7                 jnz     short KEYB_IN_AL__sub_38B1 ;
seg000:38D7                                         ;
seg000:38D9                 call    near ptr 803Fh  ; FC03F - terminal / console related?
seg000:38DC                 jmp     short loc_391C
seg000:38DE ; ---------------------------------------------------------------------------
seg000:38DE
seg000:38DE loc_38DE:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+Ej
seg000:38DE                 test    byte ptr es:loc_9D+2, 1 ; NVRAM: ED09f : ??
seg000:38E4                 jnz     short loc_391C  ;
seg000:38E4                                         ;
seg000:38E6                 test    ah, 4
seg000:38E9                 jz      short loc_3903  ;
seg000:38E9                                         ;
seg000:38EB                 mov     byte ptr ds:loc_FED, ah
seg000:38EF                 mov     bx, 0FB7h
seg000:38F2                 call    sub_5A
seg000:38F5                 cmp     byte ptr ds:loc_FB7, 0
seg000:38FA                 jz      short KEYB_IN_AL__sub_38B1 ;
seg000:38FA                                         ;
seg000:38FC                 mov     byte ptr ds:loc_FCB+1, 0
seg000:3901                 jmp     short KEYB_IN_AL__sub_38B1
seg000:3903 ; ---------------------------------------------------------------------------
seg000:3903
seg000:3903 loc_3903:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+38j
seg000:3903                 test    ah, 2
seg000:3906                 jz      short loc_390F  ;
seg000:3906                                         ;
seg000:3908                 or      byte ptr ds:loc_FE8, 80h
seg000:390D                 jmp     short loc_391C
seg000:390F ; ---------------------------------------------------------------------------
seg000:390F
seg000:390F loc_390F:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+55j
seg000:390F                 test    byte ptr es:loc_93+3, 1 ; ED096: SEND 'BREAK' (1 = ON)
seg000:3915                 jz      short loc_391C  ;
seg000:3915                                         ;
seg000:3917                 or      byte ptr ds:loc_FE8, 40h
seg000:391C
seg000:391C loc_391C:                               ; CODE XREF: KEYB_IN_AL__sub_38B1+2Bj
seg000:391C                                         ; KEYB_IN_AL__sub_38B1+33j
seg000:391C                                         ; KEYB_IN_AL__sub_38B1+5Cj
seg000:391C                                         ; KEYB_IN_AL__sub_38B1+64j
seg000:391C                 clc
seg000:391D                 retn
seg000:391D KEYB_IN_AL__sub_38B1 endp
seg000:391D
seg000:391E
seg000:391E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:391E
seg000:391E
seg000:391E sub_391E        proc near               ; CODE XREF: sub_84+3821p
seg000:391E                 cli
seg000:391F                 mov     word ptr ds:loc_ED0+1, 0
seg000:3925                 sti
seg000:3926                 retn
seg000:3926 sub_391E        endp
seg000:3926
seg000:3927
seg000:3927 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3927
seg000:3927
seg000:3927 ROM_DisableCursor__3927 proc near       ; CODE XREF: j_ROM_DisableCursorj
seg000:3927                                         ; CURSOR_OFF_ON1__sub_39C4p
seg000:3927                                         ; sub_39E3p
seg000:3927                                         ; SCREEN_TO_PRN__sub_39FD+35p
seg000:3927                                         ; sub_3A66+3p sub_3AB5+2Bp
seg000:3927                                         ; sub_3AB5+36p
seg000:3927                 pushf                   ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:3928                 cli
seg000:3929                 mov     byte ptr ds:loc_F2C, 1
seg000:392E                 inc     byte ptr ds:loc_F29+2
seg000:3932                 cmp     byte ptr ds:loc_F29+2, 1
seg000:3937                 ja      short loc_394E
seg000:3939                 push    ax
seg000:393A                 push    bx
seg000:393B                 mov     bx, word ptr ds:loc_ED7+1
seg000:393F                 mov     al, byte ptr ds:loc_ED9+1
seg000:3942                 mov     [bx+1000h], al
seg000:3946                 mov     ax, word ptr ds:loc_F40+1
seg000:3949                 mov     word ptr ds:loc_F29, ax
seg000:394C                 pop     bx
seg000:394D                 pop     ax
seg000:394E
seg000:394E loc_394E:                               ; CODE XREF: ROM_DisableCursor__3927+10j
seg000:394E                 popf
seg000:394F                 retn
seg000:394F ROM_DisableCursor__3927 endp
seg000:394F
seg000:3950
seg000:3950 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3950
seg000:3950
seg000:3950 ROM_EnableCursor__3950 proc near        ; CODE XREF: j_ROM_EnableCursorj
seg000:3950                                         ; CURSOR_OFF_ON1__sub_39C4+Aj
seg000:3950                                         ; sub_39E3:loc_39F1j
seg000:3950                                         ; SCREEN_TO_PRN__sub_39FD+3Bp
seg000:3950                 pushf                   ; Called by jump table located at $1dba / $1df3 call word ptr cs:[di+1DBAh]
seg000:3951                 cli
seg000:3952                 push    ax
seg000:3953                 push    bx
seg000:3954                 push    dx
seg000:3955                 mov     dx, word ptr ds:loc_F40+1
seg000:3959                 call    VIDEORAM__sub_3CA8
seg000:395C                 mov     word ptr ds:loc_F26+1, bx
seg000:3960                 mov     word ptr ds:loc_ED7+1, dx
seg000:3964                 mov     bx, word ptr ds:loc_F29
seg000:3968                 cmp     word ptr ds:loc_F40+1, bx
seg000:396C                 jz      short loc_3981  ;
seg000:396C                                         ;
seg000:396E                 and     byte ptr ds:loc_F42+1, 0FDh
seg000:3973                 mov     al, byte ptr ds:loc_F42
seg000:3976                 cmp     al, byte ptr ds:loc_F29+1
seg000:397A                 jz      short loc_3981  ;
seg000:397A                                         ;
seg000:397C                 or      byte ptr ds:loc_F42+1, 4
seg000:3981
seg000:3981 loc_3981:                               ; CODE XREF: ROM_EnableCursor__3950+1Cj
seg000:3981                                         ; ROM_EnableCursor__3950+2Aj
seg000:3981                 dec     byte ptr ds:loc_F29+2
seg000:3985                 jg      short loc_39BF  ;
seg000:3985                                         ;
seg000:3987                 mov     bx, word ptr ds:loc_ED7+1
seg000:398B                 mov     al, [bx+1000h]
seg000:398F                 mov     byte ptr ds:loc_ED9+1, al
seg000:3992                 test    byte ptr ds:loc_F8F+1, 40h
seg000:3997                 jz      short loc_39A1  ;
seg000:3997                                         ;
seg000:3999                 test    byte ptr es:loc_89, 1
seg000:399F                 jnz     short loc_39A8
seg000:39A1
seg000:39A1 loc_39A1:                               ; CODE XREF: ROM_EnableCursor__3950+47j
seg000:39A1                 mov     byte ptr ds:loc_ED7, 3Dh ; '='
seg000:39A6                 jmp     short loc_39B1
seg000:39A8 ; ---------------------------------------------------------------------------
seg000:39A8
seg000:39A8 loc_39A8:                               ; CODE XREF: ROM_EnableCursor__3950+4Fj
seg000:39A8                 xor     al, byte ptr ds:loc_F2C+1
seg000:39AC                 mov     byte ptr ds:loc_ED7, 3Fh ; '?'
seg000:39B1
seg000:39B1 loc_39B1:                               ; CODE XREF: ROM_EnableCursor__3950+56j
seg000:39B1                 mov     [bx+1000h], al
seg000:39B5                 mov     byte ptr ds:loc_F29+2, 0
seg000:39BA                 mov     byte ptr ds:loc_F2C, 3
seg000:39BF
seg000:39BF loc_39BF:                               ; CODE XREF: ROM_EnableCursor__3950+35j
seg000:39BF                 pop     dx
seg000:39C0                 pop     bx
seg000:39C1                 pop     ax
seg000:39C2                 popf
seg000:39C3                 retn
seg000:39C3 ROM_EnableCursor__3950 endp
seg000:39C3
seg000:39C4
seg000:39C4 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:39C4
seg000:39C4
seg000:39C4 CURSOR_OFF_ON1__sub_39C4 proc near      ; CODE XREF: j_CURSOR_OFF_ON1__sub_39C4j
seg000:39C4                                         ; CURSOR_OFF_ON2__sub_39F4p
seg000:39C4                                         ; SCREEN_TO_PRN__sub_39FD+2Fp
seg000:39C4                 call    ROM_DisableCursor__3927
seg000:39C7                 mov     byte ptr ds:loc_F40+1, 1
seg000:39CC                 mov     al, 20h ; ' '
seg000:39CE                 jmp     short ROM_EnableCursor__3950
seg000:39CE CURSOR_OFF_ON1__sub_39C4 endp
seg000:39CE
seg000:39D0
seg000:39D0 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:39D0
seg000:39D0
seg000:39D0 sub_39D0        proc near               ; CODE XREF: sub_33j
seg000:39D0                 pushf
seg000:39D1                 cli
seg000:39D2                 dec     byte ptr ds:loc_F29+2
seg000:39D6                 jg      short loc_39E1  ;
seg000:39D6                                         ;
seg000:39D8                 mov     bx, word ptr ds:loc_ED7+1
seg000:39DC                 mov     al, 20h ; ' '
seg000:39DE                 jmp     near ptr 800Ch  ; PARAMETER: AL ?
seg000:39E1 ; ---------------------------------------------------------------------------
seg000:39E1
seg000:39E1 loc_39E1:                               ; CODE XREF: sub_39D0+6j
seg000:39E1                 popf
seg000:39E2                 retn
seg000:39E2 sub_39D0        endp
seg000:39E2
seg000:39E3
seg000:39E3 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:39E3
seg000:39E3
seg000:39E3 sub_39E3        proc near               ; CODE XREF: sub_18j
seg000:39E3                 call    ROM_DisableCursor__3927
seg000:39E6                 cmp     byte ptr ds:loc_F40+1, 1
seg000:39EB                 jz      short loc_39F1
seg000:39ED                 dec     byte ptr ds:loc_F40+1
seg000:39F1
seg000:39F1 loc_39F1:                               ; CODE XREF: sub_39E3+8j
seg000:39F1                 jmp     ROM_EnableCursor__3950
seg000:39F1 sub_39E3        endp
seg000:39F1
seg000:39F4
seg000:39F4 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:39F4
seg000:39F4
seg000:39F4 CURSOR_OFF_ON2__sub_39F4 proc near      ; CODE XREF: j_CURSOR_OFF_ON__sub_39F4j
seg000:39F4                 call    CURSOR_OFF_ON1__sub_39C4
seg000:39F4 CURSOR_OFF_ON2__sub_39F4 endp
seg000:39F4
seg000:39F7
seg000:39F7 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:39F7
seg000:39F7
seg000:39F7 sub_39F7        proc near               ; CODE XREF: SCREEN_TO_PRN1__sub_24j
seg000:39F7                 call    SCREEN_TO_PRN__sub_39FD
seg000:39FA                 jmp     loc_4E
seg000:39FA sub_39F7        endp
seg000:39FA
seg000:39FD
seg000:39FD ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:39FD
seg000:39FD
seg000:39FD SCREEN_TO_PRN__sub_39FD proc near       ; CODE XREF: j_SCREEN_TO_PRN2__sub_39FDj
seg000:39FD                                         ; sub_39F7p
seg000:39FD                 push    ax
seg000:39FE                 push    bx
seg000:39FF                 push    cx
seg000:3A00                 push    dx
seg000:3A01                 test    word ptr ds:loc_1FFE, 1 ; are we in CONSOLE or TERMINAL MODE ?
seg000:3A07                 jz      short loc_3A24  ;
seg000:3A07                                         ;
seg000:3A09                 test    byte ptr ds:loc_ED4+2, 0FFh
seg000:3A0E                 jz      short loc_3A24  ;
seg000:3A0E                                         ;
seg000:3A10                 mov     dh, byte ptr ds:loc_F42
seg000:3A14                 call    near ptr 8042h  ; SCREEN TO PRINTER?   PARAMETER: DH ?
seg000:3A17                 cmp     al, 0Ch
seg000:3A19                 jz      short loc_3A21  ;
seg000:3A19                                         ;
seg000:3A1B                 cmp     al, 0Bh
seg000:3A1D                 jz      short loc_3A21  ;
seg000:3A1D                                         ;
seg000:3A1F                 mov     al, 0Ah
seg000:3A21
seg000:3A21 loc_3A21:                               ; CODE XREF: SCREEN_TO_PRN__sub_39FD+1Cj
seg000:3A21                                         ; SCREEN_TO_PRN__sub_39FD+20j
seg000:3A21                 call    near ptr 8045h  ; FC045 - * SEND BYTE TO PRINTER PORT *  ( PARAMETER: AL )
seg000:3A24
seg000:3A24 loc_3A24:                               ; CODE XREF: SCREEN_TO_PRN__sub_39FD+Aj
seg000:3A24                                         ; SCREEN_TO_PRN__sub_39FD+11j
seg000:3A24                 test    byte ptr es:loc_8E, 1
seg000:3A2A                 jz      short loc_3A2F
seg000:3A2C                 call    CURSOR_OFF_ON1__sub_39C4
seg000:3A2F
seg000:3A2F loc_3A2F:                               ; CODE XREF: SCREEN_TO_PRN__sub_39FD+2Dj
seg000:3A2F                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:3A32                 call    ROM_DisableCursor__3927
seg000:3A35                 call    SCROLL__sub_3A40
seg000:3A38                 call    ROM_EnableCursor__3950
seg000:3A3B                 pop     dx
seg000:3A3C                 pop     cx
seg000:3A3D                 pop     bx
seg000:3A3E                 pop     ax
seg000:3A3F                 retn
seg000:3A3F SCREEN_TO_PRN__sub_39FD endp
seg000:3A3F
seg000:3A40
seg000:3A40 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3A40
seg000:3A40
seg000:3A40 SCROLL__sub_3A40 proc near              ; CODE XREF: seg000:287Dp
seg000:3A40                                         ; SCREEN_TO_PRN__sub_39FD+38p
seg000:3A40                 mov     al, byte ptr ds:loc_F59
seg000:3A43                 cmp     byte ptr ds:loc_F42, al
seg000:3A47                 jb      short loc_3A58  ;
seg000:3A47                                         ;
seg000:3A49                 jz      short loc_3A53  ;
seg000:3A49                                         ;
seg000:3A4B                 cmp     byte ptr ds:loc_F42, 18h ; line 24 ?
seg000:3A50                 jb      short loc_3A58
seg000:3A52                 retn
seg000:3A53 ; ---------------------------------------------------------------------------
seg000:3A53
seg000:3A53 loc_3A53:                               ; CODE XREF: SCROLL__sub_3A40+9j
seg000:3A53                 call    sub_3AB5
seg000:3A56                 jmp     short loc_3A63
seg000:3A58 ; ---------------------------------------------------------------------------
seg000:3A58
seg000:3A58 loc_3A58:                               ; CODE XREF: SCROLL__sub_3A40+7j
seg000:3A58                                         ; SCROLL__sub_3A40+10j
seg000:3A58                 inc     byte ptr ds:loc_F42
seg000:3A5C                 mov     dl, byte ptr ds:loc_F40+1
seg000:3A60                 call    VIDEORAM__sub_2124
seg000:3A63
seg000:3A63 loc_3A63:                               ; CODE XREF: SCROLL__sub_3A40+16j
seg000:3A63                 jmp     VIDEORAM__sub_3C53
seg000:3A63 SCROLL__sub_3A40 endp
seg000:3A63
seg000:3A66
seg000:3A66 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3A66
seg000:3A66
seg000:3A66 sub_3A66        proc near               ; CODE XREF: sub_2Dj
seg000:3A66                 call    near ptr 800Fh  ; Waits for a certain event (DS:1ef5 = 1e)
seg000:3A69                 call    ROM_DisableCursor__3927
seg000:3A6C                 call    sub_3A72
seg000:3A6F                 jmp     EnableCursor2__loc_2420
seg000:3A6F sub_3A66        endp
seg000:3A6F
seg000:3A72
seg000:3A72 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3A72
seg000:3A72
seg000:3A72 sub_3A72        proc near               ; CODE XREF: seg000:2804p
seg000:3A72                                         ; sub_3A66+6p
seg000:3A72                 mov     al, byte ptr ds:loc_F54+4
seg000:3A75                 cmp     byte ptr ds:loc_F42, al
seg000:3A79                 ja      short loc_3A8A
seg000:3A7B                 jz      short loc_3A85
seg000:3A7D                 cmp     byte ptr ds:loc_F42, 1
seg000:3A82                 ja      short loc_3A8A
seg000:3A84                 retn
seg000:3A85 ; ---------------------------------------------------------------------------
seg000:3A85
seg000:3A85 loc_3A85:                               ; CODE XREF: sub_3A72+9j
seg000:3A85                 call    sub_3A98
seg000:3A88                 jmp     short loc_3A95
seg000:3A8A ; ---------------------------------------------------------------------------
seg000:3A8A
seg000:3A8A loc_3A8A:                               ; CODE XREF: sub_3A72+7j
seg000:3A8A                                         ; sub_3A72+10j
seg000:3A8A                 dec     byte ptr ds:loc_F42
seg000:3A8E                 mov     dl, byte ptr ds:loc_F40+1
seg000:3A92                 call    VIDEORAM__sub_2124
seg000:3A95
seg000:3A95 loc_3A95:                               ; CODE XREF: sub_3A72+16j
seg000:3A95                 jmp     VIDEORAM__sub_3C53
seg000:3A95 sub_3A72        endp
seg000:3A95
seg000:3A98
seg000:3A98 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3A98
seg000:3A98
seg000:3A98 sub_3A98        proc near               ; CODE XREF: sub_3A72:loc_3A85p
seg000:3A98                 mov     dh, byte ptr ds:loc_F59
seg000:3A9C                 mov     dl, byte ptr ds:loc_F54+4
seg000:3AA0                 or      byte ptr ds:loc_1EF5, 11h
seg000:3AA5                 push    dx
seg000:3AA6                 dec     dl
seg000:3AA8                 call    sub_3AF1
seg000:3AAB                 pop     dx
seg000:3AAC                 call    VIDEORAM_TABLE__sub_3B30
seg000:3AAF                 inc     byte ptr ds:loc_F33
seg000:3AB3                 jmp     short loc_3ACD
seg000:3AB3 sub_3A98        endp
seg000:3AB3
seg000:3AB5
seg000:3AB5 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3AB5
seg000:3AB5
seg000:3AB5 sub_3AB5        proc near               ; CODE XREF: SCROLL__sub_3A40:loc_3A53p
seg000:3AB5
seg000:3AB5 ; FUNCTION CHUNK AT seg000:3793 SIZE 0000003D BYTES
seg000:3AB5 ; FUNCTION CHUNK AT seg000:3BE4 SIZE 0000003F BYTES
seg000:3AB5
seg000:3AB5                 mov     dh, byte ptr ds:loc_F54+4
seg000:3AB9                 mov     dl, byte ptr ds:loc_F59
seg000:3ABD                 and     byte ptr ds:loc_1EF5, 0FEh
seg000:3AC2                 or      byte ptr ds:loc_1EF5, 10h
seg000:3AC7                 call    sub_3AF1
seg000:3ACA                 call    VIDEORAM_TABLE__sub_3B30
seg000:3ACD
seg000:3ACD loc_3ACD:                               ; CODE XREF: sub_3A98+1Bj
seg000:3ACD                 call    sub_3BAF
seg000:3AD0                 call    VIDEORAM_TABLE_v3__sub_2136
seg000:3AD3                 or      byte ptr ds:loc_F42+1, 4
seg000:3AD8                 test    byte ptr es:sub_84, 1
seg000:3ADE                 jz      short loc_3AE6  ;
seg000:3ADE                                         ;
seg000:3AE0                 call    ROM_DisableCursor__3927
seg000:3AE3                 jmp     SCROLL1__loc_3BE4
seg000:3AE6 ; ---------------------------------------------------------------------------
seg000:3AE6
seg000:3AE6 loc_3AE6:                               ; CODE XREF: sub_3AB5+29j
seg000:3AE6                 or      byte ptr ds:loc_1EF5, 0Ah
seg000:3AEB                 call    ROM_DisableCursor__3927
seg000:3AEE                 jmp     SWITCH_HOLDSCREEN__sub_3C34
seg000:3AEE sub_3AB5        endp
seg000:3AEE
seg000:3AF1
seg000:3AF1 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3AF1
seg000:3AF1
seg000:3AF1 sub_3AF1        proc near               ; CODE XREF: sub_3A98+10p
seg000:3AF1                                         ; sub_3AB5+12p
seg000:3AF1                 push    dx
seg000:3AF2                 call    sub_3B9E
seg000:3AF5                 pop     dx
seg000:3AF6                 push    dx
seg000:3AF7                 mov     bl, dl
seg000:3AF9                 inc     bl
seg000:3AFB                 call    sub_3B7A
seg000:3AFE                 mov     bl, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:3B02                 sub     bh, bh
seg000:3B04                 add     bx, word ptr ds:loc_F31
seg000:3B08                 mov     byte ptr [bx], 0FFh
seg000:3B0B                 mov     byte ptr [bx+1000h], 0
seg000:3B10                 mov     ax, [si+1]
seg000:3B13                 mov     [bx+1], ax
seg000:3B16                 mov     al, [si+1001h]
seg000:3B1A                 mov     [bx+1001h], al
seg000:3B1E                 mov     al, 7
seg000:3B20                 mov     byte ptr ds:loc_1EF4, al
seg000:3B23                 mov     ax, word ptr ds:loc_F31
seg000:3B26                 mov     word ptr ds:loc_1EEC, ax
seg000:3B29                 inc     si
seg000:3B2A                 mov     word ptr ds:loc_1EE7+3, si
seg000:3B2E                 pop     dx
seg000:3B2F                 retn
seg000:3B2F sub_3AF1        endp
seg000:3B2F
seg000:3B30
seg000:3B30 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3B30
seg000:3B30
seg000:3B30 VIDEORAM_TABLE__sub_3B30 proc near      ; CODE XREF: sub_3A98+14p
seg000:3B30                                         ; sub_3AB5+15p
seg000:3B30                 push    word ptr ds:loc_F31
seg000:3B34                 mov     byte ptr ds:loc_F33, dh
seg000:3B38                 mov     bl, dh
seg000:3B3A                 dec     bl
seg000:3B3C                 sub     bh, bh
seg000:3B3E                 shl     bx, 1
seg000:3B40                 mov     ax, [bx+0EF4h]
seg000:3B44                 mov     word ptr ds:loc_F31, ax
seg000:3B47                 cld
seg000:3B48                 and     byte ptr ds:loc_1EF5, 0FEh
seg000:3B4D                 mov     cl, dl
seg000:3B4F                 sub     cl, dh
seg000:3B51                 jge     short loc_3B5B
seg000:3B53                 std
seg000:3B54                 or      byte ptr ds:loc_1EF5, 1
seg000:3B59                 neg     cl
seg000:3B5B
seg000:3B5B loc_3B5B:                               ; CODE XREF: VIDEORAM_TABLE__sub_3B30+21j
seg000:3B5B                 sub     ch, ch
seg000:3B5D                 mov     bl, dh
seg000:3B5F                 dec     bl
seg000:3B61                 mov     bh, ch
seg000:3B63                 shl     bx, 1
seg000:3B65                 lea     di, [bx+0EF4h]
seg000:3B69                 mov     si, di
seg000:3B6B                 lodsw
seg000:3B6C                 push    es
seg000:3B6D                 mov     ax, ds
seg000:3B6F                 mov     es, ax
seg000:3B71
seg000:3B71 loc_3B71:                               ; CODE XREF: VIDEORAM_TABLE__sub_3B30+43j
seg000:3B71                 lodsw
seg000:3B72                 stosw
seg000:3B73                 loop    loc_3B71
seg000:3B75                 pop     es
seg000:3B76                 pop     ax
seg000:3B77                 mov     [di], ax
seg000:3B79                 retn
seg000:3B79 VIDEORAM_TABLE__sub_3B30 endp
seg000:3B79
seg000:3B7A
seg000:3B7A ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3B7A
seg000:3B7A
seg000:3B7A sub_3B7A        proc near               ; CODE XREF: sub_3AF1+Ap
seg000:3B7A                                         ; sub_3BAF+4p
seg000:3B7A                 mov     si, 3
seg000:3B7D                 dec     bl
seg000:3B7F                 jz      short locret_3B9D
seg000:3B81                 sub     bh, bh
seg000:3B83                 dec     bx
seg000:3B84                 shl     bx, 1
seg000:3B86                 mov     si, [bx+0EF4h]
seg000:3B8A                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:3B8D                 sub     ah, ah
seg000:3B8F                 test    si, 8000h
seg000:3B93                 jz      short loc_3B9B
seg000:3B95                 shr     ax, 1
seg000:3B97                 and     si, 7FFFh
seg000:3B9B
seg000:3B9B loc_3B9B:                               ; CODE XREF: sub_3B7A+19j
seg000:3B9B                 add     si, ax
seg000:3B9D
seg000:3B9D locret_3B9D:                            ; CODE XREF: sub_3B7A+5j
seg000:3B9D                 retn
seg000:3B9D sub_3B7A        endp
seg000:3B9D
seg000:3B9E
seg000:3B9E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3B9E
seg000:3B9E
seg000:3B9E sub_3B9E        proc near               ; CODE XREF: sub_3AF1+1p
seg000:3B9E
seg000:3B9E ; FUNCTION CHUNK AT seg000:1FF7 SIZE 00000030 BYTES
seg000:3B9E
seg000:3B9E                 mov     ah, 0Eh
seg000:3BA0                 mov     al, 0
seg000:3BA2                 mov     cl, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:3BA6                 mov     dl, 1
seg000:3BA8                 mov     si, word ptr ds:loc_F31
seg000:3BAC                 jmp     loc_1FF7
seg000:3BAC sub_3B9E        endp
seg000:3BAC
seg000:3BAF
seg000:3BAF ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3BAF
seg000:3BAF
seg000:3BAF sub_3BAF        proc near               ; CODE XREF: sub_3AB5:loc_3ACDp
seg000:3BAF                 mov     bl, byte ptr ds:loc_F33
seg000:3BB3                 call    sub_3B7A
seg000:3BB6                 mov     di, word ptr ds:loc_F31
seg000:3BBA                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:3BBD                 sub     ah, ah
seg000:3BBF                 test    di, 8000h
seg000:3BC3                 jz      short loc_3BCF
seg000:3BC5                 shr     ax, 1
seg000:3BC7                 and     di, 7FFFh
seg000:3BCB                 mov     word ptr ds:loc_F31, di
seg000:3BCF
seg000:3BCF loc_3BCF:                               ; CODE XREF: sub_3BAF+14j
seg000:3BCF                 add     di, ax
seg000:3BD1                 mov     ax, [di+1]
seg000:3BD4                 mov     word ptr ds:loc_1EF0, ax
seg000:3BD7                 inc     si
seg000:3BD8                 mov     word ptr ds:loc_1EED+1, si
seg000:3BDC                 mov     ax, [di+1001h]
seg000:3BE0                 mov     word ptr ds:loc_1EF2, ax
seg000:3BE3                 retn
seg000:3BE3 sub_3BAF        endp
seg000:3BE3
seg000:3BE4 ; ---------------------------------------------------------------------------
seg000:3BE4 ; START OF FUNCTION CHUNK FOR sub_3AB5
seg000:3BE4
seg000:3BE4 SCROLL1__loc_3BE4:                      ; CODE XREF: sub_3AB5+2Ej
seg000:3BE4                 xor     dx, dx
seg000:3BE6                 xor     bx, bx
seg000:3BE8                 mov     al, byte ptr es:loc_A6+1
seg000:3BEC                 and     al, 0Fh
seg000:3BEE                 cmp     al, 1
seg000:3BF0                 jb      short loc_3BF6
seg000:3BF2                 ja      short loc_3BF9
seg000:3BF4                 jmp     short loc_3BFA
seg000:3BF6 ; ---------------------------------------------------------------------------
seg000:3BF6
seg000:3BF6 loc_3BF6:                               ; CODE XREF: sub_3AB5+13Bj
seg000:3BF6                 inc     dx
seg000:3BF7                 jmp     short loc_3BFA
seg000:3BF9 ; ---------------------------------------------------------------------------
seg000:3BF9
seg000:3BF9 loc_3BF9:                               ; CODE XREF: sub_3AB5+13Dj
seg000:3BF9                 inc     bx
seg000:3BFA
seg000:3BFA loc_3BFA:                               ; CODE XREF: sub_3AB5+13Fj
seg000:3BFA                                         ; sub_3AB5+142j
seg000:3BFA                 inc     bx
seg000:3BFB                 inc     dx
seg000:3BFC                 xor     al, al
seg000:3BFE                 test    byte ptr ds:loc_1EF5, 1
seg000:3C03                 jz      short loc_3C09  ;
seg000:3C03                                         ;
seg000:3C05                 neg     bl
seg000:3C07                 mov     al, 0Ah
seg000:3C09
seg000:3C09 loc_3C09:                               ; CODE XREF: sub_3AB5+14Ej
seg000:3C09                 mov     byte ptr ds:loc_F2E, bl
seg000:3C0D                 mov     byte ptr ds:loc_F2E+2, al
seg000:3C10                 mov     word ptr ds:loc_1EE7+1, dx
seg000:3C14                 mov     word ptr ds:loc_ECC+1, dx
seg000:3C18                 or      byte ptr ds:loc_1EF5, 0Ch
seg000:3C1D                 call    SWITCH_HOLDSCREEN__sub_3C34
seg000:3C20                 jmp     SCROLL__loc_3793 ; SCROLLS IF NECESSARY
seg000:3C20 ; END OF FUNCTION CHUNK FOR sub_3AB5
seg000:3C23
seg000:3C23 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3C23
seg000:3C23
seg000:3C23 DS_HOUSEKEEPING2__sub_3C23 proc near    ; CODE XREF: seg000:3549p
seg000:3C23                 mov     bx, word ptr ds:loc_1EED+1
seg000:3C27                 mov     ax, word ptr ds:loc_1EF0
seg000:3C2A                 mov     [bx], ax
seg000:3C2C                 mov     ax, word ptr ds:loc_1EF2
seg000:3C2F                 mov     [bx+1000h], ax
seg000:3C33                 retn
seg000:3C33 DS_HOUSEKEEPING2__sub_3C23 endp
seg000:3C33
seg000:3C34
seg000:3C34 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3C34
seg000:3C34
seg000:3C34 SWITCH_HOLDSCREEN__sub_3C34 proc near   ; CODE XREF: j_SWITCH_HOLDSCREEN__sub_3C34j
seg000:3C34                                         ; sub_3AB5+39j
seg000:3C34                                         ; sub_3AB5+168p
seg000:3C34                 mov     al, byte ptr ds:loc_F2E+1
seg000:3C37                 and     al, 8
seg000:3C39                 mov     ah, byte ptr ds:loc_1EF5
seg000:3C3D                 and     ah, 0Eh
seg000:3C40                 mov     bx, word ptr ds:loc_1FFE ; SYSTEM PARAMETER INFORMATION
seg000:3C44                 and     bl, 0F7h        ; - reset 'Hold Screen mode' to normal (bit 3 = 0)
seg000:3C47                 or      al, ah
seg000:3C49                 jz      short loc_3C4E
seg000:3C4B                 or      bl, 8           ; 'Hold Screen mode' IN EFFECT (bit 3 = 1)
seg000:3C4E
seg000:3C4E loc_3C4E:                               ; CODE XREF: SWITCH_HOLDSCREEN__sub_3C34+15j
seg000:3C4E                 mov     word ptr ds:loc_1FFE, bx
seg000:3C52                 retn
seg000:3C52 SWITCH_HOLDSCREEN__sub_3C34 endp
seg000:3C52
seg000:3C53
seg000:3C53 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3C53
seg000:3C53
seg000:3C53 VIDEORAM__sub_3C53 proc near            ; CODE XREF: seg000:loc_24DBp
seg000:3C53                                         ; SCROLL__sub_3A40:loc_3A63j
seg000:3C53                                         ; sub_3A72:loc_3A95j
seg000:3C53                 mov     dx, word ptr ds:loc_F40+1
seg000:3C57                 call    VIDEORAM__sub_3CA8
seg000:3C5A                 mov     word ptr ds:loc_F26+1, bx
seg000:3C5E                 mov     word ptr ds:loc_ED7+1, dx
seg000:3C62                 or      byte ptr ds:loc_F42+1, ah
seg000:3C66                 retn
seg000:3C66 VIDEORAM__sub_3C53 endp
seg000:3C66
seg000:3C67
seg000:3C67 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3C67
seg000:3C67
seg000:3C67 sub_3C67        proc near               ; CODE XREF: sub_2293+16p
seg000:3C67                 and     al, 0FEh
seg000:3C69                 cmp     dl, byte ptr ds:loc_F54+4
seg000:3C6D                 jb      short locret_3C77 ;
seg000:3C6D                                         ;
seg000:3C6F                 cmp     dl, byte ptr ds:loc_F59
seg000:3C73                 ja      short locret_3C77 ;
seg000:3C73                                         ;
seg000:3C75                 or      al, 1
seg000:3C77
seg000:3C77 locret_3C77:                            ; CODE XREF: sub_3C67+6j
seg000:3C77                                         ; sub_3C67+Cj
seg000:3C77                 retn
seg000:3C77 sub_3C67        endp
seg000:3C77
seg000:3C78
seg000:3C78 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3C78
seg000:3C78
seg000:3C78 DS_HOUSEKEEPING1__sub_3C78 proc near    ; CODE XREF: seg000:353Fp
seg000:3C78                 mov     bx, word ptr ds:loc_1EE7+3
seg000:3C7C                 mov     ax, word ptr ds:loc_1EEC
seg000:3C7F                 mov     [bx], ax
seg000:3C81                 mov     al, byte ptr ds:loc_1EF4
seg000:3C84                 mov     [bx+1000h], al
seg000:3C88                 and     byte ptr ds:loc_1EF5, 0F7h
seg000:3C8D                 retn
seg000:3C8D DS_HOUSEKEEPING1__sub_3C78 endp
seg000:3C8D
seg000:3C8E
seg000:3C8E ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3C8E
seg000:3C8E
seg000:3C8E GET_VIDEORAM_OFFSET__sub_3C8E proc near ; CODE XREF: j_GET_VIDEORAM_OFFSET__sub_3C8Ej
seg000:3C8E                                         ; VIDEORAM__sub_3CA8p
seg000:3C8E                 mov     bl, dh          ; *******************************************************
seg000:3C8E                                         ; * GET VIDEO RAM *OFFSET* FOR BEGINNING OF LINE (= dh).
seg000:3C8E                                         ; * -- see also: GET_VIDOERAM_OFFSET_v2__sub_3D37
seg000:3C8E                                         ;
seg000:3C8E                                         ; * PARAMETER = DH (line number; beginning with 1)
seg000:3C8E                                         ; * => RESULT : BX  (Hi Lo)
seg000:3C8E                                         ; *
seg000:3C8E                                         ; * Note: this uses a table located @ EEEF4
seg000:3C8E                                         ; *
seg000:3C8E                                         ; * Example: DH = 01 / BX = 00 12
seg000:3C8E                                         ; *******************************************************
seg000:3C90                 dec     bl
seg000:3C92                 mov     bh, 0
seg000:3C94                 shl     bx, 1
seg000:3C96                 mov     bx, [bx+0EF4h]  ; EE000 + 0ef4 = EEEF4
seg000:3C96                                         ; - beginning of list of two byte pointers in VIDEO RAM.
seg000:3C96                                         ; - for example:
seg000:3C96                                         ; 12 00
seg000:3C96                                         ; 99 00
seg000:3C96                                         ; 20 01
seg000:3C9A                 test    bx, 8000h
seg000:3C9E                 jz      short loc_3CA1
seg000:3CA0                 stc
seg000:3CA1
seg000:3CA1 loc_3CA1:                               ; CODE XREF: GET_VIDEORAM_OFFSET__sub_3C8E+10j
seg000:3CA1                 pushf
seg000:3CA2                 and     bx, 7FFFh
seg000:3CA6                 popf
seg000:3CA7                 retn
seg000:3CA7 GET_VIDEORAM_OFFSET__sub_3C8E endp
seg000:3CA7
seg000:3CA8
seg000:3CA8 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3CA8
seg000:3CA8
seg000:3CA8 VIDEORAM__sub_3CA8 proc near            ; CODE XREF: ROM_EnableCursor__3950+9p
seg000:3CA8                                         ; VIDEORAM__sub_3C53+4p
seg000:3CA8                                         ; seg000:loc_3CF1p
seg000:3CA8                 call    GET_VIDEORAM_OFFSET__sub_3C8E
seg000:3CAB                 mov     ah, 0
seg000:3CAD                 mov     al, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:3CB0                 jnb     short loc_3CB7
seg000:3CB2                 shr     al, 1
seg000:3CB4                 or      ah, 8
seg000:3CB7
seg000:3CB7 loc_3CB7:                               ; CODE XREF: VIDEORAM__sub_3CA8+8j
seg000:3CB7                 cmp     dl, al
seg000:3CB9                 jb      short loc_3CBE
seg000:3CBB                 or      ah, 2
seg000:3CBE
seg000:3CBE loc_3CBE:                               ; CODE XREF: VIDEORAM__sub_3CA8+11j
seg000:3CBE                 dec     dl
seg000:3CC0                 mov     dh, 0
seg000:3CC2                 add     dx, bx
seg000:3CC4                 retn
seg000:3CC4 VIDEORAM__sub_3CA8 endp
seg000:3CC4
seg000:3CC5 ; ---------------------------------------------------------------------------
seg000:3CC5                 mov     dx, word ptr ds:loc_F40+1
seg000:3CC9                 call    GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37
seg000:3CCC                 jnb     short loc_3CF1  ;
seg000:3CCC                                         ;
seg000:3CCE                 cmp     dl, 0
seg000:3CD1                 jnz     short loc_3CD5
seg000:3CD3                 inc     dl
seg000:3CD5
seg000:3CD5 loc_3CD5:                               ; CODE XREF: seg000:3CD1j
seg000:3CD5                 cmp     dl, byte ptr ds:loc_F54+3
seg000:3CD9                 jb      short loc_3CDF  ;
seg000:3CD9                                         ;
seg000:3CDB                 mov     dl, byte ptr ds:loc_F54+3
seg000:3CDF
seg000:3CDF loc_3CDF:                               ; CODE XREF: seg000:3CD9j
seg000:3CDF                 cmp     dh, 0
seg000:3CE2                 jnz     short loc_3CE6  ;
seg000:3CE2                                         ;
seg000:3CE4                 inc     dh
seg000:3CE6
seg000:3CE6 loc_3CE6:                               ; CODE XREF: seg000:3CE2j
seg000:3CE6                 cmp     dh, 17h
seg000:3CE9                 jbe     short loc_3CED  ;
seg000:3CE9                                         ;
seg000:3CEB                 mov     dh, 17h
seg000:3CED
seg000:3CED loc_3CED:                               ; CODE XREF: seg000:3CE9j
seg000:3CED                 mov     word ptr ds:loc_F40+1, dx
seg000:3CF1
seg000:3CF1 loc_3CF1:                               ; CODE XREF: seg000:3CCCj
seg000:3CF1                 call    VIDEORAM__sub_3CA8
seg000:3CF4                 mov     word ptr ds:loc_F26+1, bx
seg000:3CF8                 mov     word ptr ds:loc_ED7+1, dx
seg000:3CFC                 or      byte ptr ds:loc_F42+1, ah
seg000:3D00                 retn
seg000:3D01
seg000:3D01 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3D01
seg000:3D01
seg000:3D01 sub_3D01        proc near               ; CODE XREF: sub_39j
seg000:3D01                 test    byte ptr es:loc_8B, 1
seg000:3D07                 jz      short locret_3D36 ;
seg000:3D07                                         ;
seg000:3D09                 push    ax
seg000:3D0A                 test    byte ptr ds:loc_F42+1, 4
seg000:3D0F                 jz      short loc_3D35  ;
seg000:3D0F                                         ;
seg000:3D11                 mov     al, byte ptr ds:loc_F42
seg000:3D14                 cmp     al, byte ptr ds:loc_F29+1
seg000:3D18                 jnz     short loc_3D35  ;
seg000:3D18                                         ;
seg000:3D1A                 mov     al, byte ptr ds:loc_F54+3
seg000:3D1D                 sub     al, 7
seg000:3D1F                 cmp     byte ptr ds:loc_F29, al
seg000:3D23                 jnb     short loc_3D35  ;
seg000:3D23                                         ;
seg000:3D25                 cmp     byte ptr ds:loc_F40+1, al
seg000:3D29                 jb      short loc_3D35  ;
seg000:3D29                                         ;
seg000:3D2B                 mov     al, 0A7h ; 'º'  ; $a7 = Sound Bell (keyboard command)
seg000:3D2B                                         ;
seg000:3D2D                 call    near ptr 8021h  ; SEND KEYBOARD_COMMAND_AL  /* AL <- KBD_COMMAND ($a7 is BELL for example)  -  AH <- ??
seg000:3D2D                                         ;
seg000:3D2D                                         ; SEE TABLE 8-4 "Peripheral Commands in Hexadecimal" of Technical Manual (8-25)
seg000:3D30                 and     byte ptr ds:loc_F42+1, 0FBh
seg000:3D35
seg000:3D35 loc_3D35:                               ; CODE XREF: sub_3D01+Ej
seg000:3D35                                         ; sub_3D01+17j
seg000:3D35                                         ; sub_3D01+22j
seg000:3D35                                         ; sub_3D01+28j
seg000:3D35                 pop     ax
seg000:3D36
seg000:3D36 locret_3D36:                            ; CODE XREF: sub_3D01+6j
seg000:3D36                 retn
seg000:3D36 sub_3D01        endp
seg000:3D36
seg000:3D37
seg000:3D37 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3D37
seg000:3D37
seg000:3D37 GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37 proc near ; CODE XREF: seg000:3CC9p
seg000:3D37                 push    bx              ; **************************************************
seg000:3D37                                         ;   Similar to GET_VIDEORAM_OFFSET__sub_3C8E
seg000:3D37                                         ;
seg000:3D37                                         ;   - DX and BX are saved
seg000:3D37                                         ;   - checks for valid line number (must be <= 24)
seg000:3D37                                         ;   - 80 column mode changes result in BL ( / 2 )
seg000:3D37                                         ;   - DL and BL are compared
seg000:3D37                                         ;
seg000:3D37                                         ;   dh = line number (1...24)
seg000:3D37                                         ; **************************************************
seg000:3D38                 push    dx
seg000:3D39                 dec     dh
seg000:3D3B                 cmp     dh, 18h
seg000:3D3E                 jnb     short loc_3D5E  ;
seg000:3D3E                                         ;
seg000:3D40                 mov     bl, dh
seg000:3D42                 mov     bh, 0
seg000:3D44                 shl     bx, 1
seg000:3D46                 mov     bx, [bx+0EF4h]
seg000:3D4A                 mov     bl, byte ptr ds:loc_F26 ; EE00:0F26 contains value $84 or $50 (for 132 or 80 column mode)
seg000:3D4E                 test    bh, 80h
seg000:3D51                 jz      short loc_3D55  ;
seg000:3D51                                         ;
seg000:3D53                 shr     bl, 1
seg000:3D55
seg000:3D55 loc_3D55:                               ; CODE XREF: GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37+1Aj
seg000:3D55                 dec     dl
seg000:3D57                 cmp     dl, bl
seg000:3D59                 ja      short loc_3D5E  ;
seg000:3D59                                         ;
seg000:3D5B                 clc
seg000:3D5C                 jmp     short loc_3D5F
seg000:3D5E ; ---------------------------------------------------------------------------
seg000:3D5E
seg000:3D5E loc_3D5E:                               ; CODE XREF: GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37+7j
seg000:3D5E                                         ; GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37+22j
seg000:3D5E                 stc
seg000:3D5F
seg000:3D5F loc_3D5F:                               ; CODE XREF: GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37+25j
seg000:3D5F                 pop     dx
seg000:3D60                 pop     bx
seg000:3D61                 retn
seg000:3D61 GET_n_COMPARE_VIDOERAM_OFFS__sub_3D37 endp
seg000:3D61
seg000:3D62
seg000:3D62 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3D62
seg000:3D62
seg000:3D62 NVM_READ_n_CHECK__sub_3D62 proc near    ; CODE XREF: j_NVM_READ_n_CHECK__sub_3D62j
seg000:3D62                                         ; j_NVM_READ_n_CHECK__sub_3D62_0j
seg000:3D62                 push    dx
seg000:3D63                 or      byte ptr ds:loc_1EF9, 40h
seg000:3D68                 call    NVM_WRITEPROTECT_READABLE__sub_3DF3
seg000:3D6B                 pushf
seg000:3D6C                 jnb     short loc_3D71  ; ; jump if NVM check OK
seg000:3D6C                                         ;
seg000:3D6E                 call    NVM_DEFAULTS__sub_3D74
seg000:3D71
seg000:3D71 loc_3D71:                               ; CODE XREF: NVM_READ_n_CHECK__sub_3D62+Aj
seg000:3D71                 popf
seg000:3D72                 pop     dx
seg000:3D73                 retn
seg000:3D73 NVM_READ_n_CHECK__sub_3D62 endp
seg000:3D73
seg000:3D74
seg000:3D74 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3D74
seg000:3D74
seg000:3D74 NVM_DEFAULTS__sub_3D74 proc near        ; CODE XREF: j_NVM_DEFAULTS__sub_3D74j
seg000:3D74                                         ; NVM_READ_n_CHECK__sub_3D62+Cp
seg000:3D74                 push    di
seg000:3D75                 call    PREPARE_NVM__loc_3DCF
seg000:3D78                 xor     si, si
seg000:3D7A                 mov     di, 84h ; 'ä'
seg000:3D7D                 mov     dl, 1Ch
seg000:3D7F
seg000:3D7F loc_3D7F:                               ; CODE XREF: NVM_DEFAULTS__sub_3D74+2Ej
seg000:3D7F                 mov     dh, 8
seg000:3D81                 mov     al, cs:[si+3DBDh] ; NVM DEFAULTS at ROM offset $3dbd below (when SI = 0).
seg000:3D86                 inc     si
seg000:3D87
seg000:3D87 loc_3D87:                               ; CODE XREF: NVM_DEFAULTS__sub_3D74+2Cj
seg000:3D87                 rcr     al, 1
seg000:3D89                 jb      short loc_3D93  ;
seg000:3D89                                         ;
seg000:3D8B                 and     byte ptr es:[di+0], 0FEh ; CLEAR bit in NVM
seg000:3D91                 jmp     short loc_3D99
seg000:3D93 ; ---------------------------------------------------------------------------
seg000:3D93
seg000:3D93 loc_3D93:                               ; CODE XREF: NVM_DEFAULTS__sub_3D74+15j
seg000:3D93                 or      byte ptr es:[di+0], 1 ; SET bit in NVM
seg000:3D99
seg000:3D99 loc_3D99:                               ; CODE XREF: NVM_DEFAULTS__sub_3D74+1Dj
seg000:3D99                 inc     di
seg000:3D9A                 dec     dl
seg000:3D9C                 jz      short loc_3DA4  ;
seg000:3D9C                                         ;
seg000:3D9E                 dec     dh
seg000:3DA0                 jnz     short loc_3D87  ;
seg000:3DA0                                         ;
seg000:3DA2                 jmp     short loc_3D7F
seg000:3DA4 ; ---------------------------------------------------------------------------
seg000:3DA4
seg000:3DA4 loc_3DA4:                               ; CODE XREF: NVM_DEFAULTS__sub_3D74+28j
seg000:3DA4                 push    ds
seg000:3DA5                 mov     ax, cs
seg000:3DA7                 mov     ds, ax
seg000:3DA9                 mov     si, 3DC1h
seg000:3DAC                 mov     cx, 0Eh
seg000:3DAF                 cld
seg000:3DB0                 rep movsb
seg000:3DB2                 pop     ds
seg000:3DB3                 mov     cx, 2Ch ; ','
seg000:3DB6                 sub     al, al
seg000:3DB8                 cld
seg000:3DB9                 rep stosb
seg000:3DBB                 pop     di
seg000:3DBC                 retn
seg000:3DBC NVM_DEFAULTS__sub_3D74 endp ; sp = -2
seg000:3DBC
seg000:3DBC ; ---------------------------------------------------------------------------
seg000:3DBD                 db 3Bh                  ; 0 ; NVM DEFAULTS
seg000:3DBD                                         ;
seg000:3DBD                                         ; - used by code location $3d81
seg000:3DBE                 db 0D1h
seg000:3DBF                 db  95h ; ò
seg000:3DC0                 db    0
seg000:3DC1                 db    4
seg000:3DC2                 db  0Eh
seg000:3DC3                 db  0Eh
seg000:3DC4                 db    0
seg000:3DC5                 db    0
seg000:3DC6                 db    7
seg000:3DC7                 db    6
seg000:3DC8                 db    1
seg000:3DC9                 db    1
seg000:3DCA                 db    1
seg000:3DCB                 db    0
seg000:3DCC                 db    0
seg000:3DCD                 db    0
seg000:3DCE                 db    0
seg000:3DCF ; ---------------------------------------------------------------------------
seg000:3DCF
seg000:3DCF PREPARE_NVM__loc_3DCF:                  ; CODE XREF: j_PREPARE_NVM__loc_3DCFj
seg000:3DCF                                         ; NVM_DEFAULTS__sub_3D74+1p
seg000:3DCF                 xor     di, di
seg000:3DD1                 mov     cx, 84h ; 'ä'   ; Writes a series of $01 values from [ $ed008 to $ed088 ].
seg000:3DD1                                         ; - $ed008, $ed010 etc.
seg000:3DD4                 xor     ax, ax
seg000:3DD6                 cld
seg000:3DD7
seg000:3DD7 loc_3DD7:                               ; CODE XREF: seg000:3DDEj
seg000:3DD7                 and     byte ptr es:[di+0], 0FEh
seg000:3DDD                 inc     di
seg000:3DDE                 loop    loc_3DD7
seg000:3DE0                 inc     al
seg000:3DE2                 mov     di, 8
seg000:3DE5                 mov     cx, 10h
seg000:3DE8
seg000:3DE8 loc_3DE8:                               ; CODE XREF: seg000:3DF0j
seg000:3DE8                 or      es:[di+0], al
seg000:3DED                 add     di, 8           ; increment by 8.
seg000:3DF0                 loop    loc_3DE8
seg000:3DF2                 retn
seg000:3DF3
seg000:3DF3 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3DF3
seg000:3DF3
seg000:3DF3                 public NVM_WRITEPROTECT_READABLE__sub_3DF3
seg000:3DF3 NVM_WRITEPROTECT_READABLE__sub_3DF3 proc near
seg000:3DF3                                         ; CODE XREF: j_NVM_WRITEPROTECT_READABLE__sub_3DF3j
seg000:3DF3                                         ; NVM_READ_n_CHECK__sub_3D62+6p
seg000:3DF3                 in      al, 0Ah         ;
seg000:3DF3                                         ; SUBROUTINE: write protect NVM (?)
seg000:3DF3                                         ;
seg000:3DF3                                         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:3DF3                                         ;      See TABLE 4-29 and 4-15
seg000:3DF3                                         ;
seg000:3DF5                 and     al, 1           ; maintain ZRESET L (represents the state of bit 0 of the 8088 diagnostic write register)
seg000:3DF7                 or      al, 82h         ; DISPLAY ON / RECALL NVM (read / recall data from the NVM)
seg000:3DF7                                         ;
seg000:3DF9                 test    byte ptr ds:loc_1EF9, 40h
seg000:3DFE                 jz      short loc_3E02  ;
seg000:3DFE                                         ;
seg000:3E00                 and     al, 0FDh        ; DISPLAY OFF (mask bit 1)
seg000:3E02
seg000:3E02 loc_3E02:                               ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+Bj
seg000:3E02                 and     al, 3Fh         ; MASK 0011 1111 (NVM bits) - RESET  PROGRAMM NVM + RECALL NVM (NVM write protected)
seg000:3E02                                         ;
seg000:3E04                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:3E04                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:3E04                                         ;
seg000:3E06                 or      al, 80h         ; READ / RECALL NVM = 1 (NVM readable)
seg000:3E06                                         ;
seg000:3E08                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:3E08                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:3E0A                 mov     byte ptr ds:loc_1EE5+1, al
seg000:3E0D                 jmp     CRC_CHECK_NVRAM__loc_3E4B ; (also executes a CRC check)
seg000:3E10 ; ---------------------------------------------------------------------------
seg000:3E10
seg000:3E10 NVM_WRITABLE__loc_3E10:                 ; CODE XREF: j_NVM_WRITABLE__loc_3E10j
seg000:3E10                 sub     al, al          ;
seg000:3E10                                         ; SUBROUTINE: make NVM writable / write to NVM (?)
seg000:3E10                                         ;
seg000:3E12                 xchg    al, byte ptr es:loc_AA
seg000:3E17                 push    ax
seg000:3E18                 push    dx
seg000:3E19                 call    CRC_SUM_NVRAM__loc_3E38
seg000:3E1C                 pop     dx
seg000:3E1D                 in      al, 0Ah         ; [0A] DIAGNOSTIC READ REGISTER: PAGE 153  ( *** READ **** )
seg000:3E1D                                         ;      See TABLE 4-29 and 4-15
seg000:3E1D                                         ;
seg000:3E1F                 and     al, 1           ; maintain ZRESET L (represents the state of bit 0 of the 8088 diagnostic write register)
seg000:3E21                 or      al, 82h         ; 10000010 SET  W13=1 / RECALL NVM=1
seg000:3E23                 or      al, 0C0h        ; SET BOTH NVM BITS - - NVM writable (!)
seg000:3E23                                         ;
seg000:3E25                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:3E25                                         ;      SHOWN IN 4-28 and in 4-10 to 4-14
seg000:3E25                                         ;
seg000:3E27                 and     al, 0BFh        ; 10111111 NVM not writable (0)
seg000:3E27                                         ;
seg000:3E29                 out     0Ah, al         ; [0A] DIAGNOSTIC WRITE REGISTER: PAGE 149- ( *** WRITE ONLY *** )
seg000:3E29                                         ;
seg000:3E2B                 mov     ch, 14h
seg000:3E2D
seg000:3E2D loc_3E2D:                               ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3:loc_3E2Dj
seg000:3E2D                 loop    loc_3E2D        ; Wait a bit (hardware requirement)
seg000:3E2F                 mov     byte ptr ds:loc_1EE5+1, al
seg000:3E32                 pop     ax
seg000:3E33                 mov     byte ptr es:loc_AA, al
seg000:3E37                 retn
seg000:3E38 ; ---------------------------------------------------------------------------
seg000:3E38
seg000:3E38 CRC_SUM_NVRAM__loc_3E38:                ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+26p
seg000:3E38                 mov     dx, 100h
seg000:3E3B                 push    ds
seg000:3E3C                 push    es
seg000:3E3D                 pop     ds
seg000:3E3E                 sub     bx, bx
seg000:3E40                 mov     bp, 0FCh ; 'n'
seg000:3E43                 call    j_CRC_CHECK1__loc_2A3 ; CRC check(s)
seg000:3E46                 call    sub_3E64
seg000:3E49                 pop     ds
seg000:3E4A                 retn
seg000:3E4B ; ---------------------------------------------------------------------------
seg000:3E4B
seg000:3E4B CRC_CHECK_NVRAM__loc_3E4B:              ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+1Aj
seg000:3E4B                 mov     dx, 100h
seg000:3E4E                 push    ds
seg000:3E4F                 push    es
seg000:3E50                 pop     ds
seg000:3E51                 sub     bx, bx
seg000:3E53                 mov     bp, 0FCh ; 'n'
seg000:3E56                 call    j_CRC_CHECK1__loc_2A3 ; CRC check(s)
seg000:3E59                 call    sub_3E72
seg000:3E5C                 cmp     dx, bp
seg000:3E5E                 clc
seg000:3E5F                 jz      short loc_3E62
seg000:3E61                 cmc
seg000:3E62
seg000:3E62 loc_3E62:                               ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+6Cj
seg000:3E62                 pop     ds
seg000:3E63                 retn
seg000:3E63 NVM_WRITEPROTECT_READABLE__sub_3DF3 endp
seg000:3E63
seg000:3E64
seg000:3E64 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3E64
seg000:3E64
seg000:3E64 sub_3E64        proc near               ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+53p
seg000:3E64                 mov     ch, 4
seg000:3E66
seg000:3E66 loc_3E66:                               ; CODE XREF: sub_3E64+Bj
seg000:3E66                 mov     cl, 4
seg000:3E68                 mov     [bx+di], dl
seg000:3E6A                 sar     dx, cl
seg000:3E6C                 inc     bx
seg000:3E6D                 dec     ch
seg000:3E6F                 jnz     short loc_3E66
seg000:3E71                 retn
seg000:3E71 sub_3E64        endp
seg000:3E71
seg000:3E72
seg000:3E72 ; ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦ S U B R O U T I N E ¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
seg000:3E72
seg000:3E72
seg000:3E72 sub_3E72        proc near               ; CODE XREF: NVM_WRITEPROTECT_READABLE__sub_3DF3+66p
seg000:3E72                 mov     ch, 4
seg000:3E74                 sub     bp, bp
seg000:3E76
seg000:3E76 loc_3E76:                               ; CODE XREF: sub_3E72+13j
seg000:3E76                 sub     ax, ax
seg000:3E78                 mov     al, [bx+di]
seg000:3E7A                 and     al, 0Fh
seg000:3E7C                 or      bp, ax
seg000:3E7E                 mov     cl, 4
seg000:3E80                 ror     bp, cl
seg000:3E82                 inc     bx
seg000:3E83                 dec     ch
seg000:3E85                 jnz     short loc_3E76
seg000:3E87                 retn
seg000:3E87 sub_3E72        endp
seg000:3E87
seg000:3E87 ; ---------------------------------------------------------------------------
seg000:3E88                 db 0FFh                 ; UNUSED SPACE (0xFF)
seg000:3E89                 db 16Eh dup(0FFh)
seg000:3FF7                 db 0FFh                 ;
seg000:3FF7                                         ;
seg000:3FF8 a05_01          db '05.01',0
seg000:3FFE                 dw 0A047h               ; CHECKSUM
seg000:3FFE seg000          ends
seg000:3FFE
seg000:3FFE
seg000:3FFE                 end
