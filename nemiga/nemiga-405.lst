; Дизассемблированное ПЗУ компьютера НЕМИГА ПК 588 версия 4.05
;

000204: DW				; REV    Рабочий регистр
000206: DW				; VFORM
000210: DW				; BRIGHT
000212: DW				; XNEW
000214: DW				; YNEW
000216: DW				; XOLD
000220: DW				; YOLD

; ==== Начало ПЗУ ====
160000: DW	177570			; ??
160002: DW	160210, 000341		; Вектор прерывания сигнала/команды HALT
160006: DW	161700, 000340		; Вектор прерывания начального пуска
160012: DW	161142, 000340		; Вектор прерывания??
160016: JMP     @#163422		; MODE3
160022: JMP    	@#163442		; SYSLIN -- Вывод в служебную строку
160026: JMP    	@#163554		; TT.OUT
160032: JMP    	@#163560		; SYSOUT
160036: JMP    	@#162242		; PRINT
160042: JMP    	@#165200		; DRAW   -- Нарисовать линию, сохранив XOLD,YOLD
160046: JMP    	@#165172		; QDRAW     то же для QUASIC
160052: JMP    	@#165174		; FDRAW     то же для FORTRAN
160056: JMP    	@#165230		; LINE   -- Нарисовать линию
160062: JMP    	@#165222		; QLINE     то же для QUASIC
160066: JMP    	@#165224		; FLINE     то же для FORTRAN
160072: JMP    	@#165440		; POINT  -- Нарисовать точку
160076: JMP    	@#165432		; QPOINT    то же для QUASIC
160102: JMP    	@#165434		; FPOINT    то же для FORTRAN
160106: JMP    	@#165524		; RPOINT -- Читать яркость точки
160112: JMP    	@#165514		; QRPOIN    то же для QUASIC
160116: JMP    	@#165516		; FRPOIN    то же для FORTRAN
160122: JMP    	@#162204		; DUMP -- напечатать восьмеричное число R3
160126: JMP    	@177754			; SOUND

; ==== Обработчики прерываний ========================================================

; Обработка канального сигнала СБРОС
160142: MOV	#000357, @#000206	; 239. -> VFORM
160150: CLR	@#177560		; Сброс состояния клавиатуры
160154: MOV	#000200, @#177564	; Устанавливаем состояние терминала
160162: CLR	@#177770
160166: BIC	#177541, @#177766	; Оставляем только флаги #136
160174: MOV	(SP)+, R0
160176: JMP	@#161074		; Завершаем обработку прерывания HALT
;
; Обработка нажатия СТОП?? кнопки ОСТ??
160202: MOV	(SP)+, R0		; Восстанавливаем R0
160204: JMP	@#161142		; Переходим к сохранению регистров и пульту
;
; Обработчик прерывания по сигналу/команде HALT
160210: CMP	#056363, @#177776	; Проверка, настроена ли память режима HALT
160216: BEQ	160224			; Да, настроена
160220: JMP	@#161700		; Нет => выход на процедуру холодного старта
160224: MOV	R0, -(SP)		; Сохраняем R0 чтобы не испортить
160226: BIS	#000200, @#177564	; Устанавливаем состояние терминала
160234: BIT	#176000, @#170006	; Проверка регистра фиксации HALT
160242: BMI	160142			; Канальный сигнал СБРОС? => переходим
160244: BEQ	160202			; 6 ст битов пусты - кнопка ОСТ?? => переходим
160246: BIT	#004000, @#170006	; Сигнал Н4? -- адаптер локальной сети
160254: BEQ	160262			; Нет
160256: CALL   	@000104			; ??
160262: BIT	#040000, @#170006	; Сигнал Н1? -- обращение к 177566
160270: BEQ	160302			; Нет
160272: MOV	@#177566, R0		; Регистр данных терминала
160276: CALL	@#163560		; SYSOUT Вывод символа R0 на экран
160302: BIT	#020000, @#170006	; Сигнал Н2? -- обращение к 177562
160310: BEQ	160334			; Нет
160312: MOVB   	@#177767, R0		; Провека буферной ячейки??
160316: BEQ    	160326			; Буфер пуст
160320: CLRB   	@#177767		; Очищаем буфер
160324: BR	160526
160326: BIC    	#177677, @#177560	; Чистим ~0100 в регистре статуса клавиатуры
160334: MOV	@#170006, R0
160340: BIT	#002000, R0		; Пришёл байт с клавиатуры?
160344: BEQ	160606			; Нет
160346: BIC	#177400, R0		; Оставляем байт поступивший с клавиатуры
160352: BEQ	160202			; Символ 00 -- СТОП?
160354: TSTB   	@#177560
160360: BMI    	160606
; Звук нажатия клавиши
160362: MOV	R1, -(SP)
160364: MOV	R2, -(SP)
160366: TSTB	@#177761		; Флаг блокировки вызова SOUND
160372: BNE	160410			; <> 0 => не вызывать повторно
160374: CALL	@#160126		; SOUND
160400: BR	160410			;
160402: DW	160404			; Адрес мелодии
160404: DB	011, 214, 001, 000	; Мелодия -- звук длиной 1/50 сек
160410: MOV    	#177766, R1
160414: MOV    	#000100, R2
160420: TSTB   	(R1)
160422: BPL    	160522
160424: BITB   	#000300, R0
160430: BEQ    	160500
160432: BPL    	160462
160434: BIT    	R2, R0
160436: BEQ    	160522
160440: BIC    	#177600, R0
160444: BITB   	R2, (R1)+
160446: BNE    	160522
160450: MOVB   	R0, (R1)
160452: MOV    	#000016, R0
160456: BISB   	R2, -(R1)
160460: BR     	160522
160462: BITB   	R2, (R1)+
160464: BEQ    	160522
160466: MOVB   	R0, (R1)
160470: MOV    	#000017, R0
160474: BICB   	R2, -(R1)
160476: BR     	160522
160500: CMPB   	R0, #000040
160504: BHIS   	160522
160506: MOVB   	161102(R0), @#177767
160514: BEQ    	160522
160516: MOV    	#000033, R0
;
160522: MOV	(SP)+, R2
160524: MOV	(SP)+, R1
160526: MOV	R0, @#177562		; Данные клавиатуры
160532: MOV	(SP)+, R0
160534: BIS	#000200, @#177560	; Ставим бит "готовность к приёму"
160542: BIT	#000100, @#177560	; Состояние клавиатуры -- разрешено прерывание?
160550: BEQ	161074			; ?? => Завершаем обработку прерывания HALT
160552: BISB   	#000001, @#177766
160560: TSTB   	000002(SP)
160564: BMI    	161074
160566: BICB   	#000001, @#177766
160574: MOV    	@#000062, -(SP)
160600: MOV    	@#000060, -(SP)
160604: BR     	161074
;
160606: MOV	(SP)+, R0		; Восстанавливаем R0
160610: BIT	#010000, @#170006	; Сигнал Н3?
160616: BEQ	161074			; Нет => Завершаем обработку прерывания HALT
160620: MOV	R4, -(SP)		; Сохраняем R4
160622: TST	@#177760		; Флаг блокировки
160626: BPL	160750			; 1 - не блокировано => переходим
160630: MOV	@#177752, R4
160634: INCB	@#177760		; Увеличиваем счётчик??
160640: CMPB	@#177760, 177777(R4)	; Сравниваем с длительностью ноты
160646: BLO	160750
160650: TSTB	(R4)
160652: BMI	160744
160654: BITB	#000037, (R4)
160660: BNE	160740
160662: BIC	#100000, @#177760
; Обработка флагов завершения мелодии
160670: BITB	#000040, (R4)
160674: BNE	160712
160676: TSTB	(R4)
160700: BEQ	160750
160702: CALL   	@#160126		; SOUND
160706: BR     	160750
160710: DW      000000
; Окончание мелодии
160712: BITB   	#000100, (R4)+
160716: BNE    	160734
160720: MOV    	(SP)+, R4
; Переход на прерывание по вектору 110
160722: MOV    	@#000112, -(SP)
160726: MOV    	@#000110, -(SP)
160732: BR     	161074
; Очистка байта после мелодии
160734: CLRB   	(R4)
160736: BR     	160750
;
160740: MOVB   	(R4)+, @#170030		; Октава и громкость
160744: CALL   	@#162466		; Обработка продолжения мелодии
; Мигание курсора
160750: DECB	@#177756		; Уменьшаем счётчик??
160754: BPL	161034			; значение >= 0 ? => переходим
160756: MOVB	#000007, @#177756	; Новое значение счётчика
160764: COMB	@#177757
160770: MOV	@#177772, R4		; Смещение курсора
160774: BMI	161034
160776: TSTB	@#177771
161002: BMI	161034
161004: ADD	#003100, R4
161010: BMI	161034
161012: ROL	R4
161014: BMI	161034
161016: BIS	#000001, @#177574	; Включаем экран в основную память
161024: COM	(R4)			; Инвертирование восьми пикселей -- курсор
161026: BIC	#000001, @#177574	; Отключаем экран из основной памяти
161034: MOV	(SP)+, R4		; Восстанавливаем R4
161036: TSTB	000002(SP)
161042: BMI	161074			; ?? => Завершаем обработку прерывания HALT
161044: BITB   	#000001, @#177766
161052: BNE    	160566
161054: BIT    	#000100, @#177564	; Устанавливаем состояние терминала
161062: BEQ    	161074
161064: MOV    	@#000066, -(SP)
161070: MOV    	@#000064, -(SP)
; Завершение обработки прерывания HALT
161074: CLRB	@#170006		; Разрешение прерываний
161100: RTI	
; Таблица байт
161102: DB

; Обработка прерывания?? Сохранение регистров и переход к пульту
161142: MOV	(SP)+, @#177736		; Сохраняем PC
161146: MOV	(SP)+, @#177740		; Сохраняем PSW
161152: MOV	SP, @#177734		; Сохраняем SP
161156: MOV	#177734, SP		; Сохраняем остальные регистры
161162: MOV	R5, -(SP)		; -> 177732
161164: MOV	R4, -(SP)		; -> 177730
161166: MOV	R3, -(SP)		; -> 177726
161170: MOV	R2, -(SP)		; -> 177724
161172: MOV	R1, -(SP)		; -> 177722
161174: MOV	R0, -(SP)		; -> 177720 -- начало блока регистров
161176: MOV	@#000004, -(SP)
161202: MOV	@#000006, -(SP)
161206: MOV	@#177766, -(SP)
161212: CLR	@#177766
161216: MOV	#000340, @#000006	; PSW для прерывания
161224: MOV	#161422, @#000004	; Адрес прерывания??
161232: MOV	#000060, @#170010
161240: BR	161422			; Переход к пультовому терминалу
;
; ==== Программа пультового терминала ================================================
;
; Просмотр ячеек памяти -- переход к следующему слову
161242: INC    	R2
161244: INC    	R2
; Команда '/' - просмотр ячеек памяти
161246: MOV	#162673, R5		; Строка
161252: CALL	@#162242		; PRINT
161256: MOV	R2, R3			; Печатаем адрес
161260: CALL	@#162204		; DUMP Вывод R3 как 8-ричного числа
161264: MOV	(R2), R3		; Печатаем значение
161266: CALL	@#162204		; DUMP Вывод R3 как 8-ричного числа
161272: CALL	@#162256		; Получаем команду с клавиатуры
161276: TST	R1
161300: BEQ	161304
161302: MOV    	R5, (R2)		; Заносим новое значение
161304: CMPB	#000012, R0		; Нажали ПС?
161310: BEQ	161242			; Да, переходим к следующему слову памяти
161312: CMPB	#000015, R0		; Нажали ВВОД?
161316: BEQ	161422			; Да, возвращамся в пульт
161320: CMPB   	#000136, R0		; Нажали '^' ?
161324: BNE    	161524			; Нет -- выводим признак ошибки и в пульт
161326: DEC    	R2			; Переходим к предыдущему слову памяти
161330: DEC    	R2
161332: BR     	161246
;
; Команда 'G' - продолжение выполнения программы
161334: MOV	(SP)+, @#177766
161340: TST	R1
161342: BEQ	161356
161344: CLR    	@#177740
161350: MOV    	R5, @#177736
161354: RESET  	
; Восстановление всех регистров, возврат из прерывания
161356: MOV	(SP)+, @#000006
161362: MOV	(SP)+, @#000004
161366: MOV	(SP)+, R0
161370: MOV	(SP)+, R1
161372: MOV	(SP)+, R2
161374: MOV	(SP)+, R3
161376: MOV	(SP)+, R4
161400: MOV	(SP)+, R5
161402: MOV	(SP), SP
161404: MOV	@#177740, -(SP)		; PSW
161410: MOV	@#177736, -(SP)		; PC
161414: RTI	
;
; Вывод символа и переход к пульту
161416: CALL   	@#163554		; TT.OUT Вывод символа
; Вывод приглашения пульта и ожидание команды
161422: MOV	#162661, R5		; Строка "Пульт>"
161426: MOV	#177712, SP
161432: MOV	#000340, @#000006	; PSW для прерывания
161440: MOV	#161524, @#000004	; Адрес прерывания??
161446: CALL	@#162242		; PRINT Вывод строки, адрес в R5
161452: CALL	@#162256		; Получаем команду с клавиатуры
161456: MOV	R5, R2
161460: CMPB	#000057, R0		; Символ '/' - просмотр ячеек памяти
161464: BEQ	161246
161466: CMPB	#000123, R0		; Символ 'S' - вывод регистров ЦП
161472: BEQ	161532
161474: CMPB	#000107, R0		; Символ 'G' - выполнение программы
161500: BEQ	161334
161502: CMPB	#000104, R0		; Символ 'D' - загрузка с диска MD
161506: BEQ	161654
161510: CMPB   	#000116, R0		; Символ 'N' - загрузка с сети?
161514: BEQ    	161700			; Переход на программу холодного старта
161516: CMPB   	#000014, R0		; Нажат УПР + L - очистка экрана
161522: BEQ    	161416			; Вывод символа 014 и возврат к пульту
; Вывод знака вопроса (ошибка выполнения команды) и возврат в пультовый режим
161524: MOV    	#162660, R5
161530: BR     	161426
;
; Команда 'S' -- вывод на экран регистров процессора
161532: MOV    	#000011, R2		; 9 регистров
161536: MOV    	#161564, R5		; Строка с названиями регистров
161542: CALL   	@#162242		; PRINT
161546: MOV    	#177720, R4
161552: MOV    	(R4)+, R3
161554: CALL   	@#162204		; DUMP Вывод R3 как 8-ричного числа
161560: SOB    	R2, 161552
161562: BR     	161422			; Возврат в пульт
161564: DB	...			; Строка с названиями регистров ЦП

; Команда 'D' -- загрузка с диска
161654: CMP	R5, #000007		; Номер устройства больше 7?
161660: BHI	161524			; Да => показать признак ошибки, возврат в пульт
161662: CALL	@#162704		; Загрузка данных с дисковода
161666: BLO	161524			; Ошибка? => возврат в пульт
161670: MOV	#000200, @#177766
161676: CLR	PC			; Запуск полученного блока
;
; ==== Программа холодного старта ====================================================
;
; Холодный старт при включении питания
161700: MOV	#001000, SP		; Устанавливаем стек
161704: CLR	R0
161706: MOV	#056363, -(R0)		; Сохраняем признак режима HALT -> (177776)
161712: MOV	#163674, -(R0)		; Адрес подпрограммы вывода символа -> (177774)
161716: CLR	@#177574		; Отключаем маппинг экрана на память
161722: MOV	#000007, R1
161726: CLR	-(R0)			; <|
161730: SOB	R1, 161726		;  / Очищаем 7 слов 177756-177773
161732: MOV	#162464, -(R0)		; Подставляем в SOUND пустую подпрограмму
161736: MOV	#161754, @#000004
161744: CLR	@#170024		; Сброс второго счётчика??
161750: MOV	#162374, (R0)		; Адрес полноценной программы SOUND
161754: MOV	#164670, -(R0)		; Адрес мелодии BELL -> (177752)
161760: MOV	(R0), -(R0)
161762: RESET				; Сбрасываемся и переходим в режим USER??
161764: MOV	#000021, R0		; Символ очистки экрана??
161770: CALL	@#163554		; TT.OUT Вывод символа R0 на экран
161774: CALL	@#163442		; SYSLIN Вывод в служебную строку
162000: BR	162004
162002: DW	162572			; Адрес строки "МРТИ ПЭВМ НЕМИГА 4.05"
162004: MOV	#161142, @#000004
162012: MOV	#000340, @#000006
; Попытка загрузки из сети
162020: MOV	#170010, R4		; Адрес регистра состояния локальной сети
162024: MOV	#000014, (R4)		; Настройка состояния сетевого адаптера
162030: MOV	#162632, R5		; Адрес строки "ждите..."
162034: CALL	@#162242		; PRINT; после этого R5 = "Ошибка сети ? Пульт>"
162040: MOV	#162174, @#000004	; Адрес прерывания ??
162046: BIT	#100040, (R4)		; Проверяем состояние локальной сети
162052: BMI	162174			; ошибка сети, выходим
162054: BEQ    	162046
162056: TST    	(R4)
162060: MOVB   	#000003, @#170006
162066: MOV    	#000016, (R4)
162072: CALL   	@#162154		; Ожидаем слово из сети
162076: MOV    	000002(R4), R2
162102: MOV    	#177712, SP
162106: MOV    	#177572, R0
162112: CLR    	(R0)
162114: CALL   	@#162154		;<| Ожидаем слово из сети
162120: MOV    	000002(R4), 177776(R0)	; | Сохраняем полученое слово
162126: INC    	(R0)
162130: SOB    	R2, 162114		; / продолжаем
162132: MOV    	#000020, (R4)
162136: CLR    	-(SP)
162140: CLR    	-(SP)
162142: BIS    	#000200, @#177766
162150: JMP    	@#161074
; Подпрограмма -- ожидание слова из сети
162154: CLR    	R1
162156: BIT    	#100040, (R4)
162162: BMI    	162174
162164: BEQ    	162172
162166: TST    	(R4)
162170: RETURN 	
162172: SOB    	R1, 162156
162174: MOV	#002060, (R4)
162200: JMP	@#161426		; Выводим "Ошибка сети ? Пульт>" и в пульт
;
; ==== Программы вывода на экран чисел и строк =======================================
;
; Подпрограмма DUMP Вывод слова как 8-ричного числа; R3 = число
162204: MOV    	#000006, R1		; Шесть разрядов
162210: CLR    	R0
162212: ROL    	R3
162214: ROL    	R0
162216: ADD    	#000060, R0		; '0'
162222: CALL   	@#163554		; TT.OUT Вывод символа
162226: CLR    	R0
162230: ROL    	R3
162232: ROL    	R0
162234: ROL    	R3
162236: ROL    	R0
162240: SOB    	R1, 162212
; Подпрограмма PRINT -- Вывод строки на экран; R5 = адрес строки
162242: MOVB	(R5)+, R0		; Очередной символ
162244: BNE	162250			; Не ноль?
162246: RETURN				; Конец строки, выходим
162250: CALL	@#163554		; TT.OUT Вывод символа
162254: BR	162242			; Продолжаем вывод строки
;
; Ввод команды; команда это символ либо 8-ричное число (параметр) и символ
162256: CLR	R1			; Длина параметра пока нулевая
162260: CLR	R5			; Параметр по умолчанию = 0
162262: TSTB	@#177560		; Получен ли символ с клавиатуры??
162266: BPL	162262			; Пока не получен
162270: MOVB	@#177562, R3		; Считываем символ
162274: CMPB	R3, #000177
162300: BNE	162330
162300: BNE    	162330
162302: DEC    	R1
162304: BMI    	162256
162306: ASH    	R5, #177775
162312: BIC    	#160000, R5
162316: MOV    	#000134, R0
162322: CALL   	@#163554		; TT.OUT Вывод символа
162326: BR     	162262
162330: MOV	R3, R0
162332: CMPB	R0, #000040		; Это спецсимвол с кодом меньше кода пробела?
162336: BLO	162246			; Да => выходим
162340: CALL	@#163554		; TT.OUT Вывод символа
162344: BIC	#177407, R3
162350: CMP	#000060, R3		; Это цифра?
162354: BNE	162246			; Нет => выходим
162356: BIC    	#177770, R0
162362: ASH    	R5, #000003
162366: BIS    	R0, R5
162370: INC    	R1			; Длина строки увеличилась
162372: BR     	162262			; Переходим к ожиданию следующего символа
;
; Подпрограмма SOUND
162374: MOV	R4, -(SP)		; Сохраняем R4
162376: BICB	#000200, @#177761	; Предотвращаем повторный вызов из HALT-обработчика??
162404: CLR	@#170024		; Сброс таймер 2 (длительности)
162410: MOV	000002(SP), R4		; Откуда вызвали SOUND
162414: MOV	000002(R4), R4		; Получаем адрес мелодии 
162420: BNE	162426

162426: TSTB	(R4)
162430: BEQ	162462
162432: MOV	R4, @#177750
162436: MOV	#001516, @#170020	; Пишем в регистр состояния таймера
162444: MOVB	(R4)+, @#170030		; Октава и громкость
162450: CALL	@#162466		; Обработка продолжения мелодии
162454: BISB	#000200, @#177761	; Возвращаем флаг блокировки
162462: MOV	(SP)+, R4		; Восстанавливаем R4
162464: RETURN	
; Обработка продолжения мелодии
162466: MOV	R3, -(SP)		; Сохраняем R3
162470: MOVB	(R4)+, R3
162472: BIC	#177760, R3		; Оставляем нижние 4 бита -- 00..17
162476: ASL	R3			; и умножаем на 2
162500: MOV	162532(R3), @#170022	; Выбираем по R3 слово и пишем в первый счётчик
162506: MOVB	(R4)+, @#170024		; Пишем байт во второй счётчик
162512: CLRB	@#177760		; Очищаем счётчик??
162516: MOV	R4, @#177752		; Запоминаем адрес продолжения мелодии
162522: TST	@#170026		; Устанавливаем триггер таймера
162526: MOV	(SP)+, R3		; Восстанавливаем R3
162530: RETURN
; Значения задержки первого таймера для нот
162532: DW	000000, 002253, 002150, 002050, 001755, 001664, 001577, 001515	
162552: DW	001435, 001361, 001306, 001237, 001171, 000000, 000000, 000000

;
; ==== Подпрограммы работы с дисководом MD ===========================================
;
; Чтение с дисковода для загрузки; R5 = номер устройства
162704: CALL	@#163422		; MODE3
162710: MOV	#000001, R4
162714: MOV	R5, -(SP)		; Запоминаем номер устройства
162716: ASR	R5			; Получаем номер привода
162720: BHIS	162726
162722: ADD	#000004, R5
162726: MOV	R5, @#004002
162732: MOV	#000400, -(SP)
162736: CLR	-(SP)
162740: MOV	R4, -(SP)		; Сохраняем R4
162742: MOV	#000006, R1		; Повторять 6 раз
162746: MOV	#000070, R0		;<| Команда -- мотор и ШАГ ВПЕРЁД
162752: CALL	@#163252		; | Готовимся и запускаем команду
162756: SOB	R1, 162746		; / Повтор цикла
162760: MOV	#000030, R0		; Команда -- мотор и ШАГ НАЗАД
162764: CALL	@#163252		; Готовимся и запускаем команду
162770: CLR	@#177106		; Сбрасываем таймер
162774: BIT	R4, @#177106		; Ждём
163000: BNE	162774
163002: BIT	#000010, (R5)		; TR00 ?
163006: BNE	162760			; Нет => повторяем команду ШАГ НАЗАД
163010: CLR	@#177106		;<| Сбрасываем таймер
163014: BIT	R4, (R5)		; | Сброшен RELOAD ?
163016: BEQ	163026			; | Да -- переходим к чтению секторов
163020: SOB	R2, 163010		; / Ждём
163022: JMP	@#163242
; Мы на 0-й дорожке, читаем первый сектор
163026: MOVB	R4, R0			; Количество секторов = 1
163030: MOV	#004004, R3		; Адрес буфера для чтения
163034: CALL	@#163312		; Прочитать сектора
163040: CLR	@#004000
163044: MOV	@#004000, R0
163050: MOVB	004016(R0), R0		; Первый байт -- кол-во секторов на 0-й дорожке
163054: MOV	#004140, R3		; Куда читать дорожку
163060: CALL	@#163312		; Прочитать сектора
163064: CLR	R1
163066: MOV	#004016, R5
163072: MOV	#000120, R4
163076: MOVB	(R5)+, R2
163100: MOV	R1, R0
163102: ADD	R2, R1
163104: CMP	R1, (SP)
163106: BHI	163116
163110: SOB    	R4, 163076
163112: JMP    	@#163242
;
163116: MOV	(SP), R3
163120: SUB	R0, R3
163122: SUB	#000120, R4
163126: ADD	@#004000, R4
163132: BEQ	163166
163134: MOV    	#000030, R0
163140: SUB    	R4, @#004000
163144: TST    	R4
163146: BPL    	163156
163150: MOV    	#000070, R0
163154: NEG    	R4
163156: CALL   	@#163252
163162: SOB    	R4, 163156
163164: BR     	163044
;
163166: INC	R3
163170: MOV	#003750, R5
163174: ADD	#000202, R5
163200: SOB	R3, 163174
163202: MOV	#000100, R4
163206: MOV	(SP)+, R3
163210: MOV	(SP)+, R2
163212: MOV	(R5)+, (R2)+
163214: DEC	(SP)
163216: BEQ	163232
163220: SOB	R4, 163212
163222: INC	R3
163224: MOV	R2, -(SP)
163226: MOV	R3, -(SP)
163230: BR	163064
163232: TST	(SP)+
163234: MOV	(SP)+, R0
163236: BR	163250
;
163240: TST    	(SP)+
163242: MOV    	(SP)+, (SP)+
163244: MOV    	(SP)+, (SP)+
163246: SEC    	
163250: RETURN	
;
; Подготовка и запуск операции; R0 = операция
163252: MOV	#177106, R5		; Адрес регистра таймера дисковода
163256: MOV	#000006, R2		; 3 мс * 6 = 18 мс
163262: CLR	(R5)			; Стартуем таймер
163264: BIT	#000001, (R5)		; Таймер досчитал?
163270: BNE	163264
163272: SOB	R2, 163262
163274: BIS	@#004002, R0
163300: MOV	R0, -(R5)		; Задаём режим
163302: TST	-(R5)			; Заполняем флаги из регистра данных
163304: MOV	#000001, -(R5)		; Запуск операции
163310: RETURN				; Теперь R5 = адрес регистра состояния
;
; Чтение секторов; R0 = кол-во секторов, R3 = адрес куда читать
163312: MOV	R3, R1
163314: MOV	R0, -(SP)		; Запомним кол-во секторов
163316: MOV	#000012, R4		; 10 -- размер заголовка дорожки
163322: ADD	#000202, R4		; 130 -- размер сектора
163326: SOB	R0, 163322		; Умножим 130 на кол-во секторов
163330: MOV	#000010, R0		; Команда -- включить мотор и читать
163334: CALL	@#163252		; Организуем запуск команды
163340: MOV	#177102, R2		; Адрес регистра данных дисковода
163344: TSTB	(R5)			; Готов прочитанный байт?
163346: BPL	163344			; Пока нет -- TR не установлен
163350: MOVB	(R2), (R1)+		; Читаем очередной байт
163352: SOB	R4, 163344		; Переходим к следующему
163354: MOV	(R5), R0		; Запомним состояние
163356: CLR	(R5)			; Окончание операции чтения
163360: MOV	(SP)+, R4		; Вспомним кол-во секторов
163362: INC	R4
163364: BIT	#000141, R0		; RELOAD или OP-FAILED или LOST-DATA ?
163370: BNE	163240			; Да -- завершаемся с ошибкой
163372: MOV	#000010, R0		; 8 -- длина заголовка
163376: CLR	R2			; Начинаем считать контрольную сумму
163400: MOVB	(R3)+, R1		; Очередной байт
163402: ADD	R1, R2			; Добавляем к сумме
163404: SOB	R0, 163400
163406: MOV	#000200, R0		; 128 -- длина сектора
163412: CMP	R2, (R3)+		; Сумма совпала?
163414: BNE	163240			; Нет -- завершаемся с ошибкой
163416: SOB	R4, 163376		; Продолжаем подсчёт сумм секторов
163420: RETURN	
;
; Подпрограмма MODE3: Вызов подпрограммы с запретом прерываний
163422: MOVB	#000003, @#170006	; Запрещение прерываний
163430: CALL	@(SP)+			; Выполняем как п/п то что после CALL @#163422
163432: MOVB	#000000, @#170006	; Разрешение прерываний
163440: RETURN	
;
; Подпрограмма SYSLIN: Вывод в служебную строку
163442: CALL	@#163422		; MODE3
163446: MOV	R0, -(SP)
163450: MOV	R1, -(SP)
163452: MOV	#177772, R0		; Адрес переменной - место курсора
163456: MOV	(R0), -(SP)
163460: MOV	-(R0), -(SP)
163462: MOV	000012(SP), R1
163466: CMP	(R0)+, (R1)+
163470: MOV	(R1), R1
163472: MOVB	(R1)+, (R0)+
163474: CLRB	(R0)+
163476: ADD	#176000, -(R0)
163502: CLR	-(R0)
163504: BIS	#000010, -(R0)
163510: CMP	@#177772, #176100
163516: BGE	163532
163520: MOVB	(R1)+, R0		; Получаем следующий символ
163522: BEQ	163532			; 0?
163524: CALL	@#163560		; SYSOUT Вывод символа на экран
163530: BR	163510
163532: MOV	#177766, R0
163536: BIC	#000010, (R0)+
163542: MOV	(SP)+, (R0)+
163544: MOV	(SP)+, (R0)+
163546: MOV	(SP)+, R1
163550: MOV	(SP)+, R0
163552: RETURN	
;
; ==== Программа вывода символов на экран ============================================
;
; TT.OUT Вывод символа на экран; мл.байт R0 = символ
163554: CALL	@#163422		; MODE3
; SYSOUT Вход -- вывод символа
163560: MOV	SP, @#177642
163564: MOV	#177642, SP
163570: BIS	#000001, @#177574	; Включаем экран в основную память
163576: CALL	@177774
163602: BIC	#000001, @#177574	; Отключаем экран от основной памяти
163610: MOV	(SP), SP
163612: RETURN	
;
163614: MOV    	#177772, R4
163620: SUB    	#000040, R5
163624: BPL    	163630
163626: CLR    	R5
163630: DECB   	@#177770
163634: BEQ    	163660
163636: CMP    	R5, #000027
163642: BHI    	164212
163644: MUL    	R5, #001200
163650: BIC    	#177700, (R4)
163654: BIS    	R5, (R4)
163656: BR     	164212
163660: CMP    	R5, #000077
163664: BHI    	164212
163666: BIC    	#000077, (R4)
163672: BR     	163654
;
; Стандартная подпрограмма вывода символа
163674: MOV	R0, -(SP)
163676: MOV	R1, -(SP)
163700: MOV	R2, -(SP)
163702: MOV	R3, -(SP)
163704: MOV	R4, -(SP)
163706: MOV	R5, -(SP)
163710: CALL	@#165040		; Убрать курсор если он виден
163714: MOV	000012(SP), R5
163720: BIC	#177400, R5		; Оставляем только младший байт
163724: MOV	#000100, R1
163730: MOV	#177770, R2		; Адрес SIZE
163734: TSTB	(R2)
163736: BPL	163770
163740: CLRB   	(R2)
163742: CMP    	R5, #000131
163746: BEQ    	164206
163750: CMP    	R5, #000113
163754: BHI    	164212
163756: SUB    	R1, R5
163760: BMI    	164212
163762: MOVB   	165142(R5), R4
163766: BR     	164172
163770: BNE	163614
163772: MOVB	@#177766, R4
163776: BPL	164030
164000: CLR    	@#177762		; | Маска фона для символа
164004: CLR    	@#177764		; | Маска гашения символа перед выводом
164010: ROLB   	R5
164012: CLC    	
164014: BPL    	164026
164016: BITB   	#000040, R4
164022: BEQ    	164026
164024: SEC    	
164026: RORB   	R5
164030: CMP	R5, #000040
164034: BLO	164134
164036: ROLB	R5
164040: BPL	164044
164042: BIC	R1, R5
164044: BHIS	164050
164046: BIS	R1, R5
164050: ASR	R5
164052: ADD	#002000, R3		; К смещению добавляем адрес начала ГЗУ
164056: ASL	R3
164060: SUB	#000040, R5
164064: MUL	R5, #000012		; Получаем смещение в знакогенераторе
164070: ADD	#165716, R5		; Стандартный знакогенератор
164074: MOV	#000012, R4		; Высота 10. пикселей
164100: ASL	R1
164102: MOVB	(R5), R2		; < Берём строку символа?
164104: SWAB	R2			; | Переносим в старший байт
164106: CLRB	R2			; |
164110: BISB	(R5)+, R2		; | Копируем в младший байт
164112: BIC	@#177764, R2		; | Маска гашения символа перед выводом
164116: MOV	@#177762, R0		; | Маска фона для символа
164122: XOR	R0, R2			; |
164124: MOV	R2, (R3)		; | Пишем в видеопамять??
164126: ADD	R1, R3			; | К следующей пиксел-строке (+ #0200)
164130: SOB	R4, 164102		; /
164132: BR	164322			; Переходим к следующей позиции вывода
; Обработка символов с кодом меньше #040
164134: MOV	#165156, R2
164140: BITB	#000010, R4		; Backspace?
164144: BNE	164156			; Нет
164146: CMP	(R2)+, (R2)+
164150: TSTB	R4
164152: BMI	164156
164154: CMP	(R2)+, (R2)+
164156: MOV	(R2)+, R0
164160: MOV	(R2), R1
164162: ASHC	R0, R5
164164: BPL	164432
164166: MOVB	165102(R5), R4		; По коду символа получаем смещение из таблицы
164172: BIC	#177400, R4		; смещение не больше 377
164176: ASL	R4			; смещение умножить на 2
164200: MOV	#177770, R2		; Размер экрана в байтах, начиная от начала ГЗУ
164204: ADD	R4, PC			; Переходим по 164206 + 2 * смещение из таблицы 165102
; +000 -- символ 20 либо ESC+131 -- прямая адресация курсора;
; следующие два байта строки: N строки+40, N позиции+40
164206: MOVB   	#000002, (R2)
164212: BR     	164432
; +003 -- символ 36 -- очистка служебной строки
164214: CLR    	R5			; 000000 -- адрес начала экрана
164216: MOV    	#002000, R3		; Сколько слов чистить
164222: CLR    	(R5)+
164224: SOB    	R3, 164222
164226: BR     	164432
; +011 -- символ 27
164230: BIC    	#000400, (R2)
164234: BIS    	#000200, -(R2)
164240: BR     	164432
;
164242: BIT	#000200, 177776(R2)
164250: BNE    	164264
164252: MOV    	#040000, R5
164256: XOR    	R5, @#177760
164262: BR     	164432
164264: DECB   	(R2)
164266: BR     	164432
; +031 -- символ 06
164270: CLR	(R2)
164272: TST	-(R2)
164274: CLR	-(R2)
164276: CLR	-(R2)
164300: BR	164432
; +036 -- символы 02..05
164302: COMB	177760(R5)
164306: BR	164432
; +041 -- символ 30 -- погасить/включить курсор
164310: MOV    	#000200, R5
; +043 -- символ 01 -- включить/выключить сдвиг экрана
164314: SWAB   	R5
164316: XOR    	R5, (R2)
164320: BR     	164432
; Переход к следующей позиции вывода
164322: MOV	#177772, R2		; Текущая позиция курсора
164326: INC	(R2)			; Следующая позиция
164330: MOV	(R2), R3
164332: MOV	R3, R4
164334: BIC	#177700, R4		; Позиция в пределах строки
164340: BNE	164432
; +061 -- символ 12 или 35 -- перевод строки
164350: ADD	#001200, R3		; Добавляем 10 линий
164354: CMP	R3, #034700		; Дошли до конца экрана?
164360: BLO	164440			; Нет => завершаем процедуру
164362: BIC    	#177700, R3
164366: BITB   	#000001, @#177771
164374: BNE    	164440
; Скроллинг экрана
164376: MOV    	#004000, R5		; Адрес куда копировать
164402: MOV    	#006400, R3		; Адрес откуда копировать
164406: MOV    	#034600, R0		; Сколько слов копировать
164412: MOV    	(R3)+, (R5)+		; Копируем слово
164414: SOB    	R0, 164412		; Экран не кончился? => повторяем
164416: BR     	164742			; Очищаем последнюю строку
; +105 -- символ 10 -- Backspace
164420: BIC    	#177700, R3		; На начало строки
164424: BEQ    	164750
164426: DEC    	@#177772		; Сохраняем позицию курсора
164432: BR	164750
; +113 -- символ 15 -- возврат каретки
164434: BIC	#000077, R3
164440: MOV	R3, @#177772
164444: BR	164750
; +120 -- символ 11 -- горизонтальная табуляция с шагом 8
164446: MOV	R3, R4
164450: BIC	#177700, R4
164454: CMP	R4, #000077
164460: BHIS	164750
164462: ADD	#000010, R3
164466: BIC	#000007, R3
164472: BR	164440
; +133 -- символ 16 -- переход на русский регистр
164474: BIS    	#000040, -(R2)
164500: BR     	164750
; +136 -- символ 17 -- переход на латинский регистр
164502: BIC    	#000040, -(R2)
164506: BR     	164750
;
164510: BIC    	#177600, -(R2)
164514: BR     	164750
; +144 -- символ 23 -- курсор вниз на 1 линию
164516: ADD    	#000200, R3	; вниз на 2 линии
; +146 -- символ 24 -- курсор вверх на 1 линию
164522: SUB    	#000100, R3	; вверх на 1 линию
164526: BMI    	164516		; вышли за экран вверх? тогда ничего не делаем
164530: CMP    	R3, #034700	; вышли за экран вниз?
164534: BHIS   	164522		; да => тогда ничего не делаем
164536: BR     	164546		; устанавливаем новое смещение курсора и выходим
; +155 -- символ 22 -- курсор вверх на 1 строку; в верхней строке не выполняется
164540: SUB    	#001200, R3	; на 10. линий вверх
164544: BMI    	164750		; это первая строка? тогда ничего не делаем
164546: MOV    	R3, @#177772	; новое смещение курсора
164552: BR     	164750		; выходим
; +163 -- символ 26 -- курсор вниз на 1 строку; в нижней строке игнорируется
164554: ADD    	#001200, R3	; на 10. линий вниз
164560: CMP    	R3, #034700	; вышли за нижний край?
164564: BHIS   	164750		; да => тогда ничего не делаем
164566: BR     	164546		; устанавливаем новое смещение курсора и выходим
;
164570: INC    	R3
164572: MOV    	R3, R4
164574: BIC    	#177700, R4
164600: BEQ    	164750
164602: BR     	164546
;
164604: CLR    	R3
164606: BR     	164546
164610: SUB    	#001200, R3
164614: BPL    	164546
164616: MOV    	#100000, R5
164622: MOV    	#075400, R3
164626: MOV    	#034600, R2
164632: MOV    	-(R3), -(R5)
164634: SOB    	R2, 164632
164636: MOV    	#001200, R2
164642: CLR    	(R3)+
164644: SOB    	R2, 164642
164646: BR     	164750
; ?? -- символ 007 -- BELL
164650: BITB   	#000100, @#177761
164656: BNE    	164750
164660: CALL   	@#160126	; SOUND
164664: BR     	164750
164666: DB	164670			; адрес мелодии
164670: DB	001, 205, 017, 000
; +233 -- символ 13 -- очистить строку от позиции курсора
164674: CALL   	@#164772		; Очистка строки от текущей позиции
164700: BR     	164750
; +236 -- символ 37 -- очистка экрана от позиции курсора
164702: CALL   	@#164772		; Очистка строки от текущей позиции
164706: BIC    	#000077, R3
164712: MOV    	R3, R5
164714: ADD    	#002000, R5
164720: BMI    	164750
164722: BR     	164740			; Завершить очистку экрана
; +247 -- символ 21 -- очистка всего экрана, включая служебную строку
164724: CLR	R5			; 000000 -- начало экрана проецированного на память
164726: BR	164734
; +251 -- символ 14 -- перевод формата, очистка экрана, служебная строка сохраняется
164730: MOV	#002000, R5		; Начало экрана после служебной строки
164734: CLR	@#177772		; Курсор будет в начале экрана
164740: ASL	R5
164742: CLR	(R5)+
164744: TST	R5
164746: BPL	164742
; +261 -- символ 00 -- неиспользуемый код символа
; Завершение обработки символа
164750: CALL	@#165040		; Восстановление курсора
164754: MOV	(SP)+, R5
164756: MOV	(SP)+, R4
164760: MOV	(SP)+, R3
164762: MOV	(SP)+, R2
164764: MOV	(SP)+, R1
164766: MOV	(SP)+, R0
164770: RETURN	
; Очистка строки от текущей позиции до конца строки
164772: MOV    	#000012, R2		; 10. итераций
164776: MOV    	R3, R5
165000: MOV    	#000100, R4		; 64. позиции в строке
165004: BIC    	#177700, R5
165010: SUB    	R5, R4
165012: BLE    	165030
165014: MOV    	R3, R5
165016: ADD    	#002000, R5		; Начало основной части экрана
165022: ASL    	R5
165024: CLR    	(R5)+
165026: SOB    	R4, 165024
165030: ADD    	#000100, R3
165034: SOB    	R2, 164776
165036: RETURN 	
;
; Подпрограмма стирания/восстановления курсора
165040: MOV	@#177772, R3		; Место курсора от начала ГЗУ
165044: BMI	165100
165046: TSTB	@#177771		; Состояние курсора??
165052: BMI	165100
165054: TST	@#177756		; Состояние курсора при мигании
165060: BPL	165100			; не виден => не нужно убирать
165062: MOV	R3, R4
165064: ADD	#003100, R4
165070: BMI	165100
165072: ROL	R4
165074: BMI	165100
165076: COM	(R4)			; Инвертируем восемь пикселей -- курсор
165100: RETURN	
; Таблица смещений переходов для обработки спецсимволов
165102: DB	261, 043, 036, 036, 036, 036, 031, 221	; 00..07
165112: DB	105, 120, 061, 233, 251, 113, 133, 136	; 10..17
165122: DB	000, 247, 155, 144, 146, 177, 163, 011	; 20..27
165132: DB	041, 171, 105, 016, 201, 061, 003, 236	; 30..37
; Таблица смещений переходов для обработки символов ESC + 100..113
165142: DB	141, 155, 163, 171, 105, 261, 022, 261	; 100..107
165152: DB	177, 201, 236, 233

; Точка входа QDRAW -- DRAW для QUASIC
165172: MOV    	(SP), R5
; Точка входа FDRAW -- DRAW для FORTRAN
165174: CALL   	@#165672
; Точка входа DRAW -- нарисовать линию из (XOLD,YOLD) в (XNEW,YNEW)
; После выполнения операции XNEW=XOLD, YNEW=YOLD.
165200: CALL   	@#165230
165204: MOV    	@#000212, @#000216	; XNEW -> XOLD
165212: MOV    	@#000214, @#000220	; YNEW -> YOLD
165220: RETURN 	
; Точка входа QLINE -- LINE для QAUSIC
165222: MOV    	(SP), R5
; Точка входа FLINE -- LINE для FORTRAN
165224: CALL   	@#165672
; Точка входа LINE -- нарисовать линию из (XOLD,YOLD) в (XNEW,YNEW)
165230: MOV    	#000212, R5		; Адрес XNEW
165234: MOV    	(R5)+, R0
165236: MOV    	(R5)+, R1
165240: MOV    	(R5)+, R2
165242: MOV    	(R5)+, R3
165244: CLR    	@#000204		; Очищаем REV
165250: MOV    	#000001, R4
165254: MOV    	R4, R5
165256: SUB    	R2, R0
165260: BPL    	165266
165262: NEG    	R0
165264: NEG    	R5
165266: SUB    	R3, R1
165270: BPL    	165276
165272: NEG    	R1
165274: NEG    	R4
165276: CMP    	R0, R1
165300: BGE    	165330
165302: MOV    	R0, -(SP)
165304: MOV    	R1, R0
165306: MOV    	(SP), R1
165310: MOV    	R4, (SP)
165312: MOV    	R5, R4
165314: MOV    	(SP), R5
165316: MOV    	R2, (SP)
165320: MOV    	R3, R2
165322: MOV    	(SP)+, R3
165324: INC    	@#000204
165330: TST    	R0
165332: BEQ    	165376
165334: ASL    	R1
165336: MOV    	R0, -(SP)
165340: ASL    	(SP)
165342: MOV    	R1, -(SP)
165344: SUB    	R0, (SP)
165346: CALL   	@#165376
165352: TST    	(SP)
165354: BMI    	165364
165356: SUB    	000002(SP), (SP)
165362: ADD    	R4, R3
165364: ADD    	R1, (SP)
165366: ADD    	R5, R2
165370: SOB    	R0, 165346
165372: CMP    	(SP)+, (SP)+
165374: RETURN 	
165376: MOV    	R1, -(SP)		; Сохраняем регистры
165400: MOV    	R2, -(SP)
165402: MOV    	R3, -(SP)
165404: TST    	@#000204
165410: BEQ    	165416
165412: MOV    	R2, R3
165414: MOV    	(SP), R2
165416: CALL   	@#165450		; Выводим точку (R2,R3)
165422: MOV    	(SP)+, R3		; Восстанавливаем регистры
165424: MOV    	(SP)+, R2
165426: MOV    	(SP)+, R1
165430: RETURN 	
;
; Точка входа QPOINT -- POINT для QUASIC
165432: MOV    	(SP), R5
; Точка входа FPOINT -- POINT для FORTRAN
165434: CALL   	@#165672
; Точка входа POINT -- нарисовать точку
165440: MOV    	@#000212, R2		; XNEW
165444: MOV    	@#000214, R3		; YNEW
165450: CALL   	@#163422		; MODE3
165454: CALL   	@#165602		; Находим точку на экране
165460: BLO    	165512
165462: TST    	(R1)+
165464: MOV    	@#000210, R2		; BRIGHT
165470: ASR    	R2
165472: BLO    	165502
165474: BIC    	R3, @#177570		; Пишем в экран
165500: BR     	165506
165502: BIS    	R3, @#177570		; Пишем в экран
165506: SWAB   	R3
165510: SOB    	R1, 165470
165512: RETURN 	
;
; Точка входа QRPOIN -- RPOINT для QUASIC
165514: MOV    	(SP), R5
; Точка входа FRPOIN -- RPOINT для FORTRAN
165516: CALL   	@#165672
165522: BR     	165530
; Точка входа RPOINT -- прочитать яркость точки
165524: MOV    	#000210, R4		; Адрес BRIGHT
165530: MOV    	@#000212, R2		; XNEW
165534: MOV    	@#000214, R3		; YNEW
165540: CLR    	(R4)
165542: CALL   	@#163422		; MODE3
165546: CALL   	@#165602		; Находим точку на экране
165552: BLO    	165576
165554: MOV    	#000002, R1
165560: SWAB   	R3
165562: BIT    	R3, @#177570
165566: BEQ    	165572
165570: ADD    	R1, (R4)
165572: SOB    	R1, 165560
165574: RETURN 	
165576: DEC    	(R4)
165600: RETURN 	
; Нахождение точки на экране; устанавливает косвенный адрес, возвращает маску в R3
165602: MOV    	R2, R1
165604: CMP    	#000777, R2
165610: BLO    	165670
165612: ASH    	R2, #177775
165616: CMP    	#000377, R3
165622: BLO    	165670
165624: CMP    	@#000206, R3		; Сравниваем с VFORM
165630: BLO    	165670
165632: COMB   	R3
165634: SWAB   	R3
165636: SEC    	
165640: ROR    	R3
165642: ASR    	R3
165644: BIS    	R3, R2
165646: MOV    	R2, @#177572		; Устанавливаем косвенный адрес
165652: BIC    	#177770, R1
165656: INC    	R1
165660: CLR    	R3
165662: SEC    	
165664: ROR    	R3
165666: SOB    	R1, 165664
165670: RETURN 	
; Подготовка перед вызовом для FORTRAN
165672: MOV    	(R5)+, R0
165674: MOV    	(R5), R4
165676: BIC    	#177770, R0
165702: BEQ    	165714
165704: MOV    	#000210, R3
165710: MOV    	@(R5)+, (R3)+
165712: SOB    	R0, 165710
165714: RETURN 	
;
; ==== Стандартный знакогенератор ====
165716: DB				; Знакогенератор, 120 символов, 8 байт/символ

; ==== Блок переменных ====
177720: DW			; R0  при останове
177722: DW			; R1  при останове
177724: DW			; R2  при останове
177726: DW			; R3  при останове
177730: DW			; R4  при останове
177732: DW			; R5  при останове
177734: DW			; SP  при останове
177736: DW			; PC  при останове
177740: DW			; PSW при останове
177750: DW			; Адрес начала мелодии
177752:	DW			; Адрес продолжения мелодии
177754: DW			; Адрес подпрограммы SOUND
177756: DB			; Счётчик мигания курсора
177760: DB			; Счётчик мелодии
177761: DB			; Байт блокировки вызова SOUND
177762: DW			; FRG    Маска фона для вывода символа
177764: DW			; COL    Маска гашения символа перед выводом
177766: DW			; Какие-то важные флаги??
177770: DW			; SIZE   Размер экрана в байтах, начиная от начала ГЗУ
177772: DW			; CUR    Место курсора от начала ГЗУ
177774: DW			; Адрес подпрограммы вывода символа, по умолчанию 163674
177776: DW			; Значение #056363
